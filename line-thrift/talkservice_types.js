//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.xc = {
  'TIMELINE' : 1,
  'NEARBY' : 2,
  'SQUARE' : 3
};
ttypes.cc = {
  'ILLEGAL_ARGUMENT' : 0,
  'AUTHENTICATION_FAILED' : 1,
  'DB_FAILED' : 2,
  'INVALID_STATE' : 3,
  'EXCESSIVE_ACCESS' : 4,
  'NOT_FOUND' : 5,
  'INVALID_MID' : 9,
  'NOT_A_MEMBER' : 10,
  'INVALID_LENGTH' : 6,
  'NOT_AVAILABLE_USER' : 7,
  'NOT_AUTHORIZED_DEVICE' : 8,
  'NOT_AUTHORIZED_SESSION' : 14,
  'INCOMPATIBLE_APP_VERSION' : 11,
  'NOT_READY' : 12,
  'NOT_AVAILABLE_SESSION' : 13,
  'SYSTEM_ERROR' : 15,
  'NO_AVAILABLE_VERIFICATION_METHOD' : 16,
  'NOT_AUTHENTICATED' : 17,
  'INVALID_IDENTITY_CREDENTIAL' : 18,
  'NOT_AVAILABLE_IDENTITY_IDENTIFIER' : 19,
  'INTERNAL_ERROR' : 20,
  'NO_SUCH_IDENTITY_IDENFIER' : 21,
  'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY' : 22,
  'ILLEGAL_IDENTITY_CREDENTIAL' : 23,
  'UNKNOWN_CHANNEL' : 24,
  'NO_SUCH_MESSAGE_BOX' : 25,
  'NOT_AVAILABLE_MESSAGE_BOX' : 26,
  'CHANNEL_DOES_NOT_MATCH' : 27,
  'NOT_YOUR_MESSAGE' : 28,
  'MESSAGE_DEFINED_ERROR' : 29,
  'USER_CANNOT_ACCEPT_PRESENTS' : 30,
  'USER_NOT_STICKER_OWNER' : 32,
  'MAINTENANCE_ERROR' : 33,
  'ACCOUNT_NOT_MATCHED' : 34,
  'ABUSE_BLOCK' : 35,
  'NOT_FRIEND' : 36,
  'NOT_ALLOWED_CALL' : 37,
  'BLOCK_FRIEND' : 38,
  'INCOMPATIBLE_VOIP_VERSION' : 39,
  'INVALID_SNS_ACCESS_TOKEN' : 40,
  'EXTERNAL_SERVICE_NOT_AVAILABLE' : 41,
  'NOT_ALLOWED_ADD_CONTACT' : 42,
  'NOT_CERTIFICATED' : 43,
  'NOT_ALLOWED_SECONDARY_DEVICE' : 44,
  'INVALID_PIN_CODE' : 45,
  'NOT_FOUND_IDENTITY_CREDENTIAL' : 46,
  'EXCEED_FILE_MAX_SIZE' : 47,
  'EXCEED_DAILY_QUOTA' : 48,
  'NOT_SUPPORT_SEND_FILE' : 49,
  'MUST_UPGRADE' : 50,
  'NOT_AVAILABLE_PIN_CODE_SESSION' : 51,
  'EXPIRED_REVISION' : 52,
  'NOT_YET_PHONE_NUMBER' : 54,
  'BAD_CALL_NUMBER' : 55,
  'UNAVAILABLE_CALL_NUMBER' : 56,
  'NOT_SUPPORT_CALL_SERVICE' : 57,
  'CONGESTION_CONTROL' : 58,
  'NO_BALANCE' : 59,
  'NOT_PERMITTED_CALLER_ID' : 60,
  'NO_CALLER_ID_LIMIT_EXCEEDED' : 61,
  'CALLER_ID_VERIFICATION_REQUIRED' : 62,
  'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 63,
  'MESSAGE_NOT_FOUND' : 64,
  'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT' : 65,
  'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED' : 66,
  'ACCOUNT_MIGRATION_PINCODE_BLOCKED' : 67,
  'INVALID_PASSWORD_FORMAT' : 69,
  'FEATURE_RESTRICTED' : 70,
  'MESSAGE_NOT_DESTRUCTIBLE' : 71,
  'PAID_CALL_REDEEM_FAILED' : 72,
  'PREVENTED_JOIN_BY_TICKET' : 73,
  'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT' : 75,
  'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY' : 76,
  'SECURITY_CENTER_NOT_VERIFIED' : 77,
  'SECURITY_CENTER_BLOCKED_BY_SETTING' : 78,
  'SECURITY_CENTER_BLOCKED' : 79,
  'TALK_PROXY_EXCEPTION' : 80,
  'E2EE_INVALID_PROTOCOL' : 81,
  'E2EE_RETRY_ENCRYPT' : 82,
  'E2EE_UPDATE_SENDER_KEY' : 83,
  'E2EE_UPDATE_RECEIVER_KEY' : 84,
  'E2EE_INVALID_ARGUMENT' : 85,
  'E2EE_INVALID_VERSION' : 86,
  'E2EE_SENDER_DISABLED' : 87,
  'E2EE_RECEIVER_DISABLED' : 88,
  'E2EE_SENDER_NOT_ALLOWED' : 89,
  'E2EE_RECEIVER_NOT_ALLOWED' : 90,
  'E2EE_RESEND_FAIL' : 91,
  'E2EE_RESEND_OK' : 92,
  'HITOKOTO_BACKUP_NO_AVAILABLE_DATA' : 93,
  'E2EE_UPDATE_PRIMARY_DEVICE' : 94,
  'SUCCESS' : 95,
  'CANCEL' : 96,
  'E2EE_PRIMARY_NOT_SUPPORT' : 97,
  'E2EE_RETRY_PLAIN' : 98,
  'E2EE_RECREATE_GROUP_KEY' : 99,
  'E2EE_GROUP_TOO_MANY_MEMBERS' : 100,
  'SERVER_BUSY' : 101,
  'NOT_ALLOWED_ADD_FOLLOW' : 102,
  'INCOMING_FRIEND_REQUEST_LIMIT' : 103,
  'OUTGOING_FRIEND_REQUEST_LIMIT' : 104,
  'OUTGOING_FRIEND_REQUEST_QUOTA' : 105,
  'DUPLICATED' : 106,
  'BANNED' : 107,
  'NOT_AN_INVITEE' : 108,
  'NOT_AN_OUTSIDER' : 109,
  'EMPTY_GROUP' : 111,
  'EXCEED_FOLLOW_LIMIT' : 112,
  'UNSUPPORTED_ACCOUNT_TYPE' : 113
};
ttypes.ec = {
  'BIRTHDAY' : 0
};
ttypes.jg = {
  'PUBLIC' : 0,
  'PRIVATE' : 1
};
ttypes.qe = {
  'UNKNOWN' : 0,
  'APP_FOREGROUND' : 1
};
ttypes.ca = {
  'UNKNOWN' : 0,
  'WIFI' : 1,
  'CELLULAR_NETWORK' : 2
};
ttypes.kf = {
  'COIN' : 0,
  'CREDIT' : 1,
  'MONTHLY' : 2
};
ttypes.aa = {
  'GROUP' : 0,
  'ROOM' : 1,
  'PEER' : 2
};
ttypes.gb = {
  'MID' : 0,
  'PHONE' : 1,
  'EMAIL' : 2,
  'USERID' : 3,
  'PROXIMITY' : 4,
  'GROUP' : 5,
  'USER' : 6,
  'QRCODE' : 7,
  'PROMOTION_BOT' : 8,
  'CONTACT_MESSAGE' : 9,
  'FRIEND_REQUEST' : 10,
  'REPAIR' : 128,
  'FACEBOOK' : 2305,
  'SINA' : 2306,
  'RENREN' : 2307,
  'FEIXIN' : 2308,
  'BBM' : 2309,
  'BEACON' : 11
};
ttypes.yc = {
  'NONE' : 0,
  'AVAILABLE' : 1,
  'ALREADY_REQUESTED' : 2,
  'UNAVAILABLE' : 3
};
ttypes.db = {
  'ONEWAY' : 0,
  'BOTH' : 1,
  'NOT_REGISTERED' : 2
};
ttypes.fb = {
  'UNSPECIFIED' : 0,
  'FRIEND' : 1,
  'FRIEND_BLOCKED' : 2,
  'RECOMMEND' : 3,
  'RECOMMEND_BLOCKED' : 4,
  'DELETED' : 5,
  'DELETED_BLOCKED' : 6
};
ttypes.le = {
  'UNKNOWN' : 0,
  'LINE' : 1,
  'NAVER_KR' : 2,
  'LINE_PHONE' : 3
};
ttypes.ke = {
  'UNKNOWN' : 0,
  'SUCCESS' : 1,
  'REQUIRE_SERVER_SIDE_EMAIL' : 2,
  'REQUIRE_CLIENT_SIDE_EMAIL' : 3
};
ttypes.fe = {
  'INVITATION_TICKET' : 1,
  'FAVORITE_TIMESTAMP' : 2
};
ttypes.vh = {
  'FACEBOOK' : 1,
  'SINA' : 2,
  'RENREN' : 3,
  'FEIXIN' : 4,
  'BBM' : 5,
  'APPLE' : 6
};
ttypes.g = {
  'SKIP' : 0,
  'PINCODE' : 1,
  'SECURITY_CENTER' : 2
};
ttypes.eeee = {
  'UNKNOWN' : 0,
  'LOCATION' : 1
};
ttypes.z4 = {
  'NOT_A_FRIEND' : 0,
  'ALWAYS' : 1
};
ttypes.nf = {
  'OUT' : 0,
  'IN' : 1,
  'TOLLFREE' : 2,
  'RECORD' : 3,
  'AD' : 4,
  'CS' : 5,
  'OA' : 6
};
ttypes.SyncReason = {
  'UNSPECIFIED' : 0,
  'UNKNOWN' : 1,
  'INITIALIZATION' : 2,
  'OPERATION' : 3,
  'FULL_SYNC' : 4,
  'AUTO_REPAIR' : 5,
  'MANUAL_REPAIR' : 6,
  'INTERNAL' : 7
};
ttypes.ib = {
  'UNKNOWN' : 0,
  'EUROPEAN_ECONOMIC_AREA' : 1
};
ttypes.y9 = {
  'MESSAGE' : 0,
  'NOTE' : 1,
  'CHANNEL' : 2
};
ttypes.x9 = {
  'ANYONE_IN_CHAT' : 0,
  'CREATOR_ONLY' : 1,
  'NO_ONE' : 2
};
ttypes.di = {
  'PROFILE' : 0,
  'SETTINGS' : 1,
  'OPS' : 2,
  'CONTACT' : 3,
  'RECOMMEND' : 4,
  'BLOCK' : 5,
  'GROUP' : 6,
  'ROOM' : 7,
  'NOTIFICATION' : 8,
  'ADDRESS_BOOK' : 9
};
ttypes.a3 = {
  'NA' : 0,
  'FRIEND_VIEW' : 1,
  'OFFICIAL_ACCOUNT_VIEW' : 2
};
ttypes.n2 = {
  'RESERVED' : 0,
  'OFFICIAL' : 1,
  'LINE_AT_0' : 2,
  'LINE_AT' : 3
};
ttypes.wc = {
  'INCOMING' : 1,
  'OUTGOING' : 2
};
ttypes.ApplicationType = {
  'IOS' : 16,
  'IOS_RC' : 17,
  'IOS_BETA' : 18,
  'IOS_ALPHA' : 19,
  'ANDROID' : 32,
  'ANDROID_RC' : 33,
  'ANDROID_BETA' : 34,
  'ANDROID_ALPHA' : 35,
  'WAP' : 48,
  'WAP_RC' : 49,
  'WAP_BETA' : 50,
  'WAP_ALPHA' : 51,
  'BOT' : 64,
  'BOT_RC' : 65,
  'BOT_BETA' : 66,
  'BOT_ALPHA' : 67,
  'WEB' : 80,
  'WEB_RC' : 81,
  'WEB_BETA' : 82,
  'WEB_ALPHA' : 83,
  'DESKTOPWIN' : 96,
  'DESKTOPWIN_RC' : 97,
  'DESKTOPWIN_BETA' : 98,
  'DESKTOPWIN_ALPHA' : 99,
  'DESKTOPMAC' : 112,
  'DESKTOPMAC_RC' : 113,
  'DESKTOPMAC_BETA' : 114,
  'DESKTOPMAC_ALPHA' : 115,
  'CHANNELGW' : 128,
  'CHANNELGW_RC' : 129,
  'CHANNELGW_BETA' : 130,
  'CHANNELGW_ALPHA' : 213,
  'CHANNELCP' : 144,
  'CHANNELCP_RC' : 145,
  'CHANNELCP_BETA' : 146,
  'CHANNELCP_ALPHA' : 147,
  'WINPHONE' : 160,
  'WINPHONE_RC' : 161,
  'WINPHONE_BETA' : 162,
  'WINPHONE_ALPHA' : 163,
  'BLACKBERRY' : 176,
  'BLACKBERRY_RC' : 177,
  'BLACKBERRY_BETA' : 178,
  'BLACKBERRY_ALPHA' : 179,
  'WINMETRO' : 192,
  'WINMETRO_RC' : 193,
  'WINMETRO_BETA' : 194,
  'WINMETRO_ALPHA' : 195,
  'S40' : 208,
  'S40_RC' : 209,
  'S40_BETA' : 210,
  'S40_ALPHA' : 211,
  'CHRONO' : 224,
  'CHRONO_RC' : 225,
  'CHRONO_BETA' : 226,
  'CHRONO_ALPHA' : 227,
  'TIZEN' : 256,
  'TIZEN_RC' : 257,
  'TIZEN_BETA' : 258,
  'TIZEN_ALPHA' : 259,
  'VIRTUAL' : 272,
  'FIREFOXOS' : 288,
  'FIREFOXOS_RC' : 289,
  'FIREFOXOS_BETA' : 290,
  'FIREFOXOS_ALPHA' : 291,
  'IOSIPAD' : 304,
  'IOSIPAD_RC' : 305,
  'IOSIPAD_BETA' : 306,
  'IOSIPAD_ALPHA' : 307,
  'BIZIOS' : 320,
  'BIZIOS_RC' : 321,
  'BIZIOS_BETA' : 322,
  'BIZIOS_ALPHA' : 323,
  'BIZANDROID' : 336,
  'BIZANDROID_RC' : 337,
  'BIZANDROID_BETA' : 338,
  'BIZANDROID_ALPHA' : 339,
  'BIZBOT' : 352,
  'BIZBOT_RC' : 353,
  'BIZBOT_BETA' : 354,
  'BIZBOT_ALPHA' : 355,
  'CHROMEOS' : 368,
  'CHROMEOS_RC' : 369,
  'CHROMEOS_BETA' : 370,
  'CHROMEOS_ALPHA' : 371,
  'ANDROIDLITE' : 384,
  'ANDROIDLITE_RC' : 385,
  'ANDROIDLITE_BETA' : 386,
  'ANDROIDLITE_ALPHA' : 387,
  'WIN10' : 400,
  'WIN10_RC' : 401,
  'WIN10_BETA' : 402,
  'WIN10_ALPHA' : 403,
  'BIZWEB' : 416,
  'BIZWEB_RC' : 417,
  'BIZWEB_BETA' : 418,
  'BIZWEB_ALPHA' : 419,
  'DUMMYPRIMARY' : 432,
  'DUMMYPRIMARY_RC' : 433,
  'DUMMYPRIMARY_BETA' : 434,
  'DUMMYPRIMARY_ALPHA' : 435,
  'SQUARE' : 448,
  'SQUARE_RC' : 449,
  'SQUARE_BETA' : 450,
  'SQUARE_ALPHA' : 451,
  'INTERNAL' : 464,
  'INTERNAL_RC' : 465,
  'INTERNAL_BETA' : 466,
  'INTERNAL_ALPHA' : 467,
  'CLOVAFRIENDS' : 480,
  'CLOVAFRIENDS_RC' : 481,
  'CLOVAFRIENDS_BETA' : 482,
  'CLOVAFRIENDS_ALPHA' : 483,
  'WATCHOS' : 496,
  'WATCHOS_RC' : 497,
  'WATCHOS_BETA' : 498,
  'WATCHOS_ALPHA' : 499
};
ttypes.u6 = {
  'NOT_SPECIFIED' : 0,
  'JP_DOCOMO' : 1,
  'JP_AU' : 2,
  'JP_SOFTBANK' : 3,
  'KR_SKT' : 17,
  'KR_KT' : 18,
  'KR_LGT' : 19,
  'JP_DOCOMO_LINE' : 4,
  'JP_SOFTBANK_LINE' : 5,
  'JP_AU_LINE' : 6
};
ttypes.ae = {
  'AUDIO' : 1,
  'VIDEO' : 2,
  'LIVE' : 3
};
ttypes.hb = {
  'NONE' : 0,
  'IMAGE' : 1,
  'VIDEO' : 2,
  'AUDIO' : 3,
  'HTML' : 4,
  'PDF' : 5,
  'CALL' : 6,
  'STICKER' : 7,
  'PRESENCE' : 8,
  'GIFT' : 9,
  'GROUPBOARD' : 10,
  'APPLINK' : 11,
  'LINK' : 12,
  'CONTACT' : 13,
  'FILE' : 14,
  'LOCATION' : 15,
  'POSTNOTIFICATION' : 16,
  'RICH' : 17,
  'CHATEVENT' : 18,
  'MUSIC' : 19,
  'PAYMENT' : 20,
  'EXTIMAGE' : 21,
  'FLEX' : 22
};
ttypes.ye = {
  'APPLE_APNS' : 1,
  'GOOGLE_C2DM' : 2,
  'NHN_NNI' : 3,
  'SKT_AOM' : 4,
  'MS_MPNS' : 5,
  'RIM_BIS' : 6,
  'GOOGLE_GCM' : 7,
  'NOKIA_NNAPI' : 8,
  'TIZEN' : 9,
  'MOZILLA_SIMPLE' : 10,
  'LINE_BOT' : 17,
  'LINE_WAP' : 18,
  'APPLE_APNS_VOIP' : 19,
  'MS_WNS' : 20,
  'GOOGLE_FCM' : 21,
  'CLOVA' : 22,
  'CLOVA_VOIP' : 23,
  'HUAWEI_HCM' : 24
};
ttypes.fafaf = {
  'FAILED' : 0,
  'OK_NOT_REGISTERED_YET' : 1,
  'OK_REGISTERED_WITH_SAME_DEVICE' : 2,
  'OK_REGISTERED_WITH_ANOTHER_DEVICE' : 3
};
ttypes.re = {
  'USER' : 0,
  'ROOM' : 1,
  'GROUP' : 2,
  'SQUARE' : 3,
  'SQUARE_CHAT' : 4,
  'SQUARE_MEMBER' : 5,
  'BOT' : 6
};
ttypes.cg = {
  'GOOGLE' : 0,
  'BAIDU' : 1,
  'FOURSQUARE' : 2
};
ttypes.te = {
  'FORWARD' : 0,
  'AUTO_REPLY' : 1,
  'SUBORDINATE' : 2,
  'REPLY' : 3
};
ttypes.mh = {
  'UNKNOWN' : 0,
  'TALK' : 1,
  'SQUARE' : 2
};
ttypes.v = {
  'SIRI' : 1,
  'GOOGLE_ASSISTANT' : 2
};
ttypes.IdentityProvider = {
  'UNKNOWN' : 0,
  'LINE' : 1,
  'NAVER_KR' : 2,
  'LINE_PHONE' : 3
};
ttypes.be = {
  'STANDARD' : 1,
  'CONSTELLA' : 2
};
ttypes.mg = {
  'ALL' : 511,
  'EMAIL' : 1,
  'DISPLAY_NAME' : 2,
  'PHONETIC_NAME' : 4,
  'PICTURE' : 8,
  'STATUS_MESSAGE' : 16,
  'ALLOW_SEARCH_BY_USERID' : 32,
  'ALLOW_SEARCH_BY_EMAIL' : 64,
  'BUDDY_STATUS' : 128,
  'MUSIC_PROFILE' : 256,
  'AVATAR_PROFILE' : 512
};
ttypes.nc = {
  'OBS_VIDEO' : 1,
  'OBS_GENERAL' : 2,
  'OBS_RINGBACK_TONE' : 3
};
ttypes.af = {
  'END_OF_OPERATION' : 0,
  'UPDATE_PROFILE' : 1,
  'UPDATE_SETTINGS' : 36,
  'NOTIFIED_UPDATE_PROFILE' : 2,
  'REGISTER_USERID' : 3,
  'ADD_CONTACT' : 4,
  'NOTIFIED_ADD_CONTACT' : 5,
  'BLOCK_CONTACT' : 6,
  'UNBLOCK_CONTACT' : 7,
  'NOTIFIED_RECOMMEND_CONTACT' : 8,
  'CREATE_GROUP' : 9,
  'UPDATE_GROUP' : 10,
  'NOTIFIED_UPDATE_GROUP' : 11,
  'INVITE_INTO_GROUP' : 12,
  'NOTIFIED_INVITE_INTO_GROUP' : 13,
  'CANCEL_INVITATION_GROUP' : 31,
  'NOTIFIED_CANCEL_INVITATION_GROUP' : 32,
  'LEAVE_GROUP' : 14,
  'NOTIFIED_LEAVE_GROUP' : 15,
  'ACCEPT_GROUP_INVITATION' : 16,
  'NOTIFIED_ACCEPT_GROUP_INVITATION' : 17,
  'REJECT_GROUP_INVITATION' : 34,
  'NOTIFIED_REJECT_GROUP_INVITATION' : 35,
  'KICKOUT_FROM_GROUP' : 18,
  'NOTIFIED_KICKOUT_FROM_GROUP' : 19,
  'CREATE_ROOM' : 20,
  'INVITE_INTO_ROOM' : 21,
  'NOTIFIED_INVITE_INTO_ROOM' : 22,
  'LEAVE_ROOM' : 23,
  'NOTIFIED_LEAVE_ROOM' : 24,
  'SEND_MESSAGE' : 25,
  'RECEIVE_MESSAGE' : 26,
  'SEND_MESSAGE_RECEIPT' : 27,
  'RECEIVE_MESSAGE_RECEIPT' : 28,
  'SEND_CONTENT_RECEIPT' : 29,
  'SEND_CHAT_CHECKED' : 40,
  'SEND_CHAT_REMOVED' : 41,
  'RECEIVE_ANNOUNCEMENT' : 30,
  'INVITE_VIA_EMAIL' : 38,
  'NOTIFIED_REGISTER_USER' : 37,
  'NOTIFIED_UNREGISTER_USER' : 33,
  'NOTIFIED_REQUEST_RECOVERY' : 39,
  'NOTIFIED_FORCE_SYNC' : 42,
  'SEND_CONTENT' : 43,
  'SEND_MESSAGE_MYHOME' : 44,
  'NOTIFIED_UPDATE_CONTENT_PREVIEW' : 45,
  'REMOVE_ALL_MESSAGES' : 46,
  'NOTIFIED_UPDATE_PURCHASES' : 47,
  'DUMMY' : 48,
  'UPDATE_CONTACT' : 49,
  'NOTIFIED_RECEIVED_CALL' : 50,
  'CANCEL_CALL' : 51,
  'NOTIFIED_REDIRECT' : 52,
  'NOTIFIED_CHANNEL_SYNC' : 53,
  'FAILED_SEND_MESSAGE' : 54,
  'NOTIFIED_READ_MESSAGE' : 55,
  'FAILED_EMAIL_CONFIRMATION' : 56,
  'NOTIFIED_PUSH_NOTICENTER_ITEM' : 59,
  'NOTIFIED_CHAT_CONTENT' : 58,
  'NOTIFIED_JOIN_CHAT' : 60,
  'NOTIFIED_LEAVE_CHAT' : 61,
  'NOTIFIED_TYPING' : 62,
  'FRIEND_REQUEST_ACCEPTED' : 63,
  'DESTROY_MESSAGE' : 64,
  'NOTIFIED_DESTROY_MESSAGE' : 65,
  'UPDATE_PUBLICKEYCHAIN' : 66,
  'NOTIFIED_UPDATE_PUBLICKEYCHAIN' : 67,
  'NOTIFIED_BLOCK_CONTACT' : 68,
  'NOTIFIED_UNBLOCK_CONTACT' : 69,
  'UPDATE_GROUPPREFERENCE' : 70,
  'NOTIFIED_PAYMENT_EVENT' : 71,
  'REGISTER_E2EE_PUBLICKEY' : 72,
  'NOTIFIED_E2EE_KEY_EXCHANGE_REQ' : 73,
  'NOTIFIED_E2EE_KEY_EXCHANGE_RESP' : 74,
  'NOTIFIED_E2EE_MESSAGE_RESEND_REQ' : 75,
  'NOTIFIED_E2EE_MESSAGE_RESEND_RESP' : 76,
  'NOTIFIED_E2EE_KEY_UPDATE' : 77,
  'NOTIFIED_BUDDY_UPDATE_PROFILE' : 78,
  'NOTIFIED_UPDATE_LINEAT_TABS' : 79,
  'UPDATE_ROOM' : 80,
  'NOTIFIED_BEACON_DETECTED' : 81,
  'UPDATE_EXTENDED_PROFILE' : 82,
  'ADD_FOLLOW' : 83,
  'NOTIFIED_ADD_FOLLOW' : 84,
  'DELETE_FOLLOW' : 85,
  'NOTIFIED_DELETE_FOLLOW' : 86,
  'UPDATE_TIMELINE_SETTINGS' : 87,
  'NOTIFIED_FRIEND_REQUEST' : 88,
  'UPDATE_RINGBACK_TONE' : 89,
  'NOTIFIED_POSTBACK' : 90,
  'RECEIVE_READ_WATERMARK' : 91,
  'NOTIFIED_MESSAGE_DELIVERED' : 92,
  'NOTIFIED_UPDATE_CHAT_BAR' : 93,
  'NOTIFIED_CHATAPP_INSTALLED' : 94,
  'NOTIFIED_CHATAPP_UPDATED' : 95,
  'NOTIFIED_CHATAPP_NEW_MARK' : 96,
  'NOTIFIED_CHATAPP_DELETED' : 97,
  'NOTIFIED_CHATAPP_SYNC' : 98,
  'NOTIFIED_UPDATE_MESSAGE' : 99,
  'UPDATE_CHATROOMBGM' : 100,
  'NOTIFIED_UPDATE_CHATROOMBGM' : 101,
  'UPDATE_RINGTONE' : 102,
  'UPDATE_USER_SETTINGS' : 118,
  'NOTIFIED_UPDATE_STATUS_BAR' : 119,
  'CREATE_CHAT' : 120,
  'UPDATE_CHAT' : 121,
  'NOTIFIED_UPDATE_CHAT' : 122,
  'INVITE_INTO_CHAT' : 123,
  'NOTIFIED_INVITE_INTO_CHAT' : 124,
  'CANCEL_CHAT_INVITATION' : 125,
  'NOTIFIED_CANCEL_CHAT_INVITATION' : 126,
  'DELETE_SELF_FROM_CHAT' : 127,
  'NOTIFIED_DELETE_SELF_FROM_CHAT' : 128,
  'ACCEPT_CHAT_INVITATION' : 129,
  'NOTIFIED_ACCEPT_CHAT_INVITATION' : 130,
  'REJECT_CHAT_INVITATION' : 131,
  'DELETE_OTHER_FROM_CHAT' : 132,
  'NOTIFIED_DELETE_OTHER_FROM_CHAT' : 133
};
ttypes.ze = {
  'NORMAL' : 0,
  'ALERT_DISABLED' : 1,
  'ALWAYS' : 2
};
ttypes.eb = {
  'CONTACT_SETTING_NOTIFICATION_DISABLE' : 1,
  'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE' : 2,
  'CONTACT_SETTING_CONTACT_HIDE' : 4,
  'CONTACT_SETTING_FAVORITE' : 8,
  'CONTACT_SETTING_DELETE' : 16
};
ttypes.og = {
  'OWNER' : 0,
  'FRIEND' : 1
};
ttypes.bi = {
  'NONE' : 1,
  'ALL' : 2
};
ttypes.kg = {
  'NEVER_SHOW' : 0,
  'ONE_WAY' : 1,
  'MUTUAL' : 2
};
ttypes.www = {
  'OVER' : 1,
  'UNDER' : 2,
  'UNDEFINED' : 3
};
ttypes.ac = {
  'NOT_SPECIFIED' : 0,
  'NOT_YET' : 1,
  'DONE' : 3,
  'NEED_ENFORCED_INPUT' : 4
};
ttypes.h = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.kh = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.lb = {
  'PROMOTION_FRIENDS_INVITE' : 1,
  'CAPABILITY_SERVER_SIDE_SMS' : 2,
  'LINE_CLIENT_ANALYTICS_CONFIGURATION' : 3
};
ttypes.ph = {
  'NOTIFICATION_ENABLE' : 0,
  'NOTIFICATION_MUTE_EXPIRATION' : 1,
  'NOTIFICATION_NEW_MESSAGE' : 2,
  'NOTIFICATION_GROUP_INVITATION' : 3,
  'NOTIFICATION_SHOW_MESSAGE' : 4,
  'NOTIFICATION_INCOMING_CALL' : 5,
  'NOTIFICATION_SOUND_MESSAGE' : 8,
  'NOTIFICATION_SOUND_GROUP' : 9,
  'NOTIFICATION_DISABLED_WITH_SUB' : 16,
  'NOTIFICATION_PAYMENT' : 17,
  'NOTIFICATION_MENTION' : 40,
  'NOTIFICATION_THUMBNAIL' : 45,
  'PRIVACY_SYNC_CONTACTS' : 6,
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 7,
  'PRIVACY_SEARCH_BY_USERID' : 13,
  'PRIVACY_SEARCH_BY_EMAIL' : 14,
  'PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS' : 51,
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 21,
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 23,
  'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME' : 35,
  'PRIVACY_PROFILE_HISTORY' : 57,
  'PRIVACY_STATUS_MESSAGE_HISTORY' : 54,
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 30,
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 25,
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 26,
  'PRIVACY_AGREE_USE_PAIDCALL' : 27,
  'PRIVACY_AGE_RESULT' : 60,
  'PRIVACY_AGE_RESULT_RECEIVED' : 61,
  'PRIVACY_ALLOW_FOLLOW' : 63,
  'PRIVACY_SHOW_FOLLOW_LIST' : 64,
  'CONTACT_MY_TICKET' : 10,
  'IDENTITY_PROVIDER' : 11,
  'IDENTITY_IDENTIFIER' : 12,
  'SNS_ACCOUNT' : 19,
  'PHONE_REGISTRATION' : 20,
  'PREFERENCE_LOCALE' : 15,
  'CUSTOM_MODE' : 22,
  'EMAIL_CONFIRMATION_STATUS' : 24,
  'ACCOUNT_MIGRATION_PINCODE' : 28,
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 29,
  'SECURITY_CENTER_SETTINGS' : 18,
  'E2EE_ENABLE' : 33,
  'HITOKOTO_BACKUP_REQUESTED' : 34,
  'CONTACT_ALLOW_FOLLOWING' : 36,
  'PRIVACY_ALLOW_NEARBY' : 37,
  'AGREEMENT_NEARBY' : 38,
  'AGREEMENT_SQUARE' : 39,
  'ALLOW_UNREGISTRATION_SECONDARY_DEVICE' : 41,
  'AGREEMENT_BOT_USE' : 42,
  'AGREEMENT_SHAKE_FUNCTION' : 43,
  'AGREEMENT_MOBILE_CONTACT_NAME' : 44,
  'AGREEMENT_SOUND_TO_TEXT' : 46,
  'AGREEMENT_PRIVACY_POLICY_VERSION' : 47,
  'AGREEMENT_AD_BY_WEB_ACCESS' : 48,
  'AGREEMENT_PHONE_NUMBER_MATCHING' : 49,
  'AGREEMENT_COMMUNICATION_INFO' : 50,
  'AGREEMENT_THINGS_WIRELESS_COMMUNICATION' : 52,
  'AGREEMENT_GDPR' : 53,
  'AGREEMENT_PROVIDE_LOCATION' : 55,
  'AGREEMENT_BEACON' : 56,
  'AGREEMENT_CONTENTS_SUGGEST' : 58,
  'AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION' : 59,
  'AGREEMENT_OCR_IMAGE_COLLECTION' : 62
};
ttypes.p9 = {
  'NAME' : 1,
  'PICTURE_STATUS' : 2,
  'PREVENTED_JOIN_BY_TICKET' : 4,
  'NOTIFICATION_SETTING' : 8,
  'INVITATION_TICKET' : 16,
  'FAVORITE_TIMESTAMP' : 32,
  'CHAT_TYPE' : 64
};
var TalkException = module.exports.TalkException = function(args) {
  Thrift.TException.call(this, "TalkException");
  this.name = "TalkException";
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
//Thrift.inherits(TalkException, Thrift.TException);
TalkException.prototype.name = 'TalkException';
TalkException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.parameterMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.parameterMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkException.prototype.write = function(output) {
  output.writeStructBegin('TalkException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter8 in this.parameterMap)
    {
      if (this.parameterMap.hasOwnProperty(kiter8))
      {
        var viter9 = this.parameterMap[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExtendedProfileBirthday = module.exports.ExtendedProfileBirthday = function(args) {
  this.year = null;
  this.yearPrivacyLevelType = null;
  this.yearEnabled = null;
  this.day = null;
  this.dayPrivacyLevelType = null;
  this.dayEnabled = null;
  if (args) {
    if (args.year !== undefined && args.year !== null) {
      this.year = args.year;
    }
    if (args.yearPrivacyLevelType !== undefined && args.yearPrivacyLevelType !== null) {
      this.yearPrivacyLevelType = args.yearPrivacyLevelType;
    }
    if (args.yearEnabled !== undefined && args.yearEnabled !== null) {
      this.yearEnabled = args.yearEnabled;
    }
    if (args.day !== undefined && args.day !== null) {
      this.day = args.day;
    }
    if (args.dayPrivacyLevelType !== undefined && args.dayPrivacyLevelType !== null) {
      this.dayPrivacyLevelType = args.dayPrivacyLevelType;
    }
    if (args.dayEnabled !== undefined && args.dayEnabled !== null) {
      this.dayEnabled = args.dayEnabled;
    }
  }
};
ExtendedProfileBirthday.prototype = {};
ExtendedProfileBirthday.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.year = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.yearPrivacyLevelType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.yearEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.day = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dayPrivacyLevelType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.dayEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedProfileBirthday.prototype.write = function(output) {
  output.writeStructBegin('ExtendedProfileBirthday');
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.STRING, 1);
    output.writeString(this.year);
    output.writeFieldEnd();
  }
  if (this.yearPrivacyLevelType !== null && this.yearPrivacyLevelType !== undefined) {
    output.writeFieldBegin('yearPrivacyLevelType', Thrift.Type.I32, 2);
    output.writeI32(this.yearPrivacyLevelType);
    output.writeFieldEnd();
  }
  if (this.yearEnabled !== null && this.yearEnabled !== undefined) {
    output.writeFieldBegin('yearEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.yearEnabled);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.STRING, 5);
    output.writeString(this.day);
    output.writeFieldEnd();
  }
  if (this.dayPrivacyLevelType !== null && this.dayPrivacyLevelType !== undefined) {
    output.writeFieldBegin('dayPrivacyLevelType', Thrift.Type.I32, 6);
    output.writeI32(this.dayPrivacyLevelType);
    output.writeFieldEnd();
  }
  if (this.dayEnabled !== null && this.dayEnabled !== undefined) {
    output.writeFieldBegin('dayEnabled', Thrift.Type.BOOL, 7);
    output.writeBool(this.dayEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExtendedProfile = module.exports.ExtendedProfile = function(args) {
  this.birthday = null;
  if (args) {
    if (args.birthday !== undefined && args.birthday !== null) {
      this.birthday = new ttypes.ExtendedProfileBirthday(args.birthday);
    }
  }
};
ExtendedProfile.prototype = {};
ExtendedProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.birthday = new ttypes.ExtendedProfileBirthday();
        this.birthday.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedProfile.prototype.write = function(output) {
  output.writeStructBegin('ExtendedProfile');
  if (this.birthday !== null && this.birthday !== undefined) {
    output.writeFieldBegin('birthday', Thrift.Type.STRUCT, 1);
    this.birthday.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GeolocationAccurac = module.exports.GeolocationAccurac = function(args) {
  this.radiusMeters = null;
  this.radiusConfidence = null;
  if (args) {
    if (args.radiusMeters !== undefined && args.radiusMeters !== null) {
      this.radiusMeters = args.radiusMeters;
    }
    if (args.radiusConfidence !== undefined && args.radiusConfidence !== null) {
      this.radiusConfidence = args.radiusConfidence;
    }
  }
};
GeolocationAccurac.prototype = {};
GeolocationAccurac.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusMeters = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusConfidence = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationAccurac.prototype.write = function(output) {
  output.writeStructBegin('GeolocationAccurac');
  if (this.radiusMeters !== null && this.radiusMeters !== undefined) {
    output.writeFieldBegin('radiusMeters', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.radiusMeters);
    output.writeFieldEnd();
  }
  if (this.radiusConfidence !== null && this.radiusConfidence !== undefined) {
    output.writeFieldBegin('radiusConfidence', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.radiusConfidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GeolocationAccuracy = module.exports.GeolocationAccuracy = function(args) {
  this.radiusMeters = null;
  this.radiusConfidence = null;
  if (args) {
    if (args.radiusMeters !== undefined && args.radiusMeters !== null) {
      this.radiusMeters = args.radiusMeters;
    }
    if (args.radiusConfidence !== undefined && args.radiusConfidence !== null) {
      this.radiusConfidence = args.radiusConfidence;
    }
  }
};
GeolocationAccuracy.prototype = {};
GeolocationAccuracy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusMeters = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radiusConfidence = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeolocationAccuracy.prototype.write = function(output) {
  output.writeStructBegin('GeolocationAccuracy');
  if (this.radiusMeters !== null && this.radiusMeters !== undefined) {
    output.writeFieldBegin('radiusMeters', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.radiusMeters);
    output.writeFieldEnd();
  }
  if (this.radiusConfidence !== null && this.radiusConfidence !== undefined) {
    output.writeFieldBegin('radiusConfidence', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.radiusConfidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Geolocation = module.exports.Geolocation = function(args) {
  this.longitude = null;
  this.latitude = null;
  this.accuracy = null;
  if (args) {
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.accuracy !== undefined && args.accuracy !== null) {
      this.accuracy = new ttypes.GeolocationAccuracy(args.accuracy);
    }
  }
};
Geolocation.prototype = {};
Geolocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.accuracy = new ttypes.GeolocationAccuracy();
        this.accuracy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation.prototype.write = function(output) {
  output.writeStructBegin('Geolocation');
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.accuracy !== null && this.accuracy !== undefined) {
    output.writeFieldBegin('accuracy', Thrift.Type.STRUCT, 3);
    this.accuracy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientNetworkStatus = module.exports.ClientNetworkStatus = function(args) {
  this.networkType = null;
  if (args) {
    if (args.networkType !== undefined && args.networkType !== null) {
      this.networkType = args.networkType;
    }
  }
};
ClientNetworkStatus.prototype = {};
ClientNetworkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.networkType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientNetworkStatus.prototype.write = function(output) {
  output.writeStructBegin('ClientNetworkStatus');
  if (this.networkType !== null && this.networkType !== undefined) {
    output.writeFieldBegin('networkType', Thrift.Type.I32, 1);
    output.writeI32(this.networkType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallBalance = module.exports.PaidCallBalance = function(args) {
  this.productType = null;
  this.productName = null;
  this.unit = null;
  this.limitedPaidBalance = null;
  this.limitedFreeBalance = null;
  this.unlimitedPaidBalance = null;
  this.unlimitedFreeBalance = null;
  this.startTime = null;
  this.endTime = null;
  this.autopayEnabled = null;
  if (args) {
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.limitedPaidBalance !== undefined && args.limitedPaidBalance !== null) {
      this.limitedPaidBalance = args.limitedPaidBalance;
    }
    if (args.limitedFreeBalance !== undefined && args.limitedFreeBalance !== null) {
      this.limitedFreeBalance = args.limitedFreeBalance;
    }
    if (args.unlimitedPaidBalance !== undefined && args.unlimitedPaidBalance !== null) {
      this.unlimitedPaidBalance = args.unlimitedPaidBalance;
    }
    if (args.unlimitedFreeBalance !== undefined && args.unlimitedFreeBalance !== null) {
      this.unlimitedFreeBalance = args.unlimitedFreeBalance;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.autopayEnabled !== undefined && args.autopayEnabled !== null) {
      this.autopayEnabled = args.autopayEnabled;
    }
  }
};
PaidCallBalance.prototype = {};
PaidCallBalance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limitedPaidBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.limitedFreeBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.unlimitedPaidBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.unlimitedFreeBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.autopayEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallBalance.prototype.write = function(output) {
  output.writeStructBegin('PaidCallBalance');
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 1);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 3);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.limitedPaidBalance !== null && this.limitedPaidBalance !== undefined) {
    output.writeFieldBegin('limitedPaidBalance', Thrift.Type.I32, 4);
    output.writeI32(this.limitedPaidBalance);
    output.writeFieldEnd();
  }
  if (this.limitedFreeBalance !== null && this.limitedFreeBalance !== undefined) {
    output.writeFieldBegin('limitedFreeBalance', Thrift.Type.I32, 5);
    output.writeI32(this.limitedFreeBalance);
    output.writeFieldEnd();
  }
  if (this.unlimitedPaidBalance !== null && this.unlimitedPaidBalance !== undefined) {
    output.writeFieldBegin('unlimitedPaidBalance', Thrift.Type.I32, 6);
    output.writeI32(this.unlimitedPaidBalance);
    output.writeFieldEnd();
  }
  if (this.unlimitedFreeBalance !== null && this.unlimitedFreeBalance !== undefined) {
    output.writeFieldBegin('unlimitedFreeBalance', Thrift.Type.I32, 7);
    output.writeI32(this.unlimitedFreeBalance);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.autopayEnabled !== null && this.autopayEnabled !== undefined) {
    output.writeFieldBegin('autopayEnabled', Thrift.Type.BOOL, 10);
    output.writeBool(this.autopayEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupExtra = module.exports.GroupExtra = function(args) {
  this.creator = null;
  this.preventedJoinByTicket = null;
  this.invitationTicket = null;
  this.memberMids = null;
  this.inviteeMids = null;
  if (args) {
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
      this.preventedJoinByTicket = args.preventedJoinByTicket;
    }
    if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
      this.invitationTicket = args.invitationTicket;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyMap(args.memberMids, [null]);
    }
    if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
      this.inviteeMids = Thrift.copyMap(args.inviteeMids, [null]);
    }
  }
};
GroupExtra.prototype = {};
GroupExtra.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.preventedJoinByTicket = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.invitationTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.memberMids = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readI64();
          this.memberMids[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.inviteeMids = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          val25 = input.readI64();
          this.inviteeMids[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupExtra.prototype.write = function(output) {
  output.writeStructBegin('GroupExtra');
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 1);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.preventedJoinByTicket !== null && this.preventedJoinByTicket !== undefined) {
    output.writeFieldBegin('preventedJoinByTicket', Thrift.Type.BOOL, 2);
    output.writeBool(this.preventedJoinByTicket);
    output.writeFieldEnd();
  }
  if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
    output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 3);
    output.writeString(this.invitationTicket);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.memberMids));
    for (var kiter26 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(kiter26))
      {
        var viter27 = this.memberMids[kiter26];
        output.writeString(kiter26);
        output.writeI64(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
    output.writeFieldBegin('inviteeMids', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.inviteeMids));
    for (var kiter28 in this.inviteeMids)
    {
      if (this.inviteeMids.hasOwnProperty(kiter28))
      {
        var viter29 = this.inviteeMids[kiter28];
        output.writeString(kiter28);
        output.writeI64(viter29);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeerExtra = module.exports.PeerExtra = function(args) {
};
PeerExtra.prototype = {};
PeerExtra.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeerExtra.prototype.write = function(output) {
  output.writeStructBegin('PeerExtra');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Extra = module.exports.Extra = function(args) {
  this.groupExtra = null;
  this.peerExtra = null;
  if (args) {
    if (args.groupExtra !== undefined && args.groupExtra !== null) {
      this.groupExtra = new ttypes.GroupExtra(args.groupExtra);
    }
    if (args.peerExtra !== undefined && args.peerExtra !== null) {
      this.peerExtra = new ttypes.PeerExtra(args.peerExtra);
    }
  }
};
Extra.prototype = {};
Extra.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupExtra = new ttypes.GroupExtra();
        this.groupExtra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.peerExtra = new ttypes.PeerExtra();
        this.peerExtra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Extra.prototype.write = function(output) {
  output.writeStructBegin('Extra');
  if (this.groupExtra !== null && this.groupExtra !== undefined) {
    output.writeFieldBegin('groupExtra', Thrift.Type.STRUCT, 1);
    this.groupExtra.write(output);
    output.writeFieldEnd();
  }
  if (this.peerExtra !== null && this.peerExtra !== undefined) {
    output.writeFieldBegin('peerExtra', Thrift.Type.STRUCT, 2);
    this.peerExtra.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateChatRequest = module.exports.CreateChatRequest = function(args) {
  this.reqSeq = null;
  this.type = null;
  this.name = null;
  this.targetUserMids = null;
  this.picturePath = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
  }
};
CreateChatRequest.prototype = {};
CreateChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size30 = 0;
        var _rtmp334;
        this.targetUserMids = [];
        var _etype33 = 0;
        _rtmp334 = input.readSetBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = input.readString();
          this.targetUserMids.push(elem36);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateChatRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter37 in this.targetUserMids)
    {
      if (this.targetUserMids.hasOwnProperty(iter37))
      {
        iter37 = this.targetUserMids[iter37];
        output.writeString(iter37);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 5);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Chat = module.exports.Chat = function(args) {
  this.type = null;
  this.chatMid = null;
  this.createdTime = null;
  this.notificationDisabled = null;
  this.favoriteTimestamp = null;
  this.chatName = null;
  this.picturePath = null;
  this.extra = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
      this.favoriteTimestamp = args.favoriteTimestamp;
    }
    if (args.chatName !== undefined && args.chatName !== null) {
      this.chatName = args.chatName;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = new ttypes.Extra(args.extra);
    }
  }
};
Chat.prototype = {};
Chat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.chatName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.extra = new ttypes.Extra();
        this.extra.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Chat.prototype.write = function(output) {
  output.writeStructBegin('Chat');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 3);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
    output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 5);
    output.writeI64(this.favoriteTimestamp);
    output.writeFieldEnd();
  }
  if (this.chatName !== null && this.chatName !== undefined) {
    output.writeFieldBegin('chatName', Thrift.Type.STRING, 6);
    output.writeString(this.chatName);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 7);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.STRUCT, 8);
    this.extra.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Group = module.exports.Group = function(args) {
  this.id = null;
  this.createdTime = null;
  this.name = null;
  this.pictureStatus = null;
  this.preventedJoinByTicket = null;
  this.groupPreference = null;
  this.members = null;
  this.creator = null;
  this.invitee = null;
  this.notificationDisabled = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
      this.preventedJoinByTicket = args.preventedJoinByTicket;
    }
    if (args.groupPreference !== undefined && args.groupPreference !== null) {
      this.groupPreference = new ttypes.GroupPreference(args.groupPreference);
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [null]);
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new ttypes.Contact(args.creator);
    }
    if (args.invitee !== undefined && args.invitee !== null) {
      this.invitee = Thrift.copyList(args.invitee, [null]);
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
  }
};
Group.prototype = {};
Group.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.preventedJoinByTicket = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupPreference = new ttypes.GroupPreference();
        this.groupPreference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.members = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new ttypes.Contact();
          elem44.read(input);
          this.members.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new ttypes.Contact();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size45 = 0;
        var _rtmp349;
        this.invitee = [];
        var _etype48 = 0;
        _rtmp349 = input.readListBegin();
        _etype48 = _rtmp349.etype;
        _size45 = _rtmp349.size;
        for (var _i50 = 0; _i50 < _size45; ++_i50)
        {
          var elem51 = null;
          elem51 = new ttypes.Contact();
          elem51.read(input);
          this.invitee.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Group.prototype.write = function(output) {
  output.writeStructBegin('Group');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 11);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.preventedJoinByTicket !== null && this.preventedJoinByTicket !== undefined) {
    output.writeFieldBegin('preventedJoinByTicket', Thrift.Type.BOOL, 12);
    output.writeBool(this.preventedJoinByTicket);
    output.writeFieldEnd();
  }
  if (this.groupPreference !== null && this.groupPreference !== undefined) {
    output.writeFieldBegin('groupPreference', Thrift.Type.STRUCT, 13);
    this.groupPreference.write(output);
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter52 in this.members)
    {
      if (this.members.hasOwnProperty(iter52))
      {
        iter52 = this.members[iter52];
        iter52.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 21);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.invitee !== null && this.invitee !== undefined) {
    output.writeFieldBegin('invitee', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitee.length);
    for (var iter53 in this.invitee)
    {
      if (this.invitee.hasOwnProperty(iter53))
      {
        iter53 = this.invitee[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateChatResponse = module.exports.CreateChatResponse = function(args) {
  this.chat = null;
  if (args) {
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new ttypes.Chat(args.chat);
    }
  }
};
CreateChatResponse.prototype = {};
CreateChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new ttypes.Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateChatResponse.prototype.write = function(output) {
  output.writeStructBegin('CreateChatResponse');
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 1);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AvatarProfile = module.exports.AvatarProfile = function(args) {
  this.version = null;
  this.updatedMillis = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.updatedMillis !== undefined && args.updatedMillis !== null) {
      this.updatedMillis = args.updatedMillis;
    }
  }
};
AvatarProfile.prototype = {};
AvatarProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updatedMillis = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AvatarProfile.prototype.write = function(output) {
  output.writeStructBegin('AvatarProfile');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.updatedMillis !== null && this.updatedMillis !== undefined) {
    output.writeFieldBegin('updatedMillis', Thrift.Type.I64, 2);
    output.writeI64(this.updatedMillis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Contact = module.exports.Contact = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.type = null;
  this.status = null;
  this.relation = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.displayNameOverridden = null;
  this.favoriteTime = null;
  this.capableVoiceCall = null;
  this.capableVideoCall = null;
  this.capableMyhome = null;
  this.capableBuddy = null;
  this.attributes = null;
  this.settings = null;
  this.picturePath = null;
  this.recommendParams = null;
  this.friendRequestStatus = null;
  this.musicProfile = null;
  this.videoProfile = null;
  this.statusMessageContentMetadata = null;
  this.avatarProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = args.relation;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
      this.displayNameOverridden = args.displayNameOverridden;
    }
    if (args.favoriteTime !== undefined && args.favoriteTime !== null) {
      this.favoriteTime = args.favoriteTime;
    }
    if (args.capableVoiceCall !== undefined && args.capableVoiceCall !== null) {
      this.capableVoiceCall = args.capableVoiceCall;
    }
    if (args.capableVideoCall !== undefined && args.capableVideoCall !== null) {
      this.capableVideoCall = args.capableVideoCall;
    }
    if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
      this.capableMyhome = args.capableMyhome;
    }
    if (args.capableBuddy !== undefined && args.capableBuddy !== null) {
      this.capableBuddy = args.capableBuddy;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = args.attributes;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.recommendParams !== undefined && args.recommendParams !== null) {
      this.recommendParams = args.recommendParams;
    }
    if (args.friendRequestStatus !== undefined && args.friendRequestStatus !== null) {
      this.friendRequestStatus = args.friendRequestStatus;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
    if (args.statusMessageContentMetadata !== undefined && args.statusMessageContentMetadata !== null) {
      this.statusMessageContentMetadata = Thrift.copyMap(args.statusMessageContentMetadata, [null]);
    }
    if (args.avatarProfile !== undefined && args.avatarProfile !== null) {
      this.avatarProfile = new ttypes.AvatarProfile(args.avatarProfile);
    }
  }
};
Contact.prototype = {};
Contact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.relation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.displayNameOverridden = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVoiceCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVideoCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.capableMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.BOOL) {
        this.capableBuddy = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.attributes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I64) {
        this.settings = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRING) {
        this.recommendParams = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.friendRequestStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.statusMessageContentMetadata = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var key60 = null;
          var val61 = null;
          key60 = input.readString();
          val61 = input.readString();
          this.statusMessageContentMetadata[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarProfile = new ttypes.AvatarProfile();
        this.avatarProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contact.prototype.write = function(output) {
  output.writeStructBegin('Contact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 11);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRING, 21);
    output.writeString(this.relation);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 22);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 23);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 24);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 25);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 26);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
    output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 27);
    output.writeString(this.displayNameOverridden);
    output.writeFieldEnd();
  }
  if (this.favoriteTime !== null && this.favoriteTime !== undefined) {
    output.writeFieldBegin('favoriteTime', Thrift.Type.I64, 28);
    output.writeI64(this.favoriteTime);
    output.writeFieldEnd();
  }
  if (this.capableVoiceCall !== null && this.capableVoiceCall !== undefined) {
    output.writeFieldBegin('capableVoiceCall', Thrift.Type.BOOL, 31);
    output.writeBool(this.capableVoiceCall);
    output.writeFieldEnd();
  }
  if (this.capableVideoCall !== null && this.capableVideoCall !== undefined) {
    output.writeFieldBegin('capableVideoCall', Thrift.Type.BOOL, 32);
    output.writeBool(this.capableVideoCall);
    output.writeFieldEnd();
  }
  if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
    output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 33);
    output.writeBool(this.capableMyhome);
    output.writeFieldEnd();
  }
  if (this.capableBuddy !== null && this.capableBuddy !== undefined) {
    output.writeFieldBegin('capableBuddy', Thrift.Type.BOOL, 34);
    output.writeBool(this.capableBuddy);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.I32, 35);
    output.writeI32(this.attributes);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.I64, 36);
    output.writeI64(this.settings);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 37);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.recommendParams !== null && this.recommendParams !== undefined) {
    output.writeFieldBegin('recommendParams', Thrift.Type.STRING, 38);
    output.writeString(this.recommendParams);
    output.writeFieldEnd();
  }
  if (this.friendRequestStatus !== null && this.friendRequestStatus !== undefined) {
    output.writeFieldBegin('friendRequestStatus', Thrift.Type.I32, 39);
    output.writeI32(this.friendRequestStatus);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 40);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 42);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  if (this.statusMessageContentMetadata !== null && this.statusMessageContentMetadata !== undefined) {
    output.writeFieldBegin('statusMessageContentMetadata', Thrift.Type.MAP, 43);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.statusMessageContentMetadata));
    for (var kiter62 in this.statusMessageContentMetadata)
    {
      if (this.statusMessageContentMetadata.hasOwnProperty(kiter62))
      {
        var viter63 = this.statusMessageContentMetadata[kiter62];
        output.writeString(kiter62);
        output.writeString(viter63);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.avatarProfile !== null && this.avatarProfile !== undefined) {
    output.writeFieldBegin('avatarProfile', Thrift.Type.STRUCT, 44);
    this.avatarProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Ticket = module.exports.Ticket = function(args) {
  this.id = null;
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
Ticket.prototype = {};
Ticket.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ticket.prototype.write = function(output) {
  output.writeStructBegin('Ticket');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 2);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 3);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FollowMid = module.exports.FollowMid = function(args) {
  this.mid = null;
  this.eMid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.eMid !== undefined && args.eMid !== null) {
      this.eMid = args.eMid;
    }
  }
};
FollowMid.prototype = {};
FollowMid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FollowMid.prototype.write = function(output) {
  output.writeStructBegin('FollowMid');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.eMid !== null && this.eMid !== undefined) {
    output.writeFieldBegin('eMid', Thrift.Type.STRING, 2);
    output.writeString(this.eMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFollowersRequest = module.exports.GetFollowersRequest = function(args) {
  this.followMid = null;
  this.cursor = null;
  if (args) {
    if (args.followMid !== undefined && args.followMid !== null) {
      this.followMid = new ttypes.FollowMid(args.followMid);
    }
    if (args.cursor !== undefined && args.cursor !== null) {
      this.cursor = args.cursor;
    }
  }
};
GetFollowersRequest.prototype = {};
GetFollowersRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.followMid = new ttypes.FollowMid();
        this.followMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cursor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFollowersRequest.prototype.write = function(output) {
  output.writeStructBegin('GetFollowersRequest');
  if (this.followMid !== null && this.followMid !== undefined) {
    output.writeFieldBegin('followMid', Thrift.Type.STRUCT, 1);
    this.followMid.write(output);
    output.writeFieldEnd();
  }
  if (this.cursor !== null && this.cursor !== undefined) {
    output.writeFieldBegin('cursor', Thrift.Type.STRING, 2);
    output.writeString(this.cursor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FollowBuddyDetail = module.exports.FollowBuddyDetail = function(args) {
  this.iconType = null;
  if (args) {
    if (args.iconType !== undefined && args.iconType !== null) {
      this.iconType = args.iconType;
    }
  }
};
FollowBuddyDetail.prototype = {};
FollowBuddyDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.iconType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FollowBuddyDetail.prototype.write = function(output) {
  output.writeStructBegin('FollowBuddyDetail');
  if (this.iconType !== null && this.iconType !== undefined) {
    output.writeFieldBegin('iconType', Thrift.Type.I32, 1);
    output.writeI32(this.iconType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FollowProfile = module.exports.FollowProfile = function(args) {
  this.followMid = null;
  this.displayName = null;
  this.picturePath = null;
  this.following = null;
  this.allowFollow = null;
  this.followBuddyDetail = null;
  if (args) {
    if (args.followMid !== undefined && args.followMid !== null) {
      this.followMid = new ttypes.FollowMid(args.followMid);
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.following !== undefined && args.following !== null) {
      this.following = args.following;
    }
    if (args.allowFollow !== undefined && args.allowFollow !== null) {
      this.allowFollow = args.allowFollow;
    }
    if (args.followBuddyDetail !== undefined && args.followBuddyDetail !== null) {
      this.followBuddyDetail = new ttypes.FollowBuddyDetail(args.followBuddyDetail);
    }
  }
};
FollowProfile.prototype = {};
FollowProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.followMid = new ttypes.FollowMid();
        this.followMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.following = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.allowFollow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.followBuddyDetail = new ttypes.FollowBuddyDetail();
        this.followBuddyDetail.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FollowProfile.prototype.write = function(output) {
  output.writeStructBegin('FollowProfile');
  if (this.followMid !== null && this.followMid !== undefined) {
    output.writeFieldBegin('followMid', Thrift.Type.STRUCT, 1);
    this.followMid.write(output);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 3);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.following !== null && this.following !== undefined) {
    output.writeFieldBegin('following', Thrift.Type.BOOL, 4);
    output.writeBool(this.following);
    output.writeFieldEnd();
  }
  if (this.allowFollow !== null && this.allowFollow !== undefined) {
    output.writeFieldBegin('allowFollow', Thrift.Type.BOOL, 5);
    output.writeBool(this.allowFollow);
    output.writeFieldEnd();
  }
  if (this.followBuddyDetail !== null && this.followBuddyDetail !== undefined) {
    output.writeFieldBegin('followBuddyDetail', Thrift.Type.STRUCT, 6);
    this.followBuddyDetail.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFollowersResponse = module.exports.GetFollowersResponse = function(args) {
  this.profiles = null;
  this.cursor = null;
  this.followingCount = null;
  this.followerCount = null;
  if (args) {
    if (args.profiles !== undefined && args.profiles !== null) {
      this.profiles = Thrift.copyList(args.profiles, [ttypes.FollowProfile]);
    }
    if (args.cursor !== undefined && args.cursor !== null) {
      this.cursor = args.cursor;
    }
    if (args.followingCount !== undefined && args.followingCount !== null) {
      this.followingCount = args.followingCount;
    }
    if (args.followerCount !== undefined && args.followerCount !== null) {
      this.followerCount = args.followerCount;
    }
  }
};
GetFollowersResponse.prototype = {};
GetFollowersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.profiles = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.FollowProfile();
          elem70.read(input);
          this.profiles.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cursor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.followingCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.followerCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFollowersResponse.prototype.write = function(output) {
  output.writeStructBegin('GetFollowersResponse');
  if (this.profiles !== null && this.profiles !== undefined) {
    output.writeFieldBegin('profiles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.profiles.length);
    for (var iter71 in this.profiles)
    {
      if (this.profiles.hasOwnProperty(iter71))
      {
        iter71 = this.profiles[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cursor !== null && this.cursor !== undefined) {
    output.writeFieldBegin('cursor', Thrift.Type.STRING, 2);
    output.writeString(this.cursor);
    output.writeFieldEnd();
  }
  if (this.followingCount !== null && this.followingCount !== undefined) {
    output.writeFieldBegin('followingCount', Thrift.Type.I64, 3);
    output.writeI64(this.followingCount);
    output.writeFieldEnd();
  }
  if (this.followerCount !== null && this.followerCount !== undefined) {
    output.writeFieldBegin('followerCount', Thrift.Type.I64, 4);
    output.writeI64(this.followerCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEPublicKey = module.exports.E2EEPublicKey = function(args) {
  this.version = null;
  this.keyId = null;
  this.keyData = null;
  this.createdTime = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
    if (args.keyData !== undefined && args.keyData !== null) {
      this.keyData = args.keyData;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
  }
};
E2EEPublicKey.prototype = {};
E2EEPublicKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEPublicKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEPublicKey');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I32, 2);
    output.writeI32(this.keyId);
    output.writeFieldEnd();
  }
  if (this.keyData !== null && this.keyData !== undefined) {
    output.writeFieldBegin('keyData', Thrift.Type.STRING, 4);
    output.writeBinary(this.keyData);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentifierConfirmationRequest = module.exports.IdentifierConfirmationRequest = function(args) {
  this.metaData = null;
  this.forceRegistration = null;
  this.verificationCode = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
    if (args.forceRegistration !== undefined && args.forceRegistration !== null) {
      this.forceRegistration = args.forceRegistration;
    }
    if (args.verificationCode !== undefined && args.verificationCode !== null) {
      this.verificationCode = args.verificationCode;
    }
  }
};
IdentifierConfirmationRequest.prototype = {};
IdentifierConfirmationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size72 = 0;
        var _rtmp376;
        this.metaData = {};
        var _ktype73 = 0;
        var _vtype74 = 0;
        _rtmp376 = input.readMapBegin();
        _ktype73 = _rtmp376.ktype;
        _vtype74 = _rtmp376.vtype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var key78 = null;
          var val79 = null;
          key78 = input.readString();
          val79 = input.readString();
          this.metaData[key78] = val79;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.forceRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verificationCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentifierConfirmationRequest.prototype.write = function(output) {
  output.writeStructBegin('IdentifierConfirmationRequest');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter80 in this.metaData)
    {
      if (this.metaData.hasOwnProperty(kiter80))
      {
        var viter81 = this.metaData[kiter80];
        output.writeString(kiter80);
        output.writeString(viter81);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.forceRegistration !== null && this.forceRegistration !== undefined) {
    output.writeFieldBegin('forceRegistration', Thrift.Type.BOOL, 2);
    output.writeBool(this.forceRegistration);
    output.writeFieldEnd();
  }
  if (this.verificationCode !== null && this.verificationCode !== undefined) {
    output.writeFieldBegin('verificationCode', Thrift.Type.STRING, 3);
    output.writeString(this.verificationCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentityCredentialRequest = module.exports.IdentityCredentialRequest = function(args) {
  this.metaData = null;
  this.identityProvider = null;
  this.cipherKeyId = null;
  this.cipherText = null;
  this.confirmationRequest = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.cipherKeyId !== undefined && args.cipherKeyId !== null) {
      this.cipherKeyId = args.cipherKeyId;
    }
    if (args.cipherText !== undefined && args.cipherText !== null) {
      this.cipherText = args.cipherText;
    }
    if (args.confirmationRequest !== undefined && args.confirmationRequest !== null) {
      this.confirmationRequest = new ttypes.IdentifierConfirmationRequest(args.confirmationRequest);
    }
  }
};
IdentityCredentialRequest.prototype = {};
IdentityCredentialRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size82 = 0;
        var _rtmp386;
        this.metaData = {};
        var _ktype83 = 0;
        var _vtype84 = 0;
        _rtmp386 = input.readMapBegin();
        _ktype83 = _rtmp386.ktype;
        _vtype84 = _rtmp386.vtype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var key88 = null;
          var val89 = null;
          key88 = input.readString();
          val89 = input.readString();
          this.metaData[key88] = val89;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cipherKeyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cipherText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.confirmationRequest = new ttypes.IdentifierConfirmationRequest();
        this.confirmationRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentityCredentialRequest.prototype.write = function(output) {
  output.writeStructBegin('IdentityCredentialRequest');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter90 in this.metaData)
    {
      if (this.metaData.hasOwnProperty(kiter90))
      {
        var viter91 = this.metaData[kiter90];
        output.writeString(kiter90);
        output.writeString(viter91);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 2);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.cipherKeyId !== null && this.cipherKeyId !== undefined) {
    output.writeFieldBegin('cipherKeyId', Thrift.Type.STRING, 3);
    output.writeString(this.cipherKeyId);
    output.writeFieldEnd();
  }
  if (this.cipherText !== null && this.cipherText !== undefined) {
    output.writeFieldBegin('cipherText', Thrift.Type.STRING, 4);
    output.writeString(this.cipherText);
    output.writeFieldEnd();
  }
  if (this.confirmationRequest !== null && this.confirmationRequest !== undefined) {
    output.writeFieldBegin('confirmationRequest', Thrift.Type.STRUCT, 5);
    this.confirmationRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentityCredentialResponse = module.exports.IdentityCredentialResponse = function(args) {
  this.metaData = null;
  this.responseType = null;
  this.confirmationVerifier = null;
  this.timeoutInSeconds = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
    if (args.responseType !== undefined && args.responseType !== null) {
      this.responseType = args.responseType;
    }
    if (args.confirmationVerifier !== undefined && args.confirmationVerifier !== null) {
      this.confirmationVerifier = args.confirmationVerifier;
    }
    if (args.timeoutInSeconds !== undefined && args.timeoutInSeconds !== null) {
      this.timeoutInSeconds = args.timeoutInSeconds;
    }
  }
};
IdentityCredentialResponse.prototype = {};
IdentityCredentialResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size92 = 0;
        var _rtmp396;
        this.metaData = {};
        var _ktype93 = 0;
        var _vtype94 = 0;
        _rtmp396 = input.readMapBegin();
        _ktype93 = _rtmp396.ktype;
        _vtype94 = _rtmp396.vtype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var key98 = null;
          var val99 = null;
          key98 = input.readString();
          val99 = input.readString();
          this.metaData[key98] = val99;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.responseType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.confirmationVerifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timeoutInSeconds = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentityCredentialResponse.prototype.write = function(output) {
  output.writeStructBegin('IdentityCredentialResponse');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter100 in this.metaData)
    {
      if (this.metaData.hasOwnProperty(kiter100))
      {
        var viter101 = this.metaData[kiter100];
        output.writeString(kiter100);
        output.writeString(viter101);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.responseType !== null && this.responseType !== undefined) {
    output.writeFieldBegin('responseType', Thrift.Type.I32, 2);
    output.writeI32(this.responseType);
    output.writeFieldEnd();
  }
  if (this.confirmationVerifier !== null && this.confirmationVerifier !== undefined) {
    output.writeFieldBegin('confirmationVerifier', Thrift.Type.STRING, 3);
    output.writeString(this.confirmationVerifier);
    output.writeFieldEnd();
  }
  if (this.timeoutInSeconds !== null && this.timeoutInSeconds !== undefined) {
    output.writeFieldBegin('timeoutInSeconds', Thrift.Type.I64, 4);
    output.writeI64(this.timeoutInSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentityCredential = module.exports.IdentityCredential = function(args) {
  this.provider = null;
  this.identifier = null;
  this.password = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
IdentityCredential.prototype = {};
IdentityCredential.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentityCredential.prototype.write = function(output) {
  output.writeStructBegin('IdentityCredential');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 1);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAuthStatus = module.exports.UserAuthStatus = function(args) {
  this.phoneNumberRegistered = null;
  this.registeredSnsIdTypes = null;
  this.accountMigrationCheckType = null;
  if (args) {
    if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
      this.phoneNumberRegistered = args.phoneNumberRegistered;
    }
    if (args.registeredSnsIdTypes !== undefined && args.registeredSnsIdTypes !== null) {
      this.registeredSnsIdTypes = Thrift.copyList(args.registeredSnsIdTypes, [null]);
    }
    if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
      this.accountMigrationCheckType = args.accountMigrationCheckType;
    }
  }
};
UserAuthStatus.prototype = {};
UserAuthStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneNumberRegistered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.registeredSnsIdTypes = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = input.readI32();
          this.registeredSnsIdTypes.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationCheckType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAuthStatus.prototype.write = function(output) {
  output.writeStructBegin('UserAuthStatus');
  if (this.phoneNumberRegistered !== null && this.phoneNumberRegistered !== undefined) {
    output.writeFieldBegin('phoneNumberRegistered', Thrift.Type.BOOL, 1);
    output.writeBool(this.phoneNumberRegistered);
    output.writeFieldEnd();
  }
  if (this.registeredSnsIdTypes !== null && this.registeredSnsIdTypes !== undefined) {
    output.writeFieldBegin('registeredSnsIdTypes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.registeredSnsIdTypes.length);
    for (var iter109 in this.registeredSnsIdTypes)
    {
      if (this.registeredSnsIdTypes.hasOwnProperty(iter109))
      {
        iter109 = this.registeredSnsIdTypes[iter109];
        output.writeI32(iter109);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
    output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 3);
    output.writeI32(this.accountMigrationCheckType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBuddyStatusBarV2Request = module.exports.GetBuddyStatusBarV2Request = function(args) {
  this.botMid = null;
  this.revision = null;
  if (args) {
    if (args.botMid !== undefined && args.botMid !== null) {
      this.botMid = args.botMid;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
GetBuddyStatusBarV2Request.prototype = {};
GetBuddyStatusBarV2Request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.botMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBuddyStatusBarV2Request.prototype.write = function(output) {
  output.writeStructBegin('GetBuddyStatusBarV2Request');
  if (this.botMid !== null && this.botMid !== undefined) {
    output.writeFieldBegin('botMid', Thrift.Type.STRING, 1);
    output.writeString(this.botMid);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyStatusBar = module.exports.BuddyStatusBar = function(args) {
  this.label = null;
  this.displayType = null;
  this.title = null;
  this.iconUrl = null;
  this.linkUrl = null;
  if (args) {
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.displayType !== undefined && args.displayType !== null) {
      this.displayType = args.displayType;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.iconUrl !== undefined && args.iconUrl !== null) {
      this.iconUrl = args.iconUrl;
    }
    if (args.linkUrl !== undefined && args.linkUrl !== null) {
      this.linkUrl = args.linkUrl;
    }
  }
};
BuddyStatusBar.prototype = {};
BuddyStatusBar.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.displayType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.iconUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.linkUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyStatusBar.prototype.write = function(output) {
  output.writeStructBegin('BuddyStatusBar');
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 1);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.displayType !== null && this.displayType !== undefined) {
    output.writeFieldBegin('displayType', Thrift.Type.I32, 2);
    output.writeI32(this.displayType);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.iconUrl !== null && this.iconUrl !== undefined) {
    output.writeFieldBegin('iconUrl', Thrift.Type.STRING, 4);
    output.writeString(this.iconUrl);
    output.writeFieldEnd();
  }
  if (this.linkUrl !== null && this.linkUrl !== undefined) {
    output.writeFieldBegin('linkUrl', Thrift.Type.STRING, 5);
    output.writeString(this.linkUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var hf = module.exports.hf = function(args) {
  this.seq = null;
  this.type = null;
  this.dialedNumber = null;
  this.calledNumber = null;
  this.toMid = null;
  this.toName = null;
  this.setupTime = null;
  this.startTime = null;
  this.endTime = null;
  this.duration = null;
  this.terminate = null;
  this.productType = null;
  this.charge = null;
  this.unit = null;
  this.result = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.calledNumber !== undefined && args.calledNumber !== null) {
      this.calledNumber = args.calledNumber;
    }
    if (args.toMid !== undefined && args.toMid !== null) {
      this.toMid = args.toMid;
    }
    if (args.toName !== undefined && args.toName !== null) {
      this.toName = args.toName;
    }
    if (args.setupTime !== undefined && args.setupTime !== null) {
      this.setupTime = args.setupTime;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.terminate !== undefined && args.terminate !== null) {
      this.terminate = args.terminate;
    }
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.charge !== undefined && args.charge !== null) {
      this.charge = args.charge;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
  }
};
hf.prototype = {};
hf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.calledNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.toMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.toName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.setupTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.terminate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.charge = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

hf.prototype.write = function(output) {
  output.writeStructBegin('hf');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 1);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 3);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.calledNumber !== null && this.calledNumber !== undefined) {
    output.writeFieldBegin('calledNumber', Thrift.Type.STRING, 4);
    output.writeString(this.calledNumber);
    output.writeFieldEnd();
  }
  if (this.toMid !== null && this.toMid !== undefined) {
    output.writeFieldBegin('toMid', Thrift.Type.STRING, 5);
    output.writeString(this.toMid);
    output.writeFieldEnd();
  }
  if (this.toName !== null && this.toName !== undefined) {
    output.writeFieldBegin('toName', Thrift.Type.STRING, 6);
    output.writeString(this.toName);
    output.writeFieldEnd();
  }
  if (this.setupTime !== null && this.setupTime !== undefined) {
    output.writeFieldBegin('setupTime', Thrift.Type.I64, 7);
    output.writeI64(this.setupTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 10);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  if (this.terminate !== null && this.terminate !== undefined) {
    output.writeFieldBegin('terminate', Thrift.Type.I32, 11);
    output.writeI32(this.terminate);
    output.writeFieldEnd();
  }
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 12);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.charge !== null && this.charge !== undefined) {
    output.writeFieldBegin('charge', Thrift.Type.I32, 13);
    output.writeI32(this.charge);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 14);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 15);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallHistoryResult = module.exports.PaidCallHistoryResult = function(args) {
  this.historys = null;
  this.hasNext = null;
  if (args) {
    if (args.historys !== undefined && args.historys !== null) {
      this.historys = Thrift.copyList(args.historys, [ttypes.hf]);
    }
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
  }
};
PaidCallHistoryResult.prototype = {};
PaidCallHistoryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.historys = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = new ttypes.hf();
          elem116.read(input);
          this.historys.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallHistoryResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallHistoryResult');
  if (this.historys !== null && this.historys !== undefined) {
    output.writeFieldBegin('historys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.historys.length);
    for (var iter117 in this.historys)
    {
      if (this.historys.hasOwnProperty(iter117))
      {
        iter117 = this.historys[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPreference = module.exports.GroupPreference = function(args) {
  this.invitationTicket = null;
  this.favoriteTimestamp = null;
  if (args) {
    if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
      this.invitationTicket = args.invitationTicket;
    }
    if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
      this.favoriteTimestamp = args.favoriteTimestamp;
    }
  }
};
GroupPreference.prototype = {};
GroupPreference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.invitationTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPreference.prototype.write = function(output) {
  output.writeStructBegin('GroupPreference');
  if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
    output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 11);
    output.writeString(this.invitationTicket);
    output.writeFieldEnd();
  }
  if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
    output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 12);
    output.writeI64(this.favoriteTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatRoomAnnouncementContentMetadata = module.exports.ChatRoomAnnouncementContentMetadata = function(args) {
  this.replace = null;
  this.sticonOwnership = null;
  if (args) {
    if (args.replace !== undefined && args.replace !== null) {
      this.replace = args.replace;
    }
    if (args.sticonOwnership !== undefined && args.sticonOwnership !== null) {
      this.sticonOwnership = args.sticonOwnership;
    }
  }
};
ChatRoomAnnouncementContentMetadata.prototype = {};
ChatRoomAnnouncementContentMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.replace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sticonOwnership = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatRoomAnnouncementContentMetadata.prototype.write = function(output) {
  output.writeStructBegin('ChatRoomAnnouncementContentMetadata');
  if (this.replace !== null && this.replace !== undefined) {
    output.writeFieldBegin('replace', Thrift.Type.STRING, 1);
    output.writeString(this.replace);
    output.writeFieldEnd();
  }
  if (this.sticonOwnership !== null && this.sticonOwnership !== undefined) {
    output.writeFieldBegin('sticonOwnership', Thrift.Type.STRING, 2);
    output.writeString(this.sticonOwnership);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatRoomAnnouncementContents = module.exports.ChatRoomAnnouncementContents = function(args) {
  this.displayFields = null;
  this.text = null;
  this.link = null;
  this.thumbnail = null;
  this.contentMetadata = null;
  if (args) {
    if (args.displayFields !== undefined && args.displayFields !== null) {
      this.displayFields = args.displayFields;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = args.link;
    }
    if (args.thumbnail !== undefined && args.thumbnail !== null) {
      this.thumbnail = args.thumbnail;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = new ttypes.ChatRoomAnnouncementContentMetadata(args.contentMetadata);
    }
  }
};
ChatRoomAnnouncementContents.prototype = {};
ChatRoomAnnouncementContents.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.displayFields = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.link = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.contentMetadata = new ttypes.ChatRoomAnnouncementContentMetadata();
        this.contentMetadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatRoomAnnouncementContents.prototype.write = function(output) {
  output.writeStructBegin('ChatRoomAnnouncementContents');
  if (this.displayFields !== null && this.displayFields !== undefined) {
    output.writeFieldBegin('displayFields', Thrift.Type.I32, 1);
    output.writeI32(this.displayFields);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRING, 3);
    output.writeString(this.link);
    output.writeFieldEnd();
  }
  if (this.thumbnail !== null && this.thumbnail !== undefined) {
    output.writeFieldBegin('thumbnail', Thrift.Type.STRING, 4);
    output.writeString(this.thumbnail);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.STRUCT, 5);
    this.contentMetadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatRoomAnnouncement = module.exports.ChatRoomAnnouncement = function(args) {
  this.announcementSeq = null;
  this.type = null;
  this.contents = null;
  this.creatorMid = null;
  this.createdTime = null;
  this.deletePermission = null;
  if (args) {
    if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
      this.announcementSeq = args.announcementSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.contents !== undefined && args.contents !== null) {
      this.contents = new ttypes.ChatRoomAnnouncementContents(args.contents);
    }
    if (args.creatorMid !== undefined && args.creatorMid !== null) {
      this.creatorMid = args.creatorMid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.deletePermission !== undefined && args.deletePermission !== null) {
      this.deletePermission = args.deletePermission;
    }
  }
};
ChatRoomAnnouncement.prototype = {};
ChatRoomAnnouncement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.announcementSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contents = new ttypes.ChatRoomAnnouncementContents();
        this.contents.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.creatorMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.deletePermission = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatRoomAnnouncement.prototype.write = function(output) {
  output.writeStructBegin('ChatRoomAnnouncement');
  if (this.announcementSeq !== null && this.announcementSeq !== undefined) {
    output.writeFieldBegin('announcementSeq', Thrift.Type.I64, 1);
    output.writeI64(this.announcementSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.STRUCT, 3);
    this.contents.write(output);
    output.writeFieldEnd();
  }
  if (this.creatorMid !== null && this.creatorMid !== undefined) {
    output.writeFieldBegin('creatorMid', Thrift.Type.STRING, 4);
    output.writeString(this.creatorMid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.deletePermission !== null && this.deletePermission !== undefined) {
    output.writeFieldBegin('deletePermission', Thrift.Type.I32, 6);
    output.writeI32(this.deletePermission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFollowingsRequest = module.exports.GetFollowingsRequest = function(args) {
  this.followMid = null;
  this.cursor = null;
  if (args) {
    if (args.followMid !== undefined && args.followMid !== null) {
      this.followMid = new ttypes.FollowMid(args.followMid);
    }
    if (args.cursor !== undefined && args.cursor !== null) {
      this.cursor = args.cursor;
    }
  }
};
GetFollowingsRequest.prototype = {};
GetFollowingsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.followMid = new ttypes.FollowMid();
        this.followMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cursor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFollowingsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetFollowingsRequest');
  if (this.followMid !== null && this.followMid !== undefined) {
    output.writeFieldBegin('followMid', Thrift.Type.STRUCT, 1);
    this.followMid.write(output);
    output.writeFieldEnd();
  }
  if (this.cursor !== null && this.cursor !== undefined) {
    output.writeFieldBegin('cursor', Thrift.Type.STRING, 2);
    output.writeString(this.cursor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFollowingsResponse = module.exports.GetFollowingsResponse = function(args) {
  this.profiles = null;
  this.cursor = null;
  this.followingCount = null;
  this.followerCount = null;
  if (args) {
    if (args.profiles !== undefined && args.profiles !== null) {
      this.profiles = Thrift.copyList(args.profiles, [ttypes.FollowProfile]);
    }
    if (args.cursor !== undefined && args.cursor !== null) {
      this.cursor = args.cursor;
    }
    if (args.followingCount !== undefined && args.followingCount !== null) {
      this.followingCount = args.followingCount;
    }
    if (args.followerCount !== undefined && args.followerCount !== null) {
      this.followerCount = args.followerCount;
    }
  }
};
GetFollowingsResponse.prototype = {};
GetFollowingsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.profiles = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = new ttypes.FollowProfile();
          elem124.read(input);
          this.profiles.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cursor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.followingCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.followerCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFollowingsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetFollowingsResponse');
  if (this.profiles !== null && this.profiles !== undefined) {
    output.writeFieldBegin('profiles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.profiles.length);
    for (var iter125 in this.profiles)
    {
      if (this.profiles.hasOwnProperty(iter125))
      {
        iter125 = this.profiles[iter125];
        iter125.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cursor !== null && this.cursor !== undefined) {
    output.writeFieldBegin('cursor', Thrift.Type.STRING, 2);
    output.writeString(this.cursor);
    output.writeFieldEnd();
  }
  if (this.followingCount !== null && this.followingCount !== undefined) {
    output.writeFieldBegin('followingCount', Thrift.Type.I64, 3);
    output.writeI64(this.followingCount);
    output.writeFieldEnd();
  }
  if (this.followerCount !== null && this.followerCount !== undefined) {
    output.writeFieldBegin('followerCount', Thrift.Type.I64, 4);
    output.writeI64(this.followerCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisterWithPhoneNumberResult = module.exports.RegisterWithPhoneNumberResult = function(args) {
  this.authToken = null;
  this.recommendEmailRegistration = null;
  this.certificate = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
      this.recommendEmailRegistration = args.recommendEmailRegistration;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
RegisterWithPhoneNumberResult.prototype = {};
RegisterWithPhoneNumberResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendEmailRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterWithPhoneNumberResult.prototype.write = function(output) {
  output.writeStructBegin('RegisterWithPhoneNumberResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.recommendEmailRegistration !== null && this.recommendEmailRegistration !== undefined) {
    output.writeFieldBegin('recommendEmailRegistration', Thrift.Type.BOOL, 2);
    output.writeBool(this.recommendEmailRegistration);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 3);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddySearchResult = module.exports.BuddySearchResult = function(args) {
  this.mid = null;
  this.displayName = null;
  this.pictureStatus = null;
  this.picturePath = null;
  this.statusMessage = null;
  this.businessAccount = null;
  this.iconType = null;
  this.botType = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.businessAccount !== undefined && args.businessAccount !== null) {
      this.businessAccount = args.businessAccount;
    }
    if (args.iconType !== undefined && args.iconType !== null) {
      this.iconType = args.iconType;
    }
    if (args.botType !== undefined && args.botType !== null) {
      this.botType = args.botType;
    }
  }
};
BuddySearchResult.prototype = {};
BuddySearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.businessAccount = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.iconType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.botType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddySearchResult.prototype.write = function(output) {
  output.writeStructBegin('BuddySearchResult');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 3);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 4);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.businessAccount !== null && this.businessAccount !== undefined) {
    output.writeFieldBegin('businessAccount', Thrift.Type.BOOL, 6);
    output.writeBool(this.businessAccount);
    output.writeFieldEnd();
  }
  if (this.iconType !== null && this.iconType !== undefined) {
    output.writeFieldBegin('iconType', Thrift.Type.I32, 7);
    output.writeI32(this.iconType);
    output.writeFieldEnd();
  }
  if (this.botType !== null && this.botType !== undefined) {
    output.writeFieldBegin('botType', Thrift.Type.I32, 8);
    output.writeI32(this.botType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallCurrencyExchangeRate = module.exports.PaidCallCurrencyExchangeRate = function(args) {
  this.currencyCode = null;
  this.currencyName = null;
  this.currencySign = null;
  this.preferred = null;
  this.coinRate = null;
  this.creditRate = null;
  if (args) {
    if (args.currencyCode !== undefined && args.currencyCode !== null) {
      this.currencyCode = args.currencyCode;
    }
    if (args.currencyName !== undefined && args.currencyName !== null) {
      this.currencyName = args.currencyName;
    }
    if (args.currencySign !== undefined && args.currencySign !== null) {
      this.currencySign = args.currencySign;
    }
    if (args.preferred !== undefined && args.preferred !== null) {
      this.preferred = args.preferred;
    }
    if (args.coinRate !== undefined && args.coinRate !== null) {
      this.coinRate = args.coinRate;
    }
    if (args.creditRate !== undefined && args.creditRate !== null) {
      this.creditRate = args.creditRate;
    }
  }
};
PaidCallCurrencyExchangeRate.prototype = {};
PaidCallCurrencyExchangeRate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currencyCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.currencyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.currencySign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.preferred = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.coinRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.creditRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallCurrencyExchangeRate.prototype.write = function(output) {
  output.writeStructBegin('PaidCallCurrencyExchangeRate');
  if (this.currencyCode !== null && this.currencyCode !== undefined) {
    output.writeFieldBegin('currencyCode', Thrift.Type.STRING, 1);
    output.writeString(this.currencyCode);
    output.writeFieldEnd();
  }
  if (this.currencyName !== null && this.currencyName !== undefined) {
    output.writeFieldBegin('currencyName', Thrift.Type.STRING, 2);
    output.writeString(this.currencyName);
    output.writeFieldEnd();
  }
  if (this.currencySign !== null && this.currencySign !== undefined) {
    output.writeFieldBegin('currencySign', Thrift.Type.STRING, 3);
    output.writeString(this.currencySign);
    output.writeFieldEnd();
  }
  if (this.preferred !== null && this.preferred !== undefined) {
    output.writeFieldBegin('preferred', Thrift.Type.BOOL, 4);
    output.writeBool(this.preferred);
    output.writeFieldEnd();
  }
  if (this.coinRate !== null && this.coinRate !== undefined) {
    output.writeFieldBegin('coinRate', Thrift.Type.STRING, 5);
    output.writeString(this.coinRate);
    output.writeFieldEnd();
  }
  if (this.creditRate !== null && this.creditRate !== undefined) {
    output.writeFieldBegin('creditRate', Thrift.Type.STRING, 6);
    output.writeString(this.creditRate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallAdCountry = module.exports.PaidCallAdCountry = function(args) {
  this.countryCode = null;
  this.rateDivision = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.rateDivision !== undefined && args.rateDivision !== null) {
      this.rateDivision = args.rateDivision;
    }
  }
};
PaidCallAdCountry.prototype = {};
PaidCallAdCountry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rateDivision = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallAdCountry.prototype.write = function(output) {
  output.writeStructBegin('PaidCallAdCountry');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.rateDivision !== null && this.rateDivision !== undefined) {
    output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 2);
    output.writeString(this.rateDivision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallMetadataResult = module.exports.PaidCallMetadataResult = function(args) {
  this.currencyExchangeRates = null;
  this.recommendedCountryCodes = null;
  this.adCountries = null;
  this.supportedCalledCountryCodes = null;
  if (args) {
    if (args.currencyExchangeRates !== undefined && args.currencyExchangeRates !== null) {
      this.currencyExchangeRates = Thrift.copyList(args.currencyExchangeRates, [ttypes.PaidCallCurrencyExchangeRate]);
    }
    if (args.recommendedCountryCodes !== undefined && args.recommendedCountryCodes !== null) {
      this.recommendedCountryCodes = Thrift.copyList(args.recommendedCountryCodes, [null]);
    }
    if (args.adCountries !== undefined && args.adCountries !== null) {
      this.adCountries = Thrift.copyList(args.adCountries, [ttypes.PaidCallAdCountry]);
    }
    if (args.supportedCalledCountryCodes !== undefined && args.supportedCalledCountryCodes !== null) {
      this.supportedCalledCountryCodes = Thrift.copyList(args.supportedCalledCountryCodes, [null]);
    }
  }
};
PaidCallMetadataResult.prototype = {};
PaidCallMetadataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size126 = 0;
        var _rtmp3130;
        this.currencyExchangeRates = [];
        var _etype129 = 0;
        _rtmp3130 = input.readListBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = new ttypes.PaidCallCurrencyExchangeRate();
          elem132.read(input);
          this.currencyExchangeRates.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size133 = 0;
        var _rtmp3137;
        this.recommendedCountryCodes = [];
        var _etype136 = 0;
        _rtmp3137 = input.readListBegin();
        _etype136 = _rtmp3137.etype;
        _size133 = _rtmp3137.size;
        for (var _i138 = 0; _i138 < _size133; ++_i138)
        {
          var elem139 = null;
          elem139 = input.readString();
          this.recommendedCountryCodes.push(elem139);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.adCountries = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.PaidCallAdCountry();
          elem146.read(input);
          this.adCountries.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size147 = 0;
        var _rtmp3151;
        this.supportedCalledCountryCodes = [];
        var _etype150 = 0;
        _rtmp3151 = input.readListBegin();
        _etype150 = _rtmp3151.etype;
        _size147 = _rtmp3151.size;
        for (var _i152 = 0; _i152 < _size147; ++_i152)
        {
          var elem153 = null;
          elem153 = input.readString();
          this.supportedCalledCountryCodes.push(elem153);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallMetadataResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallMetadataResult');
  if (this.currencyExchangeRates !== null && this.currencyExchangeRates !== undefined) {
    output.writeFieldBegin('currencyExchangeRates', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.currencyExchangeRates.length);
    for (var iter154 in this.currencyExchangeRates)
    {
      if (this.currencyExchangeRates.hasOwnProperty(iter154))
      {
        iter154 = this.currencyExchangeRates[iter154];
        iter154.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recommendedCountryCodes !== null && this.recommendedCountryCodes !== undefined) {
    output.writeFieldBegin('recommendedCountryCodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.recommendedCountryCodes.length);
    for (var iter155 in this.recommendedCountryCodes)
    {
      if (this.recommendedCountryCodes.hasOwnProperty(iter155))
      {
        iter155 = this.recommendedCountryCodes[iter155];
        output.writeString(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.adCountries !== null && this.adCountries !== undefined) {
    output.writeFieldBegin('adCountries', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.adCountries.length);
    for (var iter156 in this.adCountries)
    {
      if (this.adCountries.hasOwnProperty(iter156))
      {
        iter156 = this.adCountries[iter156];
        iter156.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.supportedCalledCountryCodes !== null && this.supportedCalledCountryCodes !== undefined) {
    output.writeFieldBegin('supportedCalledCountryCodes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.supportedCalledCountryCodes.length);
    for (var iter157 in this.supportedCalledCountryCodes)
    {
      if (this.supportedCalledCountryCodes.hasOwnProperty(iter157))
      {
        iter157 = this.supportedCalledCountryCodes[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAllChatMidsRequest = module.exports.GetAllChatMidsRequest = function(args) {
  this.withMemberChats = null;
  this.withInvitedChats = null;
  if (args) {
    if (args.withMemberChats !== undefined && args.withMemberChats !== null) {
      this.withMemberChats = args.withMemberChats;
    }
    if (args.withInvitedChats !== undefined && args.withInvitedChats !== null) {
      this.withInvitedChats = args.withInvitedChats;
    }
  }
};
GetAllChatMidsRequest.prototype = {};
GetAllChatMidsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.withMemberChats = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withInvitedChats = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllChatMidsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetAllChatMidsRequest');
  if (this.withMemberChats !== null && this.withMemberChats !== undefined) {
    output.writeFieldBegin('withMemberChats', Thrift.Type.BOOL, 1);
    output.writeBool(this.withMemberChats);
    output.writeFieldEnd();
  }
  if (this.withInvitedChats !== null && this.withInvitedChats !== undefined) {
    output.writeFieldBegin('withInvitedChats', Thrift.Type.BOOL, 2);
    output.writeBool(this.withInvitedChats);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAllChatMidsResponse = module.exports.GetAllChatMidsResponse = function(args) {
  this.memberMids = null;
  this.inviteeMids = null;
  if (args) {
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
      this.inviteeMids = Thrift.copyList(args.inviteeMids, [null]);
    }
  }
};
GetAllChatMidsResponse.prototype = {};
GetAllChatMidsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size158 = 0;
        var _rtmp3162;
        this.memberMids = [];
        var _etype161 = 0;
        _rtmp3162 = input.readSetBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = input.readString();
          this.memberMids.push(elem164);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size165 = 0;
        var _rtmp3169;
        this.inviteeMids = [];
        var _etype168 = 0;
        _rtmp3169 = input.readSetBegin();
        _etype168 = _rtmp3169.etype;
        _size165 = _rtmp3169.size;
        for (var _i170 = 0; _i170 < _size165; ++_i170)
        {
          var elem171 = null;
          elem171 = input.readString();
          this.inviteeMids.push(elem171);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllChatMidsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetAllChatMidsResponse');
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter172 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter172))
      {
        iter172 = this.memberMids[iter172];
        output.writeString(iter172);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
    output.writeFieldBegin('inviteeMids', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.inviteeMids.length);
    for (var iter173 in this.inviteeMids)
    {
      if (this.inviteeMids.hasOwnProperty(iter173))
      {
        iter173 = this.inviteeMids[iter173];
        output.writeString(iter173);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendRequest = module.exports.FriendRequest = function(args) {
  this.eMid = null;
  this.mid = null;
  this.direction = null;
  this.method = null;
  this.param = null;
  this.createdTime = null;
  this.seqId = null;
  this.displayName = null;
  this.picturePath = null;
  this.pictureStatus = null;
  if (args) {
    if (args.eMid !== undefined && args.eMid !== null) {
      this.eMid = args.eMid;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.param !== undefined && args.param !== null) {
      this.param = args.param;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.seqId !== undefined && args.seqId !== null) {
      this.seqId = args.seqId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
  }
};
FriendRequest.prototype = {};
FriendRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.eMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.param = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.seqId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendRequest.prototype.write = function(output) {
  output.writeStructBegin('FriendRequest');
  if (this.eMid !== null && this.eMid !== undefined) {
    output.writeFieldBegin('eMid', Thrift.Type.STRING, 1);
    output.writeString(this.eMid);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 3);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 4);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRING, 5);
    output.writeString(this.param);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 6);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.seqId !== null && this.seqId !== undefined) {
    output.writeFieldBegin('seqId', Thrift.Type.I64, 7);
    output.writeI64(this.seqId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 10);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 11);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 12);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Ringtone = module.exports.Ringtone = function(args) {
  this.title = null;
  this.artist = null;
  this.oid = null;
  this.channelId = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.artist !== undefined && args.artist !== null) {
      this.artist = args.artist;
    }
    if (args.oid !== undefined && args.oid !== null) {
      this.oid = args.oid;
    }
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
Ringtone.prototype = {};
Ringtone.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.artist = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.oid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ringtone.prototype.write = function(output) {
  output.writeStructBegin('Ringtone');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.artist !== null && this.artist !== undefined) {
    output.writeFieldBegin('artist', Thrift.Type.STRING, 2);
    output.writeString(this.artist);
    output.writeFieldEnd();
  }
  if (this.oid !== null && this.oid !== undefined) {
    output.writeFieldBegin('oid', Thrift.Type.STRING, 3);
    output.writeString(this.oid);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 4);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceInfo = module.exports.DeviceInfo = function(args) {
  this.applicationType = null;
  this.deviceName = null;
  this.systemName = null;
  this.systemVersion = null;
  this.model = null;
  this.carrierCode = null;
  this.carrierName = null;
  this.webViewVersion = null;
  if (args) {
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.systemVersion !== undefined && args.systemVersion !== null) {
      this.systemVersion = args.systemVersion;
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = args.model;
    }
    if (args.carrierCode !== undefined && args.carrierCode !== null) {
      this.carrierCode = args.carrierCode;
    }
    if (args.carrierName !== undefined && args.carrierName !== null) {
      this.carrierName = args.carrierName;
    }
    if (args.webViewVersion !== undefined && args.webViewVersion !== null) {
      this.webViewVersion = args.webViewVersion;
    }
  }
};
DeviceInfo.prototype = {};
DeviceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.systemVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.model = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.carrierCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.carrierName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.webViewVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceInfo.prototype.write = function(output) {
  output.writeStructBegin('DeviceInfo');
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 20);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 1);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 2);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.systemVersion !== null && this.systemVersion !== undefined) {
    output.writeFieldBegin('systemVersion', Thrift.Type.STRING, 3);
    output.writeString(this.systemVersion);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRING, 4);
    output.writeString(this.model);
    output.writeFieldEnd();
  }
  if (this.carrierCode !== null && this.carrierCode !== undefined) {
    output.writeFieldBegin('carrierCode', Thrift.Type.I32, 10);
    output.writeI32(this.carrierCode);
    output.writeFieldEnd();
  }
  if (this.carrierName !== null && this.carrierName !== undefined) {
    output.writeFieldBegin('carrierName', Thrift.Type.STRING, 11);
    output.writeString(this.carrierName);
    output.writeFieldEnd();
  }
  if (this.webViewVersion !== null && this.webViewVersion !== undefined) {
    output.writeFieldBegin('webViewVersion', Thrift.Type.STRING, 5);
    output.writeString(this.webViewVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RemoveFollowerRequest = module.exports.RemoveFollowerRequest = function(args) {
  this.followMid = null;
  if (args) {
    if (args.followMid !== undefined && args.followMid !== null) {
      this.followMid = new ttypes.FollowMid(args.followMid);
    }
  }
};
RemoveFollowerRequest.prototype = {};
RemoveFollowerRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.followMid = new ttypes.FollowMid();
        this.followMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoveFollowerRequest.prototype.write = function(output) {
  output.writeStructBegin('RemoveFollowerRequest');
  if (this.followMid !== null && this.followMid !== undefined) {
    output.writeFieldBegin('followMid', Thrift.Type.STRUCT, 1);
    this.followMid.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnfollowRequest = module.exports.UnfollowRequest = function(args) {
  this.followMid = null;
  if (args) {
    if (args.followMid !== undefined && args.followMid !== null) {
      this.followMid = new ttypes.FollowMid(args.followMid);
    }
  }
};
UnfollowRequest.prototype = {};
UnfollowRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.followMid = new ttypes.FollowMid();
        this.followMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnfollowRequest.prototype.write = function(output) {
  output.writeStructBegin('UnfollowRequest');
  if (this.followMid !== null && this.followMid !== undefined) {
    output.writeFieldBegin('followMid', Thrift.Type.STRUCT, 1);
    this.followMid.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CancelChatInvitationResponse = module.exports.CancelChatInvitationResponse = function(args) {
};
CancelChatInvitationResponse.prototype = {};
CancelChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CancelChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('CancelChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FindChatByTicketRequest = module.exports.FindChatByTicketRequest = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
FindChatByTicketRequest.prototype = {};
FindChatByTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindChatByTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('FindChatByTicketRequest');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FindChatByTicketResponse = module.exports.FindChatByTicketResponse = function(args) {
  this.chat = null;
  if (args) {
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new ttypes.Chat(args.chat);
    }
  }
};
FindChatByTicketResponse.prototype = {};
FindChatByTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new ttypes.Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindChatByTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('FindChatByTicketResponse');
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 1);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatRoomBGM = module.exports.ChatRoomBGM = function(args) {
  this.creatorMid = null;
  this.createdTime = null;
  this.chatRoomBGMInfo = null;
  if (args) {
    if (args.creatorMid !== undefined && args.creatorMid !== null) {
      this.creatorMid = args.creatorMid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.chatRoomBGMInfo !== undefined && args.chatRoomBGMInfo !== null) {
      this.chatRoomBGMInfo = args.chatRoomBGMInfo;
    }
  }
};
ChatRoomBGM.prototype = {};
ChatRoomBGM.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.creatorMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomBGMInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatRoomBGM.prototype.write = function(output) {
  output.writeStructBegin('ChatRoomBGM');
  if (this.creatorMid !== null && this.creatorMid !== undefined) {
    output.writeFieldBegin('creatorMid', Thrift.Type.STRING, 1);
    output.writeString(this.creatorMid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.chatRoomBGMInfo !== null && this.chatRoomBGMInfo !== undefined) {
    output.writeFieldBegin('chatRoomBGMInfo', Thrift.Type.STRING, 3);
    output.writeString(this.chatRoomBGMInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEGroupSharedKey = module.exports.E2EEGroupSharedKey = function(args) {
  this.keyVersion = null;
  this.groupKeyId = null;
  this.creator = null;
  this.creatorKeyId = null;
  this.receiver = null;
  this.receiverKeyId = null;
  this.encryptedSharedKey = null;
  this.allowedTypes = null;
  this.specVersion = null;
  if (args) {
    if (args.keyVersion !== undefined && args.keyVersion !== null) {
      this.keyVersion = args.keyVersion;
    }
    if (args.groupKeyId !== undefined && args.groupKeyId !== null) {
      this.groupKeyId = args.groupKeyId;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.creatorKeyId !== undefined && args.creatorKeyId !== null) {
      this.creatorKeyId = args.creatorKeyId;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.receiverKeyId !== undefined && args.receiverKeyId !== null) {
      this.receiverKeyId = args.receiverKeyId;
    }
    if (args.encryptedSharedKey !== undefined && args.encryptedSharedKey !== null) {
      this.encryptedSharedKey = args.encryptedSharedKey;
    }
    if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
      this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
    }
    if (args.specVersion !== undefined && args.specVersion !== null) {
      this.specVersion = args.specVersion;
    }
  }
};
E2EEGroupSharedKey.prototype = {};
E2EEGroupSharedKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.keyVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.groupKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.creatorKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.receiver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.receiverKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedSharedKey = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size174 = 0;
        var _rtmp3178;
        this.allowedTypes = [];
        var _etype177 = 0;
        _rtmp3178 = input.readSetBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = input.readI32();
          this.allowedTypes.push(elem180);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.specVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEGroupSharedKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEGroupSharedKey');
  if (this.keyVersion !== null && this.keyVersion !== undefined) {
    output.writeFieldBegin('keyVersion', Thrift.Type.I32, 1);
    output.writeI32(this.keyVersion);
    output.writeFieldEnd();
  }
  if (this.groupKeyId !== null && this.groupKeyId !== undefined) {
    output.writeFieldBegin('groupKeyId', Thrift.Type.I32, 2);
    output.writeI32(this.groupKeyId);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 3);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.creatorKeyId !== null && this.creatorKeyId !== undefined) {
    output.writeFieldBegin('creatorKeyId', Thrift.Type.I32, 4);
    output.writeI32(this.creatorKeyId);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.STRING, 5);
    output.writeString(this.receiver);
    output.writeFieldEnd();
  }
  if (this.receiverKeyId !== null && this.receiverKeyId !== undefined) {
    output.writeFieldBegin('receiverKeyId', Thrift.Type.I32, 6);
    output.writeI32(this.receiverKeyId);
    output.writeFieldEnd();
  }
  if (this.encryptedSharedKey !== null && this.encryptedSharedKey !== undefined) {
    output.writeFieldBegin('encryptedSharedKey', Thrift.Type.STRING, 7);
    output.writeBinary(this.encryptedSharedKey);
    output.writeFieldEnd();
  }
  if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
    output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
    for (var iter181 in this.allowedTypes)
    {
      if (this.allowedTypes.hasOwnProperty(iter181))
      {
        iter181 = this.allowedTypes[iter181];
        output.writeI32(iter181);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.specVersion !== null && this.specVersion !== undefined) {
    output.writeFieldBegin('specVersion', Thrift.Type.I32, 9);
    output.writeI32(this.specVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Profile = module.exports.Profile = function(args) {
  this.mid = null;
  this.userid = null;
  this.phone = null;
  this.email = null;
  this.regionCode = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.allowSearchByUserid = null;
  this.allowSearchByEmail = null;
  this.picturePath = null;
  this.musicProfile = null;
  this.videoProfile = null;
  this.statusMessageContentMetadata = null;
  this.avatarProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.allowSearchByUserid !== undefined && args.allowSearchByUserid !== null) {
      this.allowSearchByUserid = args.allowSearchByUserid;
    }
    if (args.allowSearchByEmail !== undefined && args.allowSearchByEmail !== null) {
      this.allowSearchByEmail = args.allowSearchByEmail;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
    if (args.statusMessageContentMetadata !== undefined && args.statusMessageContentMetadata !== null) {
      this.statusMessageContentMetadata = Thrift.copyMap(args.statusMessageContentMetadata, [null]);
    }
    if (args.avatarProfile !== undefined && args.avatarProfile !== null) {
      this.avatarProfile = new ttypes.AvatarProfile(args.avatarProfile);
    }
  }
};
Profile.prototype = {};
Profile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByUserid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByEmail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.MAP) {
        var _size182 = 0;
        var _rtmp3186;
        this.statusMessageContentMetadata = {};
        var _ktype183 = 0;
        var _vtype184 = 0;
        _rtmp3186 = input.readMapBegin();
        _ktype183 = _rtmp3186.ktype;
        _vtype184 = _rtmp3186.vtype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var key188 = null;
          var val189 = null;
          key188 = input.readString();
          val189 = input.readString();
          this.statusMessageContentMetadata[key188] = val189;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarProfile = new ttypes.AvatarProfile();
        this.avatarProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Profile.prototype.write = function(output) {
  output.writeStructBegin('Profile');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 12);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 20);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 21);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 22);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 23);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 24);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.allowSearchByUserid !== null && this.allowSearchByUserid !== undefined) {
    output.writeFieldBegin('allowSearchByUserid', Thrift.Type.BOOL, 31);
    output.writeBool(this.allowSearchByUserid);
    output.writeFieldEnd();
  }
  if (this.allowSearchByEmail !== null && this.allowSearchByEmail !== undefined) {
    output.writeFieldBegin('allowSearchByEmail', Thrift.Type.BOOL, 32);
    output.writeBool(this.allowSearchByEmail);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 33);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 34);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 35);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  if (this.statusMessageContentMetadata !== null && this.statusMessageContentMetadata !== undefined) {
    output.writeFieldBegin('statusMessageContentMetadata', Thrift.Type.MAP, 36);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.statusMessageContentMetadata));
    for (var kiter190 in this.statusMessageContentMetadata)
    {
      if (this.statusMessageContentMetadata.hasOwnProperty(kiter190))
      {
        var viter191 = this.statusMessageContentMetadata[kiter190];
        output.writeString(kiter190);
        output.writeString(viter191);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.avatarProfile !== null && this.avatarProfile !== undefined) {
    output.writeFieldBegin('avatarProfile', Thrift.Type.STRUCT, 37);
    this.avatarProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisterWithSnsIdResult = module.exports.RegisterWithSnsIdResult = function(args) {
  this.authToken = null;
  this.userCreated = null;
  this.recommendEmailRegistration = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.userCreated !== undefined && args.userCreated !== null) {
      this.userCreated = args.userCreated;
    }
    if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
      this.recommendEmailRegistration = args.recommendEmailRegistration;
    }
  }
};
RegisterWithSnsIdResult.prototype = {};
RegisterWithSnsIdResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.userCreated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendEmailRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterWithSnsIdResult.prototype.write = function(output) {
  output.writeStructBegin('RegisterWithSnsIdResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.userCreated !== null && this.userCreated !== undefined) {
    output.writeFieldBegin('userCreated', Thrift.Type.BOOL, 2);
    output.writeBool(this.userCreated);
    output.writeFieldEnd();
  }
  if (this.recommendEmailRegistration !== null && this.recommendEmailRegistration !== undefined) {
    output.writeFieldBegin('recommendEmailRegistration', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommendEmailRegistration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthSessionRequest = module.exports.AuthSessionRequest = function(args) {
  this.metaData = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = Thrift.copyMap(args.metaData, [null]);
    }
  }
};
AuthSessionRequest.prototype = {};
AuthSessionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size192 = 0;
        var _rtmp3196;
        this.metaData = {};
        var _ktype193 = 0;
        var _vtype194 = 0;
        _rtmp3196 = input.readMapBegin();
        _ktype193 = _rtmp3196.ktype;
        _vtype194 = _rtmp3196.vtype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var key198 = null;
          var val199 = null;
          key198 = input.readString();
          val199 = input.readString();
          this.metaData[key198] = val199;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthSessionRequest.prototype.write = function(output) {
  output.writeStructBegin('AuthSessionRequest');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metaData));
    for (var kiter200 in this.metaData)
    {
      if (this.metaData.hasOwnProperty(kiter200))
      {
        var viter201 = this.metaData[kiter200];
        output.writeString(kiter200);
        output.writeString(viter201);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Balance = module.exports.Balance = function(args) {
  this.currentPointsFixedPointDecimal = null;
  if (args) {
    if (args.currentPointsFixedPointDecimal !== undefined && args.currentPointsFixedPointDecimal !== null) {
      this.currentPointsFixedPointDecimal = args.currentPointsFixedPointDecimal;
    }
  }
};
Balance.prototype = {};
Balance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currentPointsFixedPointDecimal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Balance.prototype.write = function(output) {
  output.writeStructBegin('Balance');
  if (this.currentPointsFixedPointDecimal !== null && this.currentPointsFixedPointDecimal !== undefined) {
    output.writeFieldBegin('currentPointsFixedPointDecimal', Thrift.Type.STRING, 1);
    output.writeString(this.currentPointsFixedPointDecimal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBalanceResponse = module.exports.GetBalanceResponse = function(args) {
  this.balance = null;
  if (args) {
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new ttypes.Balance(args.balance);
    }
  }
};
GetBalanceResponse.prototype = {};
GetBalanceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new ttypes.Balance();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBalanceResponse.prototype.write = function(output) {
  output.writeStructBegin('GetBalanceResponse');
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 1);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBalanceRequest = module.exports.GetBalanceRequest = function(args) {
};
GetBalanceRequest.prototype = {};
GetBalanceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBalanceRequest.prototype.write = function(output) {
  output.writeStructBegin('GetBalanceRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PhoneVerificationResult = module.exports.PhoneVerificationResult = function(args) {
  this.verificationResult = null;
  this.accountMigrationCheckType = null;
  this.recommendAddFriends = null;
  if (args) {
    if (args.verificationResult !== undefined && args.verificationResult !== null) {
      this.verificationResult = args.verificationResult;
    }
    if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
      this.accountMigrationCheckType = args.accountMigrationCheckType;
    }
    if (args.recommendAddFriends !== undefined && args.recommendAddFriends !== null) {
      this.recommendAddFriends = args.recommendAddFriends;
    }
  }
};
PhoneVerificationResult.prototype = {};
PhoneVerificationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.verificationResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationCheckType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendAddFriends = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhoneVerificationResult.prototype.write = function(output) {
  output.writeStructBegin('PhoneVerificationResult');
  if (this.verificationResult !== null && this.verificationResult !== undefined) {
    output.writeFieldBegin('verificationResult', Thrift.Type.I32, 1);
    output.writeI32(this.verificationResult);
    output.writeFieldEnd();
  }
  if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
    output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 2);
    output.writeI32(this.accountMigrationCheckType);
    output.writeFieldEnd();
  }
  if (this.recommendAddFriends !== null && this.recommendAddFriends !== undefined) {
    output.writeFieldBegin('recommendAddFriends', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommendAddFriends);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Room = module.exports.Room = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.contents = null;
  this.notificationDisabled = null;
  this.memberMids = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.contents !== undefined && args.contents !== null) {
      this.contents = Thrift.copyList(args.contents, [ttypes.Contact]);
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
  }
};
Room.prototype = {};
Room.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.contents = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = new ttypes.Contact();
          elem208.read(input);
          this.contents.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.LIST) {
        var _size209 = 0;
        var _rtmp3213;
        this.memberMids = [];
        var _etype212 = 0;
        _rtmp3213 = input.readListBegin();
        _etype212 = _rtmp3213.etype;
        _size209 = _rtmp3213.size;
        for (var _i214 = 0; _i214 < _size209; ++_i214)
        {
          var elem215 = null;
          elem215 = input.readString();
          this.memberMids.push(elem215);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Room.prototype.write = function(output) {
  output.writeStructBegin('Room');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.contents.length);
    for (var iter216 in this.contents)
    {
      if (this.contents.hasOwnProperty(iter216))
      {
        iter216 = this.contents[iter216];
        iter216.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 40);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter217 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter217))
      {
        iter217 = this.memberMids[iter217];
        output.writeString(iter217);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetChatsResponse = module.exports.GetChatsResponse = function(args) {
  this.chats = null;
  if (args) {
    if (args.chats !== undefined && args.chats !== null) {
      this.chats = Thrift.copyList(args.chats, [ttypes.Chat]);
    }
  }
};
GetChatsResponse.prototype = {};
GetChatsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size218 = 0;
        var _rtmp3222;
        this.chats = [];
        var _etype221 = 0;
        _rtmp3222 = input.readListBegin();
        _etype221 = _rtmp3222.etype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var elem224 = null;
          elem224 = new ttypes.Chat();
          elem224.read(input);
          this.chats.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetChatsResponse');
  if (this.chats !== null && this.chats !== undefined) {
    output.writeFieldBegin('chats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.chats.length);
    for (var iter225 in this.chats)
    {
      if (this.chats.hasOwnProperty(iter225))
      {
        iter225 = this.chats[iter225];
        iter225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetChatsRequest = module.exports.GetChatsRequest = function(args) {
  this.chatMid = null;
  this.withMembers = null;
  this.withInvitees = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = Thrift.copyList(args.chatMid, [null]);
    }
    if (args.withMembers !== undefined && args.withMembers !== null) {
      this.withMembers = args.withMembers;
    }
    if (args.withInvitees !== undefined && args.withInvitees !== null) {
      this.withInvitees = args.withInvitees;
    }
  }
};
GetChatsRequest.prototype = {};
GetChatsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.chatMid = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = input.readString();
          this.chatMid.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withMembers = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withInvitees = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetChatsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetChatsRequest');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.chatMid.length);
    for (var iter233 in this.chatMid)
    {
      if (this.chatMid.hasOwnProperty(iter233))
      {
        iter233 = this.chatMid[iter233];
        output.writeString(iter233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.withMembers !== null && this.withMembers !== undefined) {
    output.writeFieldBegin('withMembers', Thrift.Type.BOOL, 2);
    output.writeBool(this.withMembers);
    output.writeFieldEnd();
  }
  if (this.withInvitees !== null && this.withInvitees !== undefined) {
    output.writeFieldBegin('withInvitees', Thrift.Type.BOOL, 3);
    output.writeBool(this.withInvitees);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReissueChatTicketRequest = module.exports.ReissueChatTicketRequest = function(args) {
  this.reqSeq = null;
  this.groupMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
  }
};
ReissueChatTicketRequest.prototype = {};
ReissueChatTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReissueChatTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('ReissueChatTicketRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 2);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReissueChatTicketResponse = module.exports.ReissueChatTicketResponse = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
ReissueChatTicketResponse.prototype = {};
ReissueChatTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReissueChatTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('ReissueChatTicketResponse');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Location = module.exports.Location = function(args) {
  this.title = null;
  this.address = null;
  this.latitude = null;
  this.longitude = null;
  this.phone = null;
  this.categoryId = null;
  this.provider = null;
  this.accuracy = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.accuracy !== undefined && args.accuracy !== null) {
      this.accuracy = new ttypes.GeolocationAccuracy(args.accuracy);
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.categoryId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.accuracy = new ttypes.GeolocationAccuracy();
        this.accuracy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.STRING, 6);
    output.writeString(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 7);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.accuracy !== null && this.accuracy !== undefined) {
    output.writeFieldBegin('accuracy', Thrift.Type.STRUCT, 8);
    this.accuracy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Message = module.exports.Message = function(args) {
  this.from_ = null;
  this.to = null;
  this.toType = null;
  this.id = null;
  this.createdTime = null;
  this.deliveredTime = null;
  this.text = null;
  this.location = null;
  this.hasContent = null;
  this.contentType = null;
  this.contentMetadata = null;
  this.contentPreview = null;
  this.sessionId = null;
  this.chunks = null;
  this.relatedMessageId = null;
  this.messageRelationType = null;
  this.readCount = null;
  this.relatedMessageServiceCode = null;
  this.appExtensionType = null;
  if (args) {
    if (args.from_ !== undefined && args.from_ !== null) {
      this.from_ = args.from_;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.toType !== undefined && args.toType !== null) {
      this.toType = args.toType;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
      this.deliveredTime = args.deliveredTime;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Location(args.location);
    }
    if (args.hasContent !== undefined && args.hasContent !== null) {
      this.hasContent = args.hasContent;
    }
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
    }
    if (args.contentPreview !== undefined && args.contentPreview !== null) {
      this.contentPreview = args.contentPreview;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.chunks !== undefined && args.chunks !== null) {
      this.chunks = Thrift.copyList(args.chunks, [null]);
    }
    if (args.relatedMessageId !== undefined && args.relatedMessageId !== null) {
      this.relatedMessageId = args.relatedMessageId;
    }
    if (args.messageRelationType !== undefined && args.messageRelationType !== null) {
      this.messageRelationType = args.messageRelationType;
    }
    if (args.readCount !== undefined && args.readCount !== null) {
      this.readCount = args.readCount;
    }
    if (args.relatedMessageServiceCode !== undefined && args.relatedMessageServiceCode !== null) {
      this.relatedMessageServiceCode = args.relatedMessageServiceCode;
    }
    if (args.appExtensionType !== undefined && args.appExtensionType !== null) {
      this.appExtensionType = args.appExtensionType;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.from_ = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.toType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.deliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.hasContent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        var _size234 = 0;
        var _rtmp3238;
        this.contentMetadata = {};
        var _ktype235 = 0;
        var _vtype236 = 0;
        _rtmp3238 = input.readMapBegin();
        _ktype235 = _rtmp3238.ktype;
        _vtype236 = _rtmp3238.vtype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var key240 = null;
          var val241 = null;
          key240 = input.readString();
          val241 = input.readString();
          this.contentMetadata[key240] = val241;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.contentPreview = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BYTE) {
        this.sessionId = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size242 = 0;
        var _rtmp3246;
        this.chunks = [];
        var _etype245 = 0;
        _rtmp3246 = input.readListBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = input.readBinary();
          this.chunks.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.relatedMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.messageRelationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.readCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.relatedMessageServiceCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.appExtensionType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.from_ !== null && this.from_ !== undefined) {
    output.writeFieldBegin('from_', Thrift.Type.STRING, 1);
    output.writeString(this.from_);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.toType !== null && this.toType !== undefined) {
    output.writeFieldBegin('toType', Thrift.Type.I32, 3);
    output.writeI32(this.toType);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
    output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 6);
    output.writeI64(this.deliveredTime);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 10);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.hasContent !== null && this.hasContent !== undefined) {
    output.writeFieldBegin('hasContent', Thrift.Type.BOOL, 14);
    output.writeBool(this.hasContent);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 15);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
    for (var kiter249 in this.contentMetadata)
    {
      if (this.contentMetadata.hasOwnProperty(kiter249))
      {
        var viter250 = this.contentMetadata[kiter249];
        output.writeString(kiter249);
        output.writeString(viter250);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.contentPreview !== null && this.contentPreview !== undefined) {
    output.writeFieldBegin('contentPreview', Thrift.Type.STRING, 17);
    output.writeBinary(this.contentPreview);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 19);
    output.writeByte(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.chunks !== null && this.chunks !== undefined) {
    output.writeFieldBegin('chunks', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRING, this.chunks.length);
    for (var iter251 in this.chunks)
    {
      if (this.chunks.hasOwnProperty(iter251))
      {
        iter251 = this.chunks[iter251];
        output.writeBinary(iter251);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedMessageId !== null && this.relatedMessageId !== undefined) {
    output.writeFieldBegin('relatedMessageId', Thrift.Type.STRING, 21);
    output.writeString(this.relatedMessageId);
    output.writeFieldEnd();
  }
  if (this.messageRelationType !== null && this.messageRelationType !== undefined) {
    output.writeFieldBegin('messageRelationType', Thrift.Type.I32, 22);
    output.writeI32(this.messageRelationType);
    output.writeFieldEnd();
  }
  if (this.readCount !== null && this.readCount !== undefined) {
    output.writeFieldBegin('readCount', Thrift.Type.I32, 23);
    output.writeI32(this.readCount);
    output.writeFieldEnd();
  }
  if (this.relatedMessageServiceCode !== null && this.relatedMessageServiceCode !== undefined) {
    output.writeFieldBegin('relatedMessageServiceCode', Thrift.Type.I32, 24);
    output.writeI32(this.relatedMessageServiceCode);
    output.writeFieldEnd();
  }
  if (this.appExtensionType !== null && this.appExtensionType !== undefined) {
    output.writeFieldBegin('appExtensionType', Thrift.Type.I32, 25);
    output.writeI32(this.appExtensionType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CallHost = module.exports.CallHost = function(args) {
  this.host = null;
  this.port = null;
  this.zone = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.zone !== undefined && args.zone !== null) {
      this.zone = args.zone;
    }
  }
};
CallHost.prototype = {};
CallHost.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.zone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallHost.prototype.write = function(output) {
  output.writeStructBegin('CallHost');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.zone !== null && this.zone !== undefined) {
    output.writeFieldBegin('zone', Thrift.Type.STRING, 3);
    output.writeString(this.zone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupCallRoute = module.exports.GroupCallRoute = function(args) {
  this.token = null;
  this.cscf = null;
  this.mix = null;
  this.hostMid = null;
  this.capabilities = null;
  this.proto = null;
  this.voipAddress = null;
  this.voipUdpPort = null;
  this.voipTcpPort = null;
  this.fromZone = null;
  this.commParam = null;
  this.polarisAddress = null;
  this.polarisUdpPort = null;
  this.polarisZone = null;
  this.orionAddress = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cscf !== undefined && args.cscf !== null) {
      this.cscf = new ttypes.CallHost(args.cscf);
    }
    if (args.mix !== undefined && args.mix !== null) {
      this.mix = new ttypes.CallHost(args.mix);
    }
    if (args.hostMid !== undefined && args.hostMid !== null) {
      this.hostMid = args.hostMid;
    }
    if (args.capabilities !== undefined && args.capabilities !== null) {
      this.capabilities = Thrift.copyList(args.capabilities, [null]);
    }
    if (args.proto !== undefined && args.proto !== null) {
      this.proto = args.proto;
    }
    if (args.voipAddress !== undefined && args.voipAddress !== null) {
      this.voipAddress = args.voipAddress;
    }
    if (args.voipUdpPort !== undefined && args.voipUdpPort !== null) {
      this.voipUdpPort = args.voipUdpPort;
    }
    if (args.voipTcpPort !== undefined && args.voipTcpPort !== null) {
      this.voipTcpPort = args.voipTcpPort;
    }
    if (args.fromZone !== undefined && args.fromZone !== null) {
      this.fromZone = args.fromZone;
    }
    if (args.commParam !== undefined && args.commParam !== null) {
      this.commParam = args.commParam;
    }
    if (args.polarisAddress !== undefined && args.polarisAddress !== null) {
      this.polarisAddress = args.polarisAddress;
    }
    if (args.polarisUdpPort !== undefined && args.polarisUdpPort !== null) {
      this.polarisUdpPort = args.polarisUdpPort;
    }
    if (args.polarisZone !== undefined && args.polarisZone !== null) {
      this.polarisZone = args.polarisZone;
    }
    if (args.orionAddress !== undefined && args.orionAddress !== null) {
      this.orionAddress = args.orionAddress;
    }
  }
};
GroupCallRoute.prototype = {};
GroupCallRoute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cscf = new ttypes.CallHost();
        this.cscf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mix = new ttypes.CallHost();
        this.mix.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.hostMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.capabilities = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          elem258 = input.readString();
          this.capabilities.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.proto = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.voipAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.voipUdpPort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.voipTcpPort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fromZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.commParam = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.polarisAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.polarisUdpPort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.polarisZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.orionAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupCallRoute.prototype.write = function(output) {
  output.writeStructBegin('GroupCallRoute');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cscf !== null && this.cscf !== undefined) {
    output.writeFieldBegin('cscf', Thrift.Type.STRUCT, 2);
    this.cscf.write(output);
    output.writeFieldEnd();
  }
  if (this.mix !== null && this.mix !== undefined) {
    output.writeFieldBegin('mix', Thrift.Type.STRUCT, 3);
    this.mix.write(output);
    output.writeFieldEnd();
  }
  if (this.hostMid !== null && this.hostMid !== undefined) {
    output.writeFieldBegin('hostMid', Thrift.Type.STRING, 4);
    output.writeString(this.hostMid);
    output.writeFieldEnd();
  }
  if (this.capabilities !== null && this.capabilities !== undefined) {
    output.writeFieldBegin('capabilities', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.capabilities.length);
    for (var iter259 in this.capabilities)
    {
      if (this.capabilities.hasOwnProperty(iter259))
      {
        iter259 = this.capabilities[iter259];
        output.writeString(iter259);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.proto !== null && this.proto !== undefined) {
    output.writeFieldBegin('proto', Thrift.Type.I32, 6);
    output.writeI32(this.proto);
    output.writeFieldEnd();
  }
  if (this.voipAddress !== null && this.voipAddress !== undefined) {
    output.writeFieldBegin('voipAddress', Thrift.Type.STRING, 7);
    output.writeString(this.voipAddress);
    output.writeFieldEnd();
  }
  if (this.voipUdpPort !== null && this.voipUdpPort !== undefined) {
    output.writeFieldBegin('voipUdpPort', Thrift.Type.I32, 8);
    output.writeI32(this.voipUdpPort);
    output.writeFieldEnd();
  }
  if (this.voipTcpPort !== null && this.voipTcpPort !== undefined) {
    output.writeFieldBegin('voipTcpPort', Thrift.Type.I32, 9);
    output.writeI32(this.voipTcpPort);
    output.writeFieldEnd();
  }
  if (this.fromZone !== null && this.fromZone !== undefined) {
    output.writeFieldBegin('fromZone', Thrift.Type.STRING, 10);
    output.writeString(this.fromZone);
    output.writeFieldEnd();
  }
  if (this.commParam !== null && this.commParam !== undefined) {
    output.writeFieldBegin('commParam', Thrift.Type.STRING, 11);
    output.writeString(this.commParam);
    output.writeFieldEnd();
  }
  if (this.polarisAddress !== null && this.polarisAddress !== undefined) {
    output.writeFieldBegin('polarisAddress', Thrift.Type.STRING, 12);
    output.writeString(this.polarisAddress);
    output.writeFieldEnd();
  }
  if (this.polarisUdpPort !== null && this.polarisUdpPort !== undefined) {
    output.writeFieldBegin('polarisUdpPort', Thrift.Type.I32, 13);
    output.writeI32(this.polarisUdpPort);
    output.writeFieldEnd();
  }
  if (this.polarisZone !== null && this.polarisZone !== undefined) {
    output.writeFieldBegin('polarisZone', Thrift.Type.STRING, 14);
    output.writeString(this.polarisZone);
    output.writeFieldEnd();
  }
  if (this.orionAddress !== null && this.orionAddress !== undefined) {
    output.writeFieldBegin('orionAddress', Thrift.Type.STRING, 15);
    output.writeString(this.orionAddress);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcceptChatInvitationByTicketResponse = module.exports.AcceptChatInvitationByTicketResponse = function(args) {
};
AcceptChatInvitationByTicketResponse.prototype = {};
AcceptChatInvitationByTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationByTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationByTicketResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcceptChatInvitationByTicketRequest = module.exports.AcceptChatInvitationByTicketRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.ticketId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
AcceptChatInvitationByTicketRequest.prototype = {};
AcceptChatInvitationByTicketRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationByTicketRequest.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationByTicketRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 3);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProfileContent = module.exports.ProfileContent = function(args) {
  this.value = null;
  this.meta = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.meta !== undefined && args.meta !== null) {
      this.meta = Thrift.copyMap(args.meta, [null]);
    }
  }
};
ProfileContent.prototype = {};
ProfileContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size260 = 0;
        var _rtmp3264;
        this.meta = {};
        var _ktype261 = 0;
        var _vtype262 = 0;
        _rtmp3264 = input.readMapBegin();
        _ktype261 = _rtmp3264.ktype;
        _vtype262 = _rtmp3264.vtype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var key266 = null;
          var val267 = null;
          key266 = input.readString();
          val267 = input.readString();
          this.meta[key266] = val267;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProfileContent.prototype.write = function(output) {
  output.writeStructBegin('ProfileContent');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.meta !== null && this.meta !== undefined) {
    output.writeFieldBegin('meta', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.meta));
    for (var kiter268 in this.meta)
    {
      if (this.meta.hasOwnProperty(kiter268))
      {
        var viter269 = this.meta[kiter268];
        output.writeString(kiter268);
        output.writeString(viter269);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateProfileAttributesRequest = module.exports.UpdateProfileAttributesRequest = function(args) {
  this.profileAttributes = null;
  if (args) {
    if (args.profileAttributes !== undefined && args.profileAttributes !== null) {
      this.profileAttributes = Thrift.copyMap(args.profileAttributes, [ttypes.ProfileContent]);
    }
  }
};
UpdateProfileAttributesRequest.prototype = {};
UpdateProfileAttributesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size270 = 0;
        var _rtmp3274;
        this.profileAttributes = {};
        var _ktype271 = 0;
        var _vtype272 = 0;
        _rtmp3274 = input.readMapBegin();
        _ktype271 = _rtmp3274.ktype;
        _vtype272 = _rtmp3274.vtype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var key276 = null;
          var val277 = null;
          key276 = input.readI32();
          val277 = new ttypes.ProfileContent();
          val277.read(input);
          this.profileAttributes[key276] = val277;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateProfileAttributesRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateProfileAttributesRequest');
  if (this.profileAttributes !== null && this.profileAttributes !== undefined) {
    output.writeFieldBegin('profileAttributes', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.profileAttributes));
    for (var kiter278 in this.profileAttributes)
    {
      if (this.profileAttributes.hasOwnProperty(kiter278))
      {
        var viter279 = this.profileAttributes[kiter278];
        output.writeI32(kiter278);
        viter279.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcceptChatInvitationResponse = module.exports.AcceptChatInvitationResponse = function(args) {
};
AcceptChatInvitationResponse.prototype = {};
AcceptChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcceptChatInvitationRequest = module.exports.AcceptChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
AcceptChatInvitationRequest.prototype = {};
AcceptChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcceptChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('AcceptChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InviteIntoChatResponse = module.exports.InviteIntoChatResponse = function(args) {
};
InviteIntoChatResponse.prototype = {};
InviteIntoChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteIntoChatResponse.prototype.write = function(output) {
  output.writeStructBegin('InviteIntoChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InviteIntoChatRequest = module.exports.InviteIntoChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
InviteIntoChatRequest.prototype = {};
InviteIntoChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size280 = 0;
        var _rtmp3284;
        this.targetUserMids = [];
        var _etype283 = 0;
        _rtmp3284 = input.readSetBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readString();
          this.targetUserMids.push(elem286);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InviteIntoChatRequest.prototype.write = function(output) {
  output.writeStructBegin('InviteIntoChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter287 in this.targetUserMids)
    {
      if (this.targetUserMids.hasOwnProperty(iter287))
      {
        iter287 = this.targetUserMids[iter287];
        output.writeString(iter287);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FollowRequest = module.exports.FollowRequest = function(args) {
  this.followMid = null;
  if (args) {
    if (args.followMid !== undefined && args.followMid !== null) {
      this.followMid = new ttypes.FollowMid(args.followMid);
    }
  }
};
FollowRequest.prototype = {};
FollowRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.followMid = new ttypes.FollowMid();
        this.followMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FollowRequest.prototype.write = function(output) {
  output.writeStructBegin('FollowRequest');
  if (this.followMid !== null && this.followMid !== undefined) {
    output.writeFieldBegin('followMid', Thrift.Type.STRUCT, 1);
    this.followMid.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RSAKey = module.exports.RSAKey = function(args) {
  this.keynm = null;
  this.nvalue = null;
  this.evalue = null;
  this.sessionKey = null;
  if (args) {
    if (args.keynm !== undefined && args.keynm !== null) {
      this.keynm = args.keynm;
    }
    if (args.nvalue !== undefined && args.nvalue !== null) {
      this.nvalue = args.nvalue;
    }
    if (args.evalue !== undefined && args.evalue !== null) {
      this.evalue = args.evalue;
    }
    if (args.sessionKey !== undefined && args.sessionKey !== null) {
      this.sessionKey = args.sessionKey;
    }
  }
};
RSAKey.prototype = {};
RSAKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keynm = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nvalue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.evalue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RSAKey.prototype.write = function(output) {
  output.writeStructBegin('RSAKey');
  if (this.keynm !== null && this.keynm !== undefined) {
    output.writeFieldBegin('keynm', Thrift.Type.STRING, 1);
    output.writeString(this.keynm);
    output.writeFieldEnd();
  }
  if (this.nvalue !== null && this.nvalue !== undefined) {
    output.writeFieldBegin('nvalue', Thrift.Type.STRING, 2);
    output.writeString(this.nvalue);
    output.writeFieldEnd();
  }
  if (this.evalue !== null && this.evalue !== undefined) {
    output.writeFieldBegin('evalue', Thrift.Type.STRING, 3);
    output.writeString(this.evalue);
    output.writeFieldEnd();
  }
  if (this.sessionKey !== null && this.sessionKey !== undefined) {
    output.writeFieldBegin('sessionKey', Thrift.Type.STRING, 4);
    output.writeString(this.sessionKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Operation = module.exports.Operation = function(args) {
  this.revision = null;
  this.createdTime = null;
  this.type = null;
  this.reqSeq = null;
  this.checksum = null;
  this.status = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  this.message = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.checksum !== undefined && args.checksum !== null) {
      this.checksum = args.checksum;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
Operation.prototype = {};
Operation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.checksum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Operation.prototype.write = function(output) {
  output.writeStructBegin('Operation');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 4);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.checksum !== null && this.checksum !== undefined) {
    output.writeFieldBegin('checksum', Thrift.Type.STRING, 5);
    output.writeString(this.checksum);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 10);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 11);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 12);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 20);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupCall = module.exports.GroupCall = function(args) {
  this.online = null;
  this.chatMid = null;
  this.hostMid = null;
  this.memberMids = null;
  this.started = null;
  this.mediaType = null;
  this.protocol = null;
  if (args) {
    if (args.online !== undefined && args.online !== null) {
      this.online = args.online;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.hostMid !== undefined && args.hostMid !== null) {
      this.hostMid = args.hostMid;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.started !== undefined && args.started !== null) {
      this.started = args.started;
    }
    if (args.mediaType !== undefined && args.mediaType !== null) {
      this.mediaType = args.mediaType;
    }
    if (args.protocol !== undefined && args.protocol !== null) {
      this.protocol = args.protocol;
    }
  }
};
GroupCall.prototype = {};
GroupCall.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.online = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hostMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.memberMids = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = input.readString();
          this.memberMids.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.started = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.mediaType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupCall.prototype.write = function(output) {
  output.writeStructBegin('GroupCall');
  if (this.online !== null && this.online !== undefined) {
    output.writeFieldBegin('online', Thrift.Type.BOOL, 1);
    output.writeBool(this.online);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.hostMid !== null && this.hostMid !== undefined) {
    output.writeFieldBegin('hostMid', Thrift.Type.STRING, 3);
    output.writeString(this.hostMid);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter295 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter295))
      {
        iter295 = this.memberMids[iter295];
        output.writeString(iter295);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.started !== null && this.started !== undefined) {
    output.writeFieldBegin('started', Thrift.Type.I64, 5);
    output.writeI64(this.started);
    output.writeFieldEnd();
  }
  if (this.mediaType !== null && this.mediaType !== undefined) {
    output.writeFieldBegin('mediaType', Thrift.Type.I32, 6);
    output.writeI32(this.mediaType);
    output.writeFieldEnd();
  }
  if (this.protocol !== null && this.protocol !== undefined) {
    output.writeFieldBegin('protocol', Thrift.Type.I32, 7);
    output.writeI32(this.protocol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CancelChatInvitationRequest = module.exports.CancelChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
CancelChatInvitationRequest.prototype = {};
CancelChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size296 = 0;
        var _rtmp3300;
        this.targetUserMids = [];
        var _etype299 = 0;
        _rtmp3300 = input.readSetBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = input.readString();
          this.targetUserMids.push(elem302);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CancelChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('CancelChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter303 in this.targetUserMids)
    {
      if (this.targetUserMids.hasOwnProperty(iter303))
      {
        iter303 = this.targetUserMids[iter303];
        output.writeString(iter303);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Settings = module.exports.Settings = function(args) {
  this.notificationThumbnail = null;
  this.privacySyncContacts = null;
  this.privacySearchByPhoneNumber = null;
  this.privacySearchByUserid = null;
  this.privacySearchByEmail = null;
  this.privacyAllowSecondaryDeviceLogin = null;
  this.privacyProfileImagePostToMyhome = null;
  this.privacyProfileMusicPostToMyhome = null;
  this.privacyAllowProfileHistory = null;
  this.privacyStatusMessageHistory = null;
  this.privacyReceiveMessagesFromNotFriend = null;
  this.privacyAgreeUseLineCoinToPaidCall = null;
  this.privacyAgreeUsePaidCall = null;
  this.privacyAllowFriendRequest = null;
  this.privacyAllowNearby = null;
  this.privacySharePersonalInfoToFriends = null;
  this.privacyAgeResult = null;
  this.privacyAgeResultReceived = null;
  this.privacyAllowFollow = null;
  this.privacyShowFollowList = null;
  this.contactMyTicket = null;
  this.identityProvider = null;
  this.identityIdentifier = null;
  this.snsAccounts = null;
  this.phoneRegistration = null;
  this.emailConfirmationStatus = null;
  this.accountMigrationPincodeType = null;
  this.enforcedInputAccountMigrationPincode = null;
  this.securityCenterSettingsType = null;
  this.allowUnregistrationSecondaryDevice = null;
  this.preferenceLocale = null;
  this.customModes = null;
  this.e2eeEnable = null;
  this.hitokotoBackupRequested = null;
  this.agreementNearbyTime = null;
  this.agreementSquareTime = null;
  this.botUseAgreementAcceptedAt = null;
  this.agreementShakeFunction = null;
  this.agreementMobileContactName = null;
  this.agreementSoundToText = null;
  this.privacyPolicyVersion = null;
  this.notificationEnable = null;
  this.agreementAdByWebAccess = null;
  this.notificationMuteExpiration = null;
  this.agreementPhoneNumberMatching = null;
  this.notificationNewMessage = null;
  this.agreementCommunicationInfo = null;
  this.notificationGroupInvitation = null;
  this.agreementThingsWirelessCommunication = null;
  this.notificationShowMessage = null;
  this.agreementGdpr = null;
  this.notificationIncomingCall = null;
  this.agreementProvideLocation = null;
  this.notificationSoundMessage = null;
  this.agreementBeacon = null;
  this.notificationSoundGroup = null;
  this.agreementContentsSuggest = null;
  this.notificationDisabledWithSub = null;
  this.agreementContentsSuggestDataCollection = null;
  this.notificationPayment = null;
  this.agreementOcrImageCollection = null;
  this.notificationMention = null;
  if (args) {
    if (args.notificationThumbnail !== undefined && args.notificationThumbnail !== null) {
      this.notificationThumbnail = args.notificationThumbnail;
    }
    if (args.privacySyncContacts !== undefined && args.privacySyncContacts !== null) {
      this.privacySyncContacts = args.privacySyncContacts;
    }
    if (args.privacySearchByPhoneNumber !== undefined && args.privacySearchByPhoneNumber !== null) {
      this.privacySearchByPhoneNumber = args.privacySearchByPhoneNumber;
    }
    if (args.privacySearchByUserid !== undefined && args.privacySearchByUserid !== null) {
      this.privacySearchByUserid = args.privacySearchByUserid;
    }
    if (args.privacySearchByEmail !== undefined && args.privacySearchByEmail !== null) {
      this.privacySearchByEmail = args.privacySearchByEmail;
    }
    if (args.privacyAllowSecondaryDeviceLogin !== undefined && args.privacyAllowSecondaryDeviceLogin !== null) {
      this.privacyAllowSecondaryDeviceLogin = args.privacyAllowSecondaryDeviceLogin;
    }
    if (args.privacyProfileImagePostToMyhome !== undefined && args.privacyProfileImagePostToMyhome !== null) {
      this.privacyProfileImagePostToMyhome = args.privacyProfileImagePostToMyhome;
    }
    if (args.privacyProfileMusicPostToMyhome !== undefined && args.privacyProfileMusicPostToMyhome !== null) {
      this.privacyProfileMusicPostToMyhome = args.privacyProfileMusicPostToMyhome;
    }
    if (args.privacyAllowProfileHistory !== undefined && args.privacyAllowProfileHistory !== null) {
      this.privacyAllowProfileHistory = args.privacyAllowProfileHistory;
    }
    if (args.privacyStatusMessageHistory !== undefined && args.privacyStatusMessageHistory !== null) {
      this.privacyStatusMessageHistory = args.privacyStatusMessageHistory;
    }
    if (args.privacyReceiveMessagesFromNotFriend !== undefined && args.privacyReceiveMessagesFromNotFriend !== null) {
      this.privacyReceiveMessagesFromNotFriend = args.privacyReceiveMessagesFromNotFriend;
    }
    if (args.privacyAgreeUseLineCoinToPaidCall !== undefined && args.privacyAgreeUseLineCoinToPaidCall !== null) {
      this.privacyAgreeUseLineCoinToPaidCall = args.privacyAgreeUseLineCoinToPaidCall;
    }
    if (args.privacyAgreeUsePaidCall !== undefined && args.privacyAgreeUsePaidCall !== null) {
      this.privacyAgreeUsePaidCall = args.privacyAgreeUsePaidCall;
    }
    if (args.privacyAllowFriendRequest !== undefined && args.privacyAllowFriendRequest !== null) {
      this.privacyAllowFriendRequest = args.privacyAllowFriendRequest;
    }
    if (args.privacyAllowNearby !== undefined && args.privacyAllowNearby !== null) {
      this.privacyAllowNearby = args.privacyAllowNearby;
    }
    if (args.privacySharePersonalInfoToFriends !== undefined && args.privacySharePersonalInfoToFriends !== null) {
      this.privacySharePersonalInfoToFriends = args.privacySharePersonalInfoToFriends;
    }
    if (args.privacyAgeResult !== undefined && args.privacyAgeResult !== null) {
      this.privacyAgeResult = args.privacyAgeResult;
    }
    if (args.privacyAgeResultReceived !== undefined && args.privacyAgeResultReceived !== null) {
      this.privacyAgeResultReceived = args.privacyAgeResultReceived;
    }
    if (args.privacyAllowFollow !== undefined && args.privacyAllowFollow !== null) {
      this.privacyAllowFollow = args.privacyAllowFollow;
    }
    if (args.privacyShowFollowList !== undefined && args.privacyShowFollowList !== null) {
      this.privacyShowFollowList = args.privacyShowFollowList;
    }
    if (args.contactMyTicket !== undefined && args.contactMyTicket !== null) {
      this.contactMyTicket = args.contactMyTicket;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identityIdentifier !== undefined && args.identityIdentifier !== null) {
      this.identityIdentifier = args.identityIdentifier;
    }
    if (args.snsAccounts !== undefined && args.snsAccounts !== null) {
      this.snsAccounts = Thrift.copyMap(args.snsAccounts, [null]);
    }
    if (args.phoneRegistration !== undefined && args.phoneRegistration !== null) {
      this.phoneRegistration = args.phoneRegistration;
    }
    if (args.emailConfirmationStatus !== undefined && args.emailConfirmationStatus !== null) {
      this.emailConfirmationStatus = args.emailConfirmationStatus;
    }
    if (args.accountMigrationPincodeType !== undefined && args.accountMigrationPincodeType !== null) {
      this.accountMigrationPincodeType = args.accountMigrationPincodeType;
    }
    if (args.enforcedInputAccountMigrationPincode !== undefined && args.enforcedInputAccountMigrationPincode !== null) {
      this.enforcedInputAccountMigrationPincode = args.enforcedInputAccountMigrationPincode;
    }
    if (args.securityCenterSettingsType !== undefined && args.securityCenterSettingsType !== null) {
      this.securityCenterSettingsType = args.securityCenterSettingsType;
    }
    if (args.allowUnregistrationSecondaryDevice !== undefined && args.allowUnregistrationSecondaryDevice !== null) {
      this.allowUnregistrationSecondaryDevice = args.allowUnregistrationSecondaryDevice;
    }
    if (args.preferenceLocale !== undefined && args.preferenceLocale !== null) {
      this.preferenceLocale = args.preferenceLocale;
    }
    if (args.customModes !== undefined && args.customModes !== null) {
      this.customModes = Thrift.copyMap(args.customModes, [null]);
    }
    if (args.e2eeEnable !== undefined && args.e2eeEnable !== null) {
      this.e2eeEnable = args.e2eeEnable;
    }
    if (args.hitokotoBackupRequested !== undefined && args.hitokotoBackupRequested !== null) {
      this.hitokotoBackupRequested = args.hitokotoBackupRequested;
    }
    if (args.agreementNearbyTime !== undefined && args.agreementNearbyTime !== null) {
      this.agreementNearbyTime = args.agreementNearbyTime;
    }
    if (args.agreementSquareTime !== undefined && args.agreementSquareTime !== null) {
      this.agreementSquareTime = args.agreementSquareTime;
    }
    if (args.botUseAgreementAcceptedAt !== undefined && args.botUseAgreementAcceptedAt !== null) {
      this.botUseAgreementAcceptedAt = args.botUseAgreementAcceptedAt;
    }
    if (args.agreementShakeFunction !== undefined && args.agreementShakeFunction !== null) {
      this.agreementShakeFunction = args.agreementShakeFunction;
    }
    if (args.agreementMobileContactName !== undefined && args.agreementMobileContactName !== null) {
      this.agreementMobileContactName = args.agreementMobileContactName;
    }
    if (args.agreementSoundToText !== undefined && args.agreementSoundToText !== null) {
      this.agreementSoundToText = args.agreementSoundToText;
    }
    if (args.privacyPolicyVersion !== undefined && args.privacyPolicyVersion !== null) {
      this.privacyPolicyVersion = args.privacyPolicyVersion;
    }
    if (args.notificationEnable !== undefined && args.notificationEnable !== null) {
      this.notificationEnable = args.notificationEnable;
    }
    if (args.agreementAdByWebAccess !== undefined && args.agreementAdByWebAccess !== null) {
      this.agreementAdByWebAccess = args.agreementAdByWebAccess;
    }
    if (args.notificationMuteExpiration !== undefined && args.notificationMuteExpiration !== null) {
      this.notificationMuteExpiration = args.notificationMuteExpiration;
    }
    if (args.agreementPhoneNumberMatching !== undefined && args.agreementPhoneNumberMatching !== null) {
      this.agreementPhoneNumberMatching = args.agreementPhoneNumberMatching;
    }
    if (args.notificationNewMessage !== undefined && args.notificationNewMessage !== null) {
      this.notificationNewMessage = args.notificationNewMessage;
    }
    if (args.agreementCommunicationInfo !== undefined && args.agreementCommunicationInfo !== null) {
      this.agreementCommunicationInfo = args.agreementCommunicationInfo;
    }
    if (args.notificationGroupInvitation !== undefined && args.notificationGroupInvitation !== null) {
      this.notificationGroupInvitation = args.notificationGroupInvitation;
    }
    if (args.agreementThingsWirelessCommunication !== undefined && args.agreementThingsWirelessCommunication !== null) {
      this.agreementThingsWirelessCommunication = args.agreementThingsWirelessCommunication;
    }
    if (args.notificationShowMessage !== undefined && args.notificationShowMessage !== null) {
      this.notificationShowMessage = args.notificationShowMessage;
    }
    if (args.agreementGdpr !== undefined && args.agreementGdpr !== null) {
      this.agreementGdpr = args.agreementGdpr;
    }
    if (args.notificationIncomingCall !== undefined && args.notificationIncomingCall !== null) {
      this.notificationIncomingCall = args.notificationIncomingCall;
    }
    if (args.agreementProvideLocation !== undefined && args.agreementProvideLocation !== null) {
      this.agreementProvideLocation = args.agreementProvideLocation;
    }
    if (args.notificationSoundMessage !== undefined && args.notificationSoundMessage !== null) {
      this.notificationSoundMessage = args.notificationSoundMessage;
    }
    if (args.agreementBeacon !== undefined && args.agreementBeacon !== null) {
      this.agreementBeacon = args.agreementBeacon;
    }
    if (args.notificationSoundGroup !== undefined && args.notificationSoundGroup !== null) {
      this.notificationSoundGroup = args.notificationSoundGroup;
    }
    if (args.agreementContentsSuggest !== undefined && args.agreementContentsSuggest !== null) {
      this.agreementContentsSuggest = args.agreementContentsSuggest;
    }
    if (args.notificationDisabledWithSub !== undefined && args.notificationDisabledWithSub !== null) {
      this.notificationDisabledWithSub = args.notificationDisabledWithSub;
    }
    if (args.agreementContentsSuggestDataCollection !== undefined && args.agreementContentsSuggestDataCollection !== null) {
      this.agreementContentsSuggestDataCollection = args.agreementContentsSuggestDataCollection;
    }
    if (args.notificationPayment !== undefined && args.notificationPayment !== null) {
      this.notificationPayment = args.notificationPayment;
    }
    if (args.agreementOcrImageCollection !== undefined && args.agreementOcrImageCollection !== null) {
      this.agreementOcrImageCollection = args.agreementOcrImageCollection;
    }
    if (args.notificationMention !== undefined && args.notificationMention !== null) {
      this.notificationMention = args.notificationMention;
    }
  }
};
Settings.prototype = {};
Settings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 72:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationThumbnail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySyncContacts = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByPhoneNumber = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByUserid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByEmail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowSecondaryDeviceLogin = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileImagePostToMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileMusicPostToMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 85:
      if (ftype == Thrift.Type.I32) {
        this.privacyAllowProfileHistory = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 81:
      if (ftype == Thrift.Type.I32) {
        this.privacyStatusMessageHistory = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyReceiveMessagesFromNotFriend = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgreeUseLineCoinToPaidCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgreeUsePaidCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowFriendRequest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowNearby = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 78:
      if (ftype == Thrift.Type.I32) {
        this.privacySharePersonalInfoToFriends = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 88:
      if (ftype == Thrift.Type.I32) {
        this.privacyAgeResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 89:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgeResultReceived = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 91:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowFollow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 92:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyShowFollowList = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.contactMyTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.identityIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.MAP) {
        var _size304 = 0;
        var _rtmp3308;
        this.snsAccounts = {};
        var _ktype305 = 0;
        var _vtype306 = 0;
        _rtmp3308 = input.readMapBegin();
        _ktype305 = _rtmp3308.ktype;
        _vtype306 = _rtmp3308.vtype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var key310 = null;
          var val311 = null;
          key310 = input.readI32();
          val311 = input.readString();
          this.snsAccounts[key310] = val311;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I32) {
        this.emailConfirmationStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationPincodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.BOOL) {
        this.enforcedInputAccountMigrationPincode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.I32) {
        this.securityCenterSettingsType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.BOOL) {
        this.allowUnregistrationSecondaryDevice = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.preferenceLocale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.MAP) {
        var _size312 = 0;
        var _rtmp3316;
        this.customModes = {};
        var _ktype313 = 0;
        var _vtype314 = 0;
        _rtmp3316 = input.readMapBegin();
        _ktype313 = _rtmp3316.ktype;
        _vtype314 = _rtmp3316.vtype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var key318 = null;
          var val319 = null;
          key318 = input.readI32();
          val319 = input.readString();
          this.customModes[key318] = val319;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.BOOL) {
        this.e2eeEnable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.BOOL) {
        this.hitokotoBackupRequested = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 66:
      if (ftype == Thrift.Type.I64) {
        this.agreementNearbyTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 67:
      if (ftype == Thrift.Type.I64) {
        this.agreementSquareTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.I64) {
        this.botUseAgreementAcceptedAt = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.I64) {
        this.agreementShakeFunction = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 71:
      if (ftype == Thrift.Type.I64) {
        this.agreementMobileContactName = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 73:
      if (ftype == Thrift.Type.I64) {
        this.agreementSoundToText = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 74:
      if (ftype == Thrift.Type.STRING) {
        this.privacyPolicyVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationEnable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 75:
      if (ftype == Thrift.Type.I64) {
        this.agreementAdByWebAccess = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.notificationMuteExpiration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 76:
      if (ftype == Thrift.Type.I64) {
        this.agreementPhoneNumberMatching = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationNewMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 77:
      if (ftype == Thrift.Type.I64) {
        this.agreementCommunicationInfo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationGroupInvitation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 79:
      if (ftype == Thrift.Type.I64) {
        this.agreementThingsWirelessCommunication = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationShowMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.I64) {
        this.agreementGdpr = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationIncomingCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 82:
      if (ftype == Thrift.Type.I64) {
        this.agreementProvideLocation = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 83:
      if (ftype == Thrift.Type.I64) {
        this.agreementBeacon = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundGroup = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 86:
      if (ftype == Thrift.Type.I64) {
        this.agreementContentsSuggest = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabledWithSub = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 87:
      if (ftype == Thrift.Type.I64) {
        this.agreementContentsSuggestDataCollection = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationPayment = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.I64) {
        this.agreementOcrImageCollection = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationMention = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Settings.prototype.write = function(output) {
  output.writeStructBegin('Settings');
  if (this.notificationThumbnail !== null && this.notificationThumbnail !== undefined) {
    output.writeFieldBegin('notificationThumbnail', Thrift.Type.BOOL, 72);
    output.writeBool(this.notificationThumbnail);
    output.writeFieldEnd();
  }
  if (this.privacySyncContacts !== null && this.privacySyncContacts !== undefined) {
    output.writeFieldBegin('privacySyncContacts', Thrift.Type.BOOL, 20);
    output.writeBool(this.privacySyncContacts);
    output.writeFieldEnd();
  }
  if (this.privacySearchByPhoneNumber !== null && this.privacySearchByPhoneNumber !== undefined) {
    output.writeFieldBegin('privacySearchByPhoneNumber', Thrift.Type.BOOL, 21);
    output.writeBool(this.privacySearchByPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.privacySearchByUserid !== null && this.privacySearchByUserid !== undefined) {
    output.writeFieldBegin('privacySearchByUserid', Thrift.Type.BOOL, 22);
    output.writeBool(this.privacySearchByUserid);
    output.writeFieldEnd();
  }
  if (this.privacySearchByEmail !== null && this.privacySearchByEmail !== undefined) {
    output.writeFieldBegin('privacySearchByEmail', Thrift.Type.BOOL, 23);
    output.writeBool(this.privacySearchByEmail);
    output.writeFieldEnd();
  }
  if (this.privacyAllowSecondaryDeviceLogin !== null && this.privacyAllowSecondaryDeviceLogin !== undefined) {
    output.writeFieldBegin('privacyAllowSecondaryDeviceLogin', Thrift.Type.BOOL, 24);
    output.writeBool(this.privacyAllowSecondaryDeviceLogin);
    output.writeFieldEnd();
  }
  if (this.privacyProfileImagePostToMyhome !== null && this.privacyProfileImagePostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileImagePostToMyhome', Thrift.Type.BOOL, 25);
    output.writeBool(this.privacyProfileImagePostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyProfileMusicPostToMyhome !== null && this.privacyProfileMusicPostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileMusicPostToMyhome', Thrift.Type.BOOL, 63);
    output.writeBool(this.privacyProfileMusicPostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyAllowProfileHistory !== null && this.privacyAllowProfileHistory !== undefined) {
    output.writeFieldBegin('privacyAllowProfileHistory', Thrift.Type.I32, 85);
    output.writeI32(this.privacyAllowProfileHistory);
    output.writeFieldEnd();
  }
  if (this.privacyStatusMessageHistory !== null && this.privacyStatusMessageHistory !== undefined) {
    output.writeFieldBegin('privacyStatusMessageHistory', Thrift.Type.I32, 81);
    output.writeI32(this.privacyStatusMessageHistory);
    output.writeFieldEnd();
  }
  if (this.privacyReceiveMessagesFromNotFriend !== null && this.privacyReceiveMessagesFromNotFriend !== undefined) {
    output.writeFieldBegin('privacyReceiveMessagesFromNotFriend', Thrift.Type.BOOL, 26);
    output.writeBool(this.privacyReceiveMessagesFromNotFriend);
    output.writeFieldEnd();
  }
  if (this.privacyAgreeUseLineCoinToPaidCall !== null && this.privacyAgreeUseLineCoinToPaidCall !== undefined) {
    output.writeFieldBegin('privacyAgreeUseLineCoinToPaidCall', Thrift.Type.BOOL, 27);
    output.writeBool(this.privacyAgreeUseLineCoinToPaidCall);
    output.writeFieldEnd();
  }
  if (this.privacyAgreeUsePaidCall !== null && this.privacyAgreeUsePaidCall !== undefined) {
    output.writeFieldBegin('privacyAgreeUsePaidCall', Thrift.Type.BOOL, 28);
    output.writeBool(this.privacyAgreeUsePaidCall);
    output.writeFieldEnd();
  }
  if (this.privacyAllowFriendRequest !== null && this.privacyAllowFriendRequest !== undefined) {
    output.writeFieldBegin('privacyAllowFriendRequest', Thrift.Type.BOOL, 29);
    output.writeBool(this.privacyAllowFriendRequest);
    output.writeFieldEnd();
  }
  if (this.privacyAllowNearby !== null && this.privacyAllowNearby !== undefined) {
    output.writeFieldBegin('privacyAllowNearby', Thrift.Type.BOOL, 65);
    output.writeBool(this.privacyAllowNearby);
    output.writeFieldEnd();
  }
  if (this.privacySharePersonalInfoToFriends !== null && this.privacySharePersonalInfoToFriends !== undefined) {
    output.writeFieldBegin('privacySharePersonalInfoToFriends', Thrift.Type.I32, 78);
    output.writeI32(this.privacySharePersonalInfoToFriends);
    output.writeFieldEnd();
  }
  if (this.privacyAgeResult !== null && this.privacyAgeResult !== undefined) {
    output.writeFieldBegin('privacyAgeResult', Thrift.Type.I32, 88);
    output.writeI32(this.privacyAgeResult);
    output.writeFieldEnd();
  }
  if (this.privacyAgeResultReceived !== null && this.privacyAgeResultReceived !== undefined) {
    output.writeFieldBegin('privacyAgeResultReceived', Thrift.Type.BOOL, 89);
    output.writeBool(this.privacyAgeResultReceived);
    output.writeFieldEnd();
  }
  if (this.privacyAllowFollow !== null && this.privacyAllowFollow !== undefined) {
    output.writeFieldBegin('privacyAllowFollow', Thrift.Type.BOOL, 91);
    output.writeBool(this.privacyAllowFollow);
    output.writeFieldEnd();
  }
  if (this.privacyShowFollowList !== null && this.privacyShowFollowList !== undefined) {
    output.writeFieldBegin('privacyShowFollowList', Thrift.Type.BOOL, 92);
    output.writeBool(this.privacyShowFollowList);
    output.writeFieldEnd();
  }
  if (this.contactMyTicket !== null && this.contactMyTicket !== undefined) {
    output.writeFieldBegin('contactMyTicket', Thrift.Type.STRING, 30);
    output.writeString(this.contactMyTicket);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 40);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identityIdentifier !== null && this.identityIdentifier !== undefined) {
    output.writeFieldBegin('identityIdentifier', Thrift.Type.STRING, 41);
    output.writeString(this.identityIdentifier);
    output.writeFieldEnd();
  }
  if (this.snsAccounts !== null && this.snsAccounts !== undefined) {
    output.writeFieldBegin('snsAccounts', Thrift.Type.MAP, 42);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.snsAccounts));
    for (var kiter320 in this.snsAccounts)
    {
      if (this.snsAccounts.hasOwnProperty(kiter320))
      {
        var viter321 = this.snsAccounts[kiter320];
        output.writeI32(kiter320);
        output.writeString(viter321);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.phoneRegistration !== null && this.phoneRegistration !== undefined) {
    output.writeFieldBegin('phoneRegistration', Thrift.Type.BOOL, 43);
    output.writeBool(this.phoneRegistration);
    output.writeFieldEnd();
  }
  if (this.emailConfirmationStatus !== null && this.emailConfirmationStatus !== undefined) {
    output.writeFieldBegin('emailConfirmationStatus', Thrift.Type.I32, 44);
    output.writeI32(this.emailConfirmationStatus);
    output.writeFieldEnd();
  }
  if (this.accountMigrationPincodeType !== null && this.accountMigrationPincodeType !== undefined) {
    output.writeFieldBegin('accountMigrationPincodeType', Thrift.Type.I32, 45);
    output.writeI32(this.accountMigrationPincodeType);
    output.writeFieldEnd();
  }
  if (this.enforcedInputAccountMigrationPincode !== null && this.enforcedInputAccountMigrationPincode !== undefined) {
    output.writeFieldBegin('enforcedInputAccountMigrationPincode', Thrift.Type.BOOL, 46);
    output.writeBool(this.enforcedInputAccountMigrationPincode);
    output.writeFieldEnd();
  }
  if (this.securityCenterSettingsType !== null && this.securityCenterSettingsType !== undefined) {
    output.writeFieldBegin('securityCenterSettingsType', Thrift.Type.I32, 47);
    output.writeI32(this.securityCenterSettingsType);
    output.writeFieldEnd();
  }
  if (this.allowUnregistrationSecondaryDevice !== null && this.allowUnregistrationSecondaryDevice !== undefined) {
    output.writeFieldBegin('allowUnregistrationSecondaryDevice', Thrift.Type.BOOL, 48);
    output.writeBool(this.allowUnregistrationSecondaryDevice);
    output.writeFieldEnd();
  }
  if (this.preferenceLocale !== null && this.preferenceLocale !== undefined) {
    output.writeFieldBegin('preferenceLocale', Thrift.Type.STRING, 50);
    output.writeString(this.preferenceLocale);
    output.writeFieldEnd();
  }
  if (this.customModes !== null && this.customModes !== undefined) {
    output.writeFieldBegin('customModes', Thrift.Type.MAP, 60);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.customModes));
    for (var kiter322 in this.customModes)
    {
      if (this.customModes.hasOwnProperty(kiter322))
      {
        var viter323 = this.customModes[kiter322];
        output.writeI32(kiter322);
        output.writeString(viter323);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e2eeEnable !== null && this.e2eeEnable !== undefined) {
    output.writeFieldBegin('e2eeEnable', Thrift.Type.BOOL, 61);
    output.writeBool(this.e2eeEnable);
    output.writeFieldEnd();
  }
  if (this.hitokotoBackupRequested !== null && this.hitokotoBackupRequested !== undefined) {
    output.writeFieldBegin('hitokotoBackupRequested', Thrift.Type.BOOL, 62);
    output.writeBool(this.hitokotoBackupRequested);
    output.writeFieldEnd();
  }
  if (this.agreementNearbyTime !== null && this.agreementNearbyTime !== undefined) {
    output.writeFieldBegin('agreementNearbyTime', Thrift.Type.I64, 66);
    output.writeI64(this.agreementNearbyTime);
    output.writeFieldEnd();
  }
  if (this.agreementSquareTime !== null && this.agreementSquareTime !== undefined) {
    output.writeFieldBegin('agreementSquareTime', Thrift.Type.I64, 67);
    output.writeI64(this.agreementSquareTime);
    output.writeFieldEnd();
  }
  if (this.botUseAgreementAcceptedAt !== null && this.botUseAgreementAcceptedAt !== undefined) {
    output.writeFieldBegin('botUseAgreementAcceptedAt', Thrift.Type.I64, 69);
    output.writeI64(this.botUseAgreementAcceptedAt);
    output.writeFieldEnd();
  }
  if (this.agreementShakeFunction !== null && this.agreementShakeFunction !== undefined) {
    output.writeFieldBegin('agreementShakeFunction', Thrift.Type.I64, 70);
    output.writeI64(this.agreementShakeFunction);
    output.writeFieldEnd();
  }
  if (this.agreementMobileContactName !== null && this.agreementMobileContactName !== undefined) {
    output.writeFieldBegin('agreementMobileContactName', Thrift.Type.I64, 71);
    output.writeI64(this.agreementMobileContactName);
    output.writeFieldEnd();
  }
  if (this.agreementSoundToText !== null && this.agreementSoundToText !== undefined) {
    output.writeFieldBegin('agreementSoundToText', Thrift.Type.I64, 73);
    output.writeI64(this.agreementSoundToText);
    output.writeFieldEnd();
  }
  if (this.privacyPolicyVersion !== null && this.privacyPolicyVersion !== undefined) {
    output.writeFieldBegin('privacyPolicyVersion', Thrift.Type.STRING, 74);
    output.writeString(this.privacyPolicyVersion);
    output.writeFieldEnd();
  }
  if (this.notificationEnable !== null && this.notificationEnable !== undefined) {
    output.writeFieldBegin('notificationEnable', Thrift.Type.BOOL, 10);
    output.writeBool(this.notificationEnable);
    output.writeFieldEnd();
  }
  if (this.agreementAdByWebAccess !== null && this.agreementAdByWebAccess !== undefined) {
    output.writeFieldBegin('agreementAdByWebAccess', Thrift.Type.I64, 75);
    output.writeI64(this.agreementAdByWebAccess);
    output.writeFieldEnd();
  }
  if (this.notificationMuteExpiration !== null && this.notificationMuteExpiration !== undefined) {
    output.writeFieldBegin('notificationMuteExpiration', Thrift.Type.I32, 11);
    output.writeI32(this.notificationMuteExpiration);
    output.writeFieldEnd();
  }
  if (this.agreementPhoneNumberMatching !== null && this.agreementPhoneNumberMatching !== undefined) {
    output.writeFieldBegin('agreementPhoneNumberMatching', Thrift.Type.I64, 76);
    output.writeI64(this.agreementPhoneNumberMatching);
    output.writeFieldEnd();
  }
  if (this.notificationNewMessage !== null && this.notificationNewMessage !== undefined) {
    output.writeFieldBegin('notificationNewMessage', Thrift.Type.BOOL, 12);
    output.writeBool(this.notificationNewMessage);
    output.writeFieldEnd();
  }
  if (this.agreementCommunicationInfo !== null && this.agreementCommunicationInfo !== undefined) {
    output.writeFieldBegin('agreementCommunicationInfo', Thrift.Type.I64, 77);
    output.writeI64(this.agreementCommunicationInfo);
    output.writeFieldEnd();
  }
  if (this.notificationGroupInvitation !== null && this.notificationGroupInvitation !== undefined) {
    output.writeFieldBegin('notificationGroupInvitation', Thrift.Type.BOOL, 13);
    output.writeBool(this.notificationGroupInvitation);
    output.writeFieldEnd();
  }
  if (this.agreementThingsWirelessCommunication !== null && this.agreementThingsWirelessCommunication !== undefined) {
    output.writeFieldBegin('agreementThingsWirelessCommunication', Thrift.Type.I64, 79);
    output.writeI64(this.agreementThingsWirelessCommunication);
    output.writeFieldEnd();
  }
  if (this.notificationShowMessage !== null && this.notificationShowMessage !== undefined) {
    output.writeFieldBegin('notificationShowMessage', Thrift.Type.BOOL, 14);
    output.writeBool(this.notificationShowMessage);
    output.writeFieldEnd();
  }
  if (this.agreementGdpr !== null && this.agreementGdpr !== undefined) {
    output.writeFieldBegin('agreementGdpr', Thrift.Type.I64, 80);
    output.writeI64(this.agreementGdpr);
    output.writeFieldEnd();
  }
  if (this.notificationIncomingCall !== null && this.notificationIncomingCall !== undefined) {
    output.writeFieldBegin('notificationIncomingCall', Thrift.Type.BOOL, 15);
    output.writeBool(this.notificationIncomingCall);
    output.writeFieldEnd();
  }
  if (this.agreementProvideLocation !== null && this.agreementProvideLocation !== undefined) {
    output.writeFieldBegin('agreementProvideLocation', Thrift.Type.I64, 82);
    output.writeI64(this.agreementProvideLocation);
    output.writeFieldEnd();
  }
  if (this.notificationSoundMessage !== null && this.notificationSoundMessage !== undefined) {
    output.writeFieldBegin('notificationSoundMessage', Thrift.Type.STRING, 16);
    output.writeString(this.notificationSoundMessage);
    output.writeFieldEnd();
  }
  if (this.agreementBeacon !== null && this.agreementBeacon !== undefined) {
    output.writeFieldBegin('agreementBeacon', Thrift.Type.I64, 83);
    output.writeI64(this.agreementBeacon);
    output.writeFieldEnd();
  }
  if (this.notificationSoundGroup !== null && this.notificationSoundGroup !== undefined) {
    output.writeFieldBegin('notificationSoundGroup', Thrift.Type.STRING, 17);
    output.writeString(this.notificationSoundGroup);
    output.writeFieldEnd();
  }
  if (this.agreementContentsSuggest !== null && this.agreementContentsSuggest !== undefined) {
    output.writeFieldBegin('agreementContentsSuggest', Thrift.Type.I64, 86);
    output.writeI64(this.agreementContentsSuggest);
    output.writeFieldEnd();
  }
  if (this.notificationDisabledWithSub !== null && this.notificationDisabledWithSub !== undefined) {
    output.writeFieldBegin('notificationDisabledWithSub', Thrift.Type.BOOL, 18);
    output.writeBool(this.notificationDisabledWithSub);
    output.writeFieldEnd();
  }
  if (this.agreementContentsSuggestDataCollection !== null && this.agreementContentsSuggestDataCollection !== undefined) {
    output.writeFieldBegin('agreementContentsSuggestDataCollection', Thrift.Type.I64, 87);
    output.writeI64(this.agreementContentsSuggestDataCollection);
    output.writeFieldEnd();
  }
  if (this.notificationPayment !== null && this.notificationPayment !== undefined) {
    output.writeFieldBegin('notificationPayment', Thrift.Type.BOOL, 19);
    output.writeBool(this.notificationPayment);
    output.writeFieldEnd();
  }
  if (this.agreementOcrImageCollection !== null && this.agreementOcrImageCollection !== undefined) {
    output.writeFieldBegin('agreementOcrImageCollection', Thrift.Type.I64, 90);
    output.writeI64(this.agreementOcrImageCollection);
    output.writeFieldEnd();
  }
  if (this.notificationMention !== null && this.notificationMention !== undefined) {
    output.writeFieldBegin('notificationMention', Thrift.Type.BOOL, 68);
    output.writeBool(this.notificationMention);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateChatResponse = module.exports.UpdateChatResponse = function(args) {
};
UpdateChatResponse.prototype = {};
UpdateChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateChatResponse.prototype.write = function(output) {
  output.writeStructBegin('UpdateChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateChatRequest = module.exports.UpdateChatRequest = function(args) {
  this.reqSeq = null;
  this.chat = null;
  this.updatedAttribute = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new ttypes.Chat(args.chat);
    }
    if (args.updatedAttribute !== undefined && args.updatedAttribute !== null) {
      this.updatedAttribute = args.updatedAttribute;
    }
  }
};
UpdateChatRequest.prototype = {};
UpdateChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new ttypes.Chat();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updatedAttribute = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateChatRequest.prototype.write = function(output) {
  output.writeStructBegin('UpdateChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 2);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  if (this.updatedAttribute !== null && this.updatedAttribute !== undefined) {
    output.writeFieldBegin('updatedAttribute', Thrift.Type.I32, 3);
    output.writeI32(this.updatedAttribute);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendRequestsInfo = module.exports.FriendRequestsInfo = function(args) {
  this.totalIncomingCount = null;
  this.totalOutgoingCount = null;
  this.recentIncomings = null;
  this.recentOutgoings = null;
  this.totalIncomingLimit = null;
  this.totalOutgoingLimit = null;
  if (args) {
    if (args.totalIncomingCount !== undefined && args.totalIncomingCount !== null) {
      this.totalIncomingCount = args.totalIncomingCount;
    }
    if (args.totalOutgoingCount !== undefined && args.totalOutgoingCount !== null) {
      this.totalOutgoingCount = args.totalOutgoingCount;
    }
    if (args.recentIncomings !== undefined && args.recentIncomings !== null) {
      this.recentIncomings = Thrift.copyList(args.recentIncomings, [ttypes.FriendRequest]);
    }
    if (args.recentOutgoings !== undefined && args.recentOutgoings !== null) {
      this.recentOutgoings = Thrift.copyList(args.recentOutgoings, [ttypes.FriendRequest]);
    }
    if (args.totalIncomingLimit !== undefined && args.totalIncomingLimit !== null) {
      this.totalIncomingLimit = args.totalIncomingLimit;
    }
    if (args.totalOutgoingLimit !== undefined && args.totalOutgoingLimit !== null) {
      this.totalOutgoingLimit = args.totalOutgoingLimit;
    }
  }
};
FriendRequestsInfo.prototype = {};
FriendRequestsInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalIncomingCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalOutgoingCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size324 = 0;
        var _rtmp3328;
        this.recentIncomings = [];
        var _etype327 = 0;
        _rtmp3328 = input.readListBegin();
        _etype327 = _rtmp3328.etype;
        _size324 = _rtmp3328.size;
        for (var _i329 = 0; _i329 < _size324; ++_i329)
        {
          var elem330 = null;
          elem330 = new ttypes.FriendRequest();
          elem330.read(input);
          this.recentIncomings.push(elem330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size331 = 0;
        var _rtmp3335;
        this.recentOutgoings = [];
        var _etype334 = 0;
        _rtmp3335 = input.readListBegin();
        _etype334 = _rtmp3335.etype;
        _size331 = _rtmp3335.size;
        for (var _i336 = 0; _i336 < _size331; ++_i336)
        {
          var elem337 = null;
          elem337 = new ttypes.FriendRequest();
          elem337.read(input);
          this.recentOutgoings.push(elem337);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.totalIncomingLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.totalOutgoingLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendRequestsInfo.prototype.write = function(output) {
  output.writeStructBegin('FriendRequestsInfo');
  if (this.totalIncomingCount !== null && this.totalIncomingCount !== undefined) {
    output.writeFieldBegin('totalIncomingCount', Thrift.Type.I32, 1);
    output.writeI32(this.totalIncomingCount);
    output.writeFieldEnd();
  }
  if (this.totalOutgoingCount !== null && this.totalOutgoingCount !== undefined) {
    output.writeFieldBegin('totalOutgoingCount', Thrift.Type.I32, 2);
    output.writeI32(this.totalOutgoingCount);
    output.writeFieldEnd();
  }
  if (this.recentIncomings !== null && this.recentIncomings !== undefined) {
    output.writeFieldBegin('recentIncomings', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.recentIncomings.length);
    for (var iter338 in this.recentIncomings)
    {
      if (this.recentIncomings.hasOwnProperty(iter338))
      {
        iter338 = this.recentIncomings[iter338];
        iter338.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recentOutgoings !== null && this.recentOutgoings !== undefined) {
    output.writeFieldBegin('recentOutgoings', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.recentOutgoings.length);
    for (var iter339 in this.recentOutgoings)
    {
      if (this.recentOutgoings.hasOwnProperty(iter339))
      {
        iter339 = this.recentOutgoings[iter339];
        iter339.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalIncomingLimit !== null && this.totalIncomingLimit !== undefined) {
    output.writeFieldBegin('totalIncomingLimit', Thrift.Type.I32, 5);
    output.writeI32(this.totalIncomingLimit);
    output.writeFieldEnd();
  }
  if (this.totalOutgoingLimit !== null && this.totalOutgoingLimit !== undefined) {
    output.writeFieldBegin('totalOutgoingLimit', Thrift.Type.I32, 6);
    output.writeI32(this.totalOutgoingLimit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteOtherFromChatRequest = module.exports.DeleteOtherFromChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.targetUserMids = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.targetUserMids !== undefined && args.targetUserMids !== null) {
      this.targetUserMids = Thrift.copyList(args.targetUserMids, [null]);
    }
  }
};
DeleteOtherFromChatRequest.prototype = {};
DeleteOtherFromChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size340 = 0;
        var _rtmp3344;
        this.targetUserMids = [];
        var _etype343 = 0;
        _rtmp3344 = input.readSetBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = input.readString();
          this.targetUserMids.push(elem346);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteOtherFromChatRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteOtherFromChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.targetUserMids !== null && this.targetUserMids !== undefined) {
    output.writeFieldBegin('targetUserMids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.targetUserMids.length);
    for (var iter347 in this.targetUserMids)
    {
      if (this.targetUserMids.hasOwnProperty(iter347))
      {
        iter347 = this.targetUserMids[iter347];
        output.writeString(iter347);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteOtherFromChatResponse = module.exports.DeleteOtherFromChatResponse = function(args) {
};
DeleteOtherFromChatResponse.prototype = {};
DeleteOtherFromChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteOtherFromChatResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteOtherFromChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteSelfFromChatResponse = module.exports.DeleteSelfFromChatResponse = function(args) {
};
DeleteSelfFromChatResponse.prototype = {};
DeleteSelfFromChatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSelfFromChatResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteSelfFromChatResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteSelfFromChatRequest = module.exports.DeleteSelfFromChatRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  this.lastSeenMessageDeliveredTime = null;
  this.lastSeenMessageId = null;
  this.lastMessageDeliveredTime = null;
  this.lastMessageId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.lastSeenMessageDeliveredTime !== undefined && args.lastSeenMessageDeliveredTime !== null) {
      this.lastSeenMessageDeliveredTime = args.lastSeenMessageDeliveredTime;
    }
    if (args.lastSeenMessageId !== undefined && args.lastSeenMessageId !== null) {
      this.lastSeenMessageId = args.lastSeenMessageId;
    }
    if (args.lastMessageDeliveredTime !== undefined && args.lastMessageDeliveredTime !== null) {
      this.lastMessageDeliveredTime = args.lastMessageDeliveredTime;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
DeleteSelfFromChatRequest.prototype = {};
DeleteSelfFromChatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastSeenMessageDeliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lastSeenMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastMessageDeliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteSelfFromChatRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteSelfFromChatRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.lastSeenMessageDeliveredTime !== null && this.lastSeenMessageDeliveredTime !== undefined) {
    output.writeFieldBegin('lastSeenMessageDeliveredTime', Thrift.Type.I64, 3);
    output.writeI64(this.lastSeenMessageDeliveredTime);
    output.writeFieldEnd();
  }
  if (this.lastSeenMessageId !== null && this.lastSeenMessageId !== undefined) {
    output.writeFieldBegin('lastSeenMessageId', Thrift.Type.STRING, 4);
    output.writeString(this.lastSeenMessageId);
    output.writeFieldEnd();
  }
  if (this.lastMessageDeliveredTime !== null && this.lastMessageDeliveredTime !== undefined) {
    output.writeFieldBegin('lastMessageDeliveredTime', Thrift.Type.I64, 5);
    output.writeI64(this.lastMessageDeliveredTime);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 6);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RejectChatInvitationResponse = module.exports.RejectChatInvitationResponse = function(args) {
};
RejectChatInvitationResponse.prototype = {};
RejectChatInvitationResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectChatInvitationResponse.prototype.write = function(output) {
  output.writeStructBegin('RejectChatInvitationResponse');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RejectChatInvitationRequest = module.exports.RejectChatInvitationRequest = function(args) {
  this.reqSeq = null;
  this.chatMid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
RejectChatInvitationRequest.prototype = {};
RejectChatInvitationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RejectChatInvitationRequest.prototype.write = function(output) {
  output.writeStructBegin('RejectChatInvitationRequest');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

