//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./talkservice_types');
//HELPER FUNCTIONS AND STRUCTURES

var TalkService_tryFriendRequest_args = function(args) {
  this.midOrEMid = null;
  this.method = null;
  this.friendRequestParams = null;
  if (args) {
    if (args.midOrEMid !== undefined && args.midOrEMid !== null) {
      this.midOrEMid = args.midOrEMid;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.friendRequestParams !== undefined && args.friendRequestParams !== null) {
      this.friendRequestParams = args.friendRequestParams;
    }
  }
};
TalkService_tryFriendRequest_args.prototype = {};
TalkService_tryFriendRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.midOrEMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.friendRequestParams = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_tryFriendRequest_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_tryFriendRequest_args');
  if (this.midOrEMid !== null && this.midOrEMid !== undefined) {
    output.writeFieldBegin('midOrEMid', Thrift.Type.STRING, 1);
    output.writeString(this.midOrEMid);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 2);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.friendRequestParams !== null && this.friendRequestParams !== undefined) {
    output.writeFieldBegin('friendRequestParams', Thrift.Type.STRING, 3);
    output.writeString(this.friendRequestParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_tryFriendRequest_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_tryFriendRequest_result.prototype = {};
TalkService_tryFriendRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_tryFriendRequest_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_tryFriendRequest_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateExtendedProfileAttribute_args = function(args) {
  this.reqSeq = null;
  this.attr = null;
  this.extendedProfile = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.extendedProfile !== undefined && args.extendedProfile !== null) {
      this.extendedProfile = new ttypes.ExtendedProfile(args.extendedProfile);
    }
  }
};
TalkService_updateExtendedProfileAttribute_args.prototype = {};
TalkService_updateExtendedProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.extendedProfile = new ttypes.ExtendedProfile();
        this.extendedProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateExtendedProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateExtendedProfileAttribute_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.I32, 2);
    output.writeI32(this.attr);
    output.writeFieldEnd();
  }
  if (this.extendedProfile !== null && this.extendedProfile !== undefined) {
    output.writeFieldBegin('extendedProfile', Thrift.Type.STRUCT, 3);
    this.extendedProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateExtendedProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateExtendedProfileAttribute_result.prototype = {};
TalkService_updateExtendedProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateExtendedProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateExtendedProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyAccountMigration_args = function(args) {
  this.migrationSessionId = null;
  if (args) {
    if (args.migrationSessionId !== undefined && args.migrationSessionId !== null) {
      this.migrationSessionId = args.migrationSessionId;
    }
  }
};
TalkService_verifyAccountMigration_args.prototype = {};
TalkService_verifyAccountMigration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.migrationSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyAccountMigration_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyAccountMigration_args');
  if (this.migrationSessionId !== null && this.migrationSessionId !== undefined) {
    output.writeFieldBegin('migrationSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.migrationSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyAccountMigration_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyAccountMigration_result.prototype = {};
TalkService_verifyAccountMigration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyAccountMigration_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyAccountMigration_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_reportLocation_args = function(args) {
  this.location = null;
  this.trigger = null;
  this.networkStatus = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Geolocation(args.location);
    }
    if (args.trigger !== undefined && args.trigger !== null) {
      this.trigger = args.trigger;
    }
    if (args.networkStatus !== undefined && args.networkStatus !== null) {
      this.networkStatus = new ttypes.ClientNetworkStatus(args.networkStatus);
    }
  }
};
TalkService_reportLocation_args.prototype = {};
TalkService_reportLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Geolocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.trigger = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.networkStatus = new ttypes.ClientNetworkStatus();
        this.networkStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportLocation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportLocation_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.trigger !== null && this.trigger !== undefined) {
    output.writeFieldBegin('trigger', Thrift.Type.I32, 2);
    output.writeI32(this.trigger);
    output.writeFieldEnd();
  }
  if (this.networkStatus !== null && this.networkStatus !== undefined) {
    output.writeFieldBegin('networkStatus', Thrift.Type.STRUCT, 3);
    this.networkStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_reportLocation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reportLocation_result.prototype = {};
TalkService_reportLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reportLocation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reportLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getPaidCallBalanceList_args = function(args) {
  this.language = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
TalkService_getPaidCallBalanceList_args.prototype = {};
TalkService_getPaidCallBalanceList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPaidCallBalanceList_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPaidCallBalanceList_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getPaidCallBalanceList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PaidCallBalance]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getPaidCallBalanceList_result.prototype = {};
TalkService_getPaidCallBalanceList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size348 = 0;
        var _rtmp3352;
        this.success = [];
        var _etype351 = 0;
        _rtmp3352 = input.readListBegin();
        _etype351 = _rtmp3352.etype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var elem354 = null;
          elem354 = new ttypes.PaidCallBalance();
          elem354.read(input);
          this.success.push(elem354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPaidCallBalanceList_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPaidCallBalanceList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter355 in this.success)
    {
      if (this.success.hasOwnProperty(iter355))
      {
        iter355 = this.success[iter355];
        iter355.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createChat_args = function(args) {
  this.requests = null;
  if (args) {
    if (args.requests !== undefined && args.requests !== null) {
      this.requests = new ttypes.CreateChatRequest(args.requests);
    }
  }
};
TalkService_createChat_args.prototype = {};
TalkService_createChat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.requests = new ttypes.CreateChatRequest();
        this.requests.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createChat_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createChat_args');
  if (this.requests !== null && this.requests !== undefined) {
    output.writeFieldBegin('requests', Thrift.Type.STRUCT, 1);
    this.requests.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createChat_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CreateChatResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createChat_result.prototype = {};
TalkService_createChat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateChatResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createChat_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createChat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactsByMid_args = function(args) {
  this.reqSeq = null;
  this.mid = null;
  this.type = null;
  this.reference = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findAndAddContactsByMid_args.prototype = {};
TalkService_findAndAddContactsByMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByMid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByMid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 4);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactsByMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactsByMid_result.prototype = {};
TalkService_findAndAddContactsByMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size356 = 0;
        var _rtmp3360;
        this.success = {};
        var _ktype357 = 0;
        var _vtype358 = 0;
        _rtmp3360 = input.readMapBegin();
        _ktype357 = _rtmp3360.ktype;
        _vtype358 = _rtmp3360.vtype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var key362 = null;
          var val363 = null;
          key362 = input.readString();
          val363 = new ttypes.Contact();
          val363.read(input);
          this.success[key362] = val363;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByMid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter364 in this.success)
    {
      if (this.success.hasOwnProperty(kiter364))
      {
        var viter365 = this.success[kiter364];
        output.writeString(kiter364);
        viter365.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_generateUserTicket_args = function(args) {
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
TalkService_generateUserTicket_args.prototype = {};
TalkService_generateUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_generateUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_generateUserTicket_args');
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_generateUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Ticket(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_generateUserTicket_result.prototype = {};
TalkService_generateUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Ticket();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_generateUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_generateUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getContacts_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
TalkService_getContacts_args.prototype = {};
TalkService_getContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.ids = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = input.readString();
          this.ids.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContacts_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContacts_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter373 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter373))
      {
        iter373 = this.ids[iter373];
        output.writeString(iter373);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getContacts_result.prototype = {};
TalkService_getContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size374 = 0;
        var _rtmp3378;
        this.success = [];
        var _etype377 = 0;
        _rtmp3378 = input.readListBegin();
        _etype377 = _rtmp3378.etype;
        _size374 = _rtmp3378.size;
        for (var _i379 = 0; _i379 < _size374; ++_i379)
        {
          var elem380 = null;
          elem380 = new ttypes.Contact();
          elem380.read(input);
          this.success.push(elem380);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContacts_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter381 in this.success)
    {
      if (this.success.hasOwnProperty(iter381))
      {
        iter381 = this.success[iter381];
        iter381.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getFollowers_args = function(args) {
  this.getFollowersRequest = null;
  if (args) {
    if (args.getFollowersRequest !== undefined && args.getFollowersRequest !== null) {
      this.getFollowersRequest = new ttypes.GetFollowersRequest(args.getFollowersRequest);
    }
  }
};
TalkService_getFollowers_args.prototype = {};
TalkService_getFollowers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.getFollowersRequest = new ttypes.GetFollowersRequest();
        this.getFollowersRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFollowers_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFollowers_args');
  if (this.getFollowersRequest !== null && this.getFollowersRequest !== undefined) {
    output.writeFieldBegin('getFollowersRequest', Thrift.Type.STRUCT, 2);
    this.getFollowersRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getFollowers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetFollowersResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getFollowers_result.prototype = {};
TalkService_getFollowers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetFollowersResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFollowers_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFollowers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getLastE2EEPublicKeys_args = function(args) {
  this.chatMid = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
TalkService_getLastE2EEPublicKeys_args.prototype = {};
TalkService_getLastE2EEPublicKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastE2EEPublicKeys_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastE2EEPublicKeys_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getLastE2EEPublicKeys_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.E2EEPublicKey]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getLastE2EEPublicKeys_result.prototype = {};
TalkService_getLastE2EEPublicKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size382 = 0;
        var _rtmp3386;
        this.success = {};
        var _ktype383 = 0;
        var _vtype384 = 0;
        _rtmp3386 = input.readMapBegin();
        _ktype383 = _rtmp3386.ktype;
        _vtype384 = _rtmp3386.vtype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var key388 = null;
          var val389 = null;
          key388 = input.readString();
          val389 = new ttypes.E2EEPublicKey();
          val389.read(input);
          this.success[key388] = val389;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastE2EEPublicKeys_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastE2EEPublicKeys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter390 in this.success)
    {
      if (this.success.hasOwnProperty(kiter390))
      {
        var viter391 = this.success[kiter390];
        output.writeString(kiter390);
        viter391.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_leaveRoom_args = function(args) {
  this.reqSeq = null;
  this.roomId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
TalkService_leaveRoom_args.prototype = {};
TalkService_leaveRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveRoom_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_leaveRoom_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_leaveRoom_result.prototype = {};
TalkService_leaveRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveRoom_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveRoom_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_notifyRegistrationComplete_args = function(args) {
  this.udidHash = null;
  this.applicationTypeWithExtensions = null;
  if (args) {
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.applicationTypeWithExtensions !== undefined && args.applicationTypeWithExtensions !== null) {
      this.applicationTypeWithExtensions = args.applicationTypeWithExtensions;
    }
  }
};
TalkService_notifyRegistrationComplete_args.prototype = {};
TalkService_notifyRegistrationComplete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.applicationTypeWithExtensions = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyRegistrationComplete_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyRegistrationComplete_args');
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 2);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.applicationTypeWithExtensions !== null && this.applicationTypeWithExtensions !== undefined) {
    output.writeFieldBegin('applicationTypeWithExtensions', Thrift.Type.STRING, 3);
    output.writeString(this.applicationTypeWithExtensions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_notifyRegistrationComplete_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifyRegistrationComplete_result.prototype = {};
TalkService_notifyRegistrationComplete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyRegistrationComplete_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyRegistrationComplete_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeChatRoomAnnouncement_args = function(args) {
  this.reqSeq = null;
  this.chatRoomMid = null;
  this.announcementSeq = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatRoomMid !== undefined && args.chatRoomMid !== null) {
      this.chatRoomMid = args.chatRoomMid;
    }
    if (args.announcementSeq !== undefined && args.announcementSeq !== null) {
      this.announcementSeq = args.announcementSeq;
    }
  }
};
TalkService_removeChatRoomAnnouncement_args.prototype = {};
TalkService_removeChatRoomAnnouncement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.announcementSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeChatRoomAnnouncement_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeChatRoomAnnouncement_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatRoomMid !== null && this.chatRoomMid !== undefined) {
    output.writeFieldBegin('chatRoomMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatRoomMid);
    output.writeFieldEnd();
  }
  if (this.announcementSeq !== null && this.announcementSeq !== undefined) {
    output.writeFieldBegin('announcementSeq', Thrift.Type.I64, 3);
    output.writeI64(this.announcementSeq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeChatRoomAnnouncement_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeChatRoomAnnouncement_result.prototype = {};
TalkService_removeChatRoomAnnouncement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeChatRoomAnnouncement_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeChatRoomAnnouncement_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendChatRemoved_args = function(args) {
  this.seq = null;
  this.chatMid = null;
  this.lastMessageId = null;
  this.sessionId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_sendChatRemoved_args.prototype = {};
TalkService_sendChatRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.sessionId = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatRemoved_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 4);
    output.writeByte(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendChatRemoved_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendChatRemoved_result.prototype = {};
TalkService_sendChatRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatRemoved_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updatePassword_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
TalkService_updatePassword_args.prototype = {};
TalkService_updatePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updatePassword_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updatePassword_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updatePassword_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updatePassword_result.prototype = {};
TalkService_updatePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updatePassword_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updatePassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unblockContact_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  this.reference = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_unblockContact_args.prototype = {};
TalkService_unblockContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockContact_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockContact_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 3);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unblockContact_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unblockContact_result.prototype = {};
TalkService_unblockContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockContact_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockContact_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateGroupPreferenceAttribute_args = function(args) {
  this.reqSeq = null;
  this.groupMid = null;
  this.updatedAttrs = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
    if (args.updatedAttrs !== undefined && args.updatedAttrs !== null) {
      this.updatedAttrs = Thrift.copyMap(args.updatedAttrs, [null]);
    }
  }
};
TalkService_updateGroupPreferenceAttribute_args.prototype = {};
TalkService_updateGroupPreferenceAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size392 = 0;
        var _rtmp3396;
        this.updatedAttrs = {};
        var _ktype393 = 0;
        var _vtype394 = 0;
        _rtmp3396 = input.readMapBegin();
        _ktype393 = _rtmp3396.ktype;
        _vtype394 = _rtmp3396.vtype;
        _size392 = _rtmp3396.size;
        for (var _i397 = 0; _i397 < _size392; ++_i397)
        {
          var key398 = null;
          var val399 = null;
          key398 = input.readI32();
          val399 = input.readString();
          this.updatedAttrs[key398] = val399;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroupPreferenceAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroupPreferenceAttribute_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 2);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  if (this.updatedAttrs !== null && this.updatedAttrs !== undefined) {
    output.writeFieldBegin('updatedAttrs', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.updatedAttrs));
    for (var kiter400 in this.updatedAttrs)
    {
      if (this.updatedAttrs.hasOwnProperty(kiter400))
      {
        var viter401 = this.updatedAttrs[kiter400];
        output.writeI32(kiter400);
        output.writeString(viter401);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateGroupPreferenceAttribute_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateGroupPreferenceAttribute_result.prototype = {};
TalkService_updateGroupPreferenceAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroupPreferenceAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroupPreferenceAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyIdentityCredentialWithResult_args = function(args) {
  this.identityCredential = null;
  this.migrationPincodeSessionId = null;
  if (args) {
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new ttypes.IdentityCredential(args.identityCredential);
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
  }
};
TalkService_verifyIdentityCredentialWithResult_args.prototype = {};
TalkService_verifyIdentityCredentialWithResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new ttypes.IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyIdentityCredentialWithResult_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyIdentityCredentialWithResult_args');
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 2);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 3);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyIdentityCredentialWithResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserAuthStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyIdentityCredentialWithResult_result.prototype = {};
TalkService_verifyIdentityCredentialWithResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserAuthStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyIdentityCredentialWithResult_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyIdentityCredentialWithResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_requestCleanupUserProvidedData_args = function(args) {
  this.dataTypes = null;
  if (args) {
    if (args.dataTypes !== undefined && args.dataTypes !== null) {
      this.dataTypes = Thrift.copyList(args.dataTypes, [null]);
    }
  }
};
TalkService_requestCleanupUserProvidedData_args.prototype = {};
TalkService_requestCleanupUserProvidedData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size402 = 0;
        var _rtmp3406;
        this.dataTypes = [];
        var _etype405 = 0;
        _rtmp3406 = input.readSetBegin();
        _etype405 = _rtmp3406.etype;
        _size402 = _rtmp3406.size;
        for (var _i407 = 0; _i407 < _size402; ++_i407)
        {
          var elem408 = null;
          elem408 = input.readI32();
          this.dataTypes.push(elem408);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestCleanupUserProvidedData_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestCleanupUserProvidedData_args');
  if (this.dataTypes !== null && this.dataTypes !== undefined) {
    output.writeFieldBegin('dataTypes', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.dataTypes.length);
    for (var iter409 in this.dataTypes)
    {
      if (this.dataTypes.hasOwnProperty(iter409))
      {
        iter409 = this.dataTypes[iter409];
        output.writeI32(iter409);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_requestCleanupUserProvidedData_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_requestCleanupUserProvidedData_result.prototype = {};
TalkService_requestCleanupUserProvidedData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestCleanupUserProvidedData_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestCleanupUserProvidedData_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getBuddyStatusBarV2_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetBuddyStatusBarV2Request(args.request);
    }
  }
};
TalkService_getBuddyStatusBarV2_args.prototype = {};
TalkService_getBuddyStatusBarV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetBuddyStatusBarV2Request();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBuddyStatusBarV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBuddyStatusBarV2_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getBuddyStatusBarV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuddyStatusBar(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBuddyStatusBarV2_result.prototype = {};
TalkService_getBuddyStatusBarV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuddyStatusBar();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBuddyStatusBarV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBuddyStatusBarV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getPaidCallHistory_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
TalkService_getPaidCallHistory_args.prototype = {};
TalkService_getPaidCallHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPaidCallHistory_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPaidCallHistory_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getPaidCallHistory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaidCallHistoryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getPaidCallHistory_result.prototype = {};
TalkService_getPaidCallHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaidCallHistoryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPaidCallHistory_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPaidCallHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_blockContact_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_blockContact_args.prototype = {};
TalkService_blockContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockContact_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockContact_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_blockContact_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_blockContact_result.prototype = {};
TalkService_blockContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockContact_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockContact_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createGroupV2_args = function(args) {
  this.seq = null;
  this.name = null;
  this.contactIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_createGroupV2_args.prototype = {};
TalkService_createGroupV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size410 = 0;
        var _rtmp3414;
        this.contactIds = [];
        var _etype413 = 0;
        _rtmp3414 = input.readListBegin();
        _etype413 = _rtmp3414.etype;
        _size410 = _rtmp3414.size;
        for (var _i415 = 0; _i415 < _size410; ++_i415)
        {
          var elem416 = null;
          elem416 = input.readString();
          this.contactIds.push(elem416);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createGroupV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createGroupV2_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter417 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter417))
      {
        iter417 = this.contactIds[iter417];
        output.writeString(iter417);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createGroupV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createGroupV2_result.prototype = {};
TalkService_createGroupV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createGroupV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createGroupV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactsByPhone_args = function(args) {
  this.reqSeq = null;
  this.phones = null;
  this.reference = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findAndAddContactsByPhone_args.prototype = {};
TalkService_findAndAddContactsByPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size418 = 0;
        var _rtmp3422;
        this.phones = [];
        var _etype421 = 0;
        _rtmp3422 = input.readSetBegin();
        _etype421 = _rtmp3422.etype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          var elem424 = null;
          elem424 = input.readString();
          this.phones.push(elem424);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByPhone_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByPhone_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter425 in this.phones)
    {
      if (this.phones.hasOwnProperty(iter425))
      {
        iter425 = this.phones[iter425];
        output.writeString(iter425);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 3);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactsByPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactsByPhone_result.prototype = {};
TalkService_findAndAddContactsByPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size426 = 0;
        var _rtmp3430;
        this.success = {};
        var _ktype427 = 0;
        var _vtype428 = 0;
        _rtmp3430 = input.readMapBegin();
        _ktype427 = _rtmp3430.ktype;
        _vtype428 = _rtmp3430.vtype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          var key432 = null;
          var val433 = null;
          key432 = input.readString();
          val433 = new ttypes.Contact();
          val433.read(input);
          this.success[key432] = val433;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByPhone_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter434 in this.success)
    {
      if (this.success.hasOwnProperty(kiter434))
      {
        var viter435 = this.success[kiter434];
        output.writeString(kiter434);
        viter435.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getAcceptedProximityMatches_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_getAcceptedProximityMatches_args.prototype = {};
TalkService_getAcceptedProximityMatches_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAcceptedProximityMatches_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAcceptedProximityMatches_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getAcceptedProximityMatches_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getAcceptedProximityMatches_result.prototype = {};
TalkService_getAcceptedProximityMatches_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size436 = 0;
        var _rtmp3440;
        this.success = [];
        var _etype439 = 0;
        _rtmp3440 = input.readSetBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = input.readString();
          this.success.push(elem442);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAcceptedProximityMatches_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAcceptedProximityMatches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter443 in this.success)
    {
      if (this.success.hasOwnProperty(iter443))
      {
        iter443 = this.success[iter443];
        output.writeString(iter443);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChatRoomAnnouncementsBulk_args = function(args) {
  this.chatRoomMids = null;
  this.syncReason = null;
  if (args) {
    if (args.chatRoomMids !== undefined && args.chatRoomMids !== null) {
      this.chatRoomMids = Thrift.copyList(args.chatRoomMids, [null]);
    }
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getChatRoomAnnouncementsBulk_args.prototype = {};
TalkService_getChatRoomAnnouncementsBulk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.chatRoomMids = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = input.readString();
          this.chatRoomMids.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncementsBulk_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncementsBulk_args');
  if (this.chatRoomMids !== null && this.chatRoomMids !== undefined) {
    output.writeFieldBegin('chatRoomMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.chatRoomMids.length);
    for (var iter451 in this.chatRoomMids)
    {
      if (this.chatRoomMids.hasOwnProperty(iter451))
      {
        iter451 = this.chatRoomMids[iter451];
        output.writeString(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 3);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChatRoomAnnouncementsBulk_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, ttypes.ChatRoomAnnouncement]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getChatRoomAnnouncementsBulk_result.prototype = {};
TalkService_getChatRoomAnnouncementsBulk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size452 = 0;
        var _rtmp3456;
        this.success = {};
        var _ktype453 = 0;
        var _vtype454 = 0;
        _rtmp3456 = input.readMapBegin();
        _ktype453 = _rtmp3456.ktype;
        _vtype454 = _rtmp3456.vtype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var key458 = null;
          var val459 = null;
          key458 = input.readString();
          var _size460 = 0;
          var _rtmp3464;
          val459 = [];
          var _etype463 = 0;
          _rtmp3464 = input.readListBegin();
          _etype463 = _rtmp3464.etype;
          _size460 = _rtmp3464.size;
          for (var _i465 = 0; _i465 < _size460; ++_i465)
          {
            var elem466 = null;
            elem466 = new ttypes.ChatRoomAnnouncement();
            elem466.read(input);
            val459.push(elem466);
          }
          input.readListEnd();
          this.success[key458] = val459;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncementsBulk_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncementsBulk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter467 in this.success)
    {
      if (this.success.hasOwnProperty(kiter467))
      {
        var viter468 = this.success[kiter467];
        output.writeString(kiter467);
        output.writeListBegin(Thrift.Type.STRUCT, viter468.length);
        for (var iter469 in viter468)
        {
          if (viter468.hasOwnProperty(iter469))
          {
            iter469 = viter468[iter469];
            iter469.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getCountries_args = function(args) {
  this.countryGroup = null;
  if (args) {
    if (args.countryGroup !== undefined && args.countryGroup !== null) {
      this.countryGroup = args.countryGroup;
    }
  }
};
TalkService_getCountries_args.prototype = {};
TalkService_getCountries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.countryGroup = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCountries_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCountries_args');
  if (this.countryGroup !== null && this.countryGroup !== undefined) {
    output.writeFieldBegin('countryGroup', Thrift.Type.I32, 2);
    output.writeI32(this.countryGroup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getCountries_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getCountries_result.prototype = {};
TalkService_getCountries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size470 = 0;
        var _rtmp3474;
        this.success = [];
        var _etype473 = 0;
        _rtmp3474 = input.readSetBegin();
        _etype473 = _rtmp3474.etype;
        _size470 = _rtmp3474.size;
        for (var _i475 = 0; _i475 < _size470; ++_i475)
        {
          var elem476 = null;
          elem476 = input.readString();
          this.success.push(elem476);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCountries_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCountries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter477 in this.success)
    {
      if (this.success.hasOwnProperty(iter477))
      {
        iter477 = this.success[iter477];
        output.writeString(iter477);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getFollowings_args = function(args) {
  this.getFollowingsRequest = null;
  if (args) {
    if (args.getFollowingsRequest !== undefined && args.getFollowingsRequest !== null) {
      this.getFollowingsRequest = new ttypes.GetFollowingsRequest(args.getFollowingsRequest);
    }
  }
};
TalkService_getFollowings_args.prototype = {};
TalkService_getFollowings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.getFollowingsRequest = new ttypes.GetFollowingsRequest();
        this.getFollowingsRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFollowings_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFollowings_args');
  if (this.getFollowingsRequest !== null && this.getFollowingsRequest !== undefined) {
    output.writeFieldBegin('getFollowingsRequest', Thrift.Type.STRUCT, 2);
    this.getFollowingsRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getFollowings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetFollowingsResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getFollowings_result.prototype = {};
TalkService_getFollowings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetFollowingsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFollowings_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFollowings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getLastOpRevision_args = function(args) {
};
TalkService_getLastOpRevision_args.prototype = {};
TalkService_getLastOpRevision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastOpRevision_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastOpRevision_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getLastOpRevision_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getLastOpRevision_result.prototype = {};
TalkService_getLastOpRevision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getLastOpRevision_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getLastOpRevision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRingbackTone_args = function(args) {
};
TalkService_getRingbackTone_args.prototype = {};
TalkService_getRingbackTone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRingbackTone_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRingbackTone_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRingbackTone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRingbackTone_result.prototype = {};
TalkService_getRingbackTone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRingbackTone_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRingbackTone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerWithPhoneNumber_args = function(args) {
  this.sessionId = null;
  this.migrationPincodeSessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
  }
};
TalkService_registerWithPhoneNumber_args.prototype = {};
TalkService_registerWithPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithPhoneNumber_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerWithPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RegisterWithPhoneNumberResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithPhoneNumber_result.prototype = {};
TalkService_registerWithPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RegisterWithPhoneNumberResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_report_args = function(args) {
  this.syncOpRevision = null;
  this.category = null;
  this.report = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.report !== undefined && args.report !== null) {
      this.report = args.report;
    }
  }
};
TalkService_report_args.prototype = {};
TalkService_report_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.report = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_report_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_report_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.report !== null && this.report !== undefined) {
    output.writeFieldBegin('report', Thrift.Type.STRING, 4);
    output.writeString(this.report);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_report_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_report_result.prototype = {};
TalkService_report_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_report_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_report_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unblockRecommendation_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_unblockRecommendation_args.prototype = {};
TalkService_unblockRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockRecommendation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unblockRecommendation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unblockRecommendation_result.prototype = {};
TalkService_unblockRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unblockRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unblockRecommendation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateGroup_args = function(args) {
  this.reqSeq = null;
  this.group = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = new ttypes.Group(args.group);
    }
  }
};
TalkService_updateGroup_args.prototype = {};
TalkService_updateGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new ttypes.Group();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 2);
    this.group.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateGroup_result.prototype = {};
TalkService_updateGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findBuddyContactsByQuery_args = function(args) {
  this.language = null;
  this.country = null;
  this.query = null;
  this.fromIndex = null;
  this.count = null;
  this.requestSource = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.fromIndex !== undefined && args.fromIndex !== null) {
      this.fromIndex = args.fromIndex;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.requestSource !== undefined && args.requestSource !== null) {
      this.requestSource = args.requestSource;
    }
  }
};
TalkService_findBuddyContactsByQuery_args.prototype = {};
TalkService_findBuddyContactsByQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fromIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.requestSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findBuddyContactsByQuery_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findBuddyContactsByQuery_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 4);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.fromIndex !== null && this.fromIndex !== undefined) {
    output.writeFieldBegin('fromIndex', Thrift.Type.I32, 5);
    output.writeI32(this.fromIndex);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 6);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.requestSource !== null && this.requestSource !== undefined) {
    output.writeFieldBegin('requestSource', Thrift.Type.I32, 7);
    output.writeI32(this.requestSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findBuddyContactsByQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.BuddySearchResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findBuddyContactsByQuery_result.prototype = {};
TalkService_findBuddyContactsByQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size478 = 0;
        var _rtmp3482;
        this.success = [];
        var _etype481 = 0;
        _rtmp3482 = input.readListBegin();
        _etype481 = _rtmp3482.etype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          var elem484 = null;
          elem484 = new ttypes.BuddySearchResult();
          elem484.read(input);
          this.success.push(elem484);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findBuddyContactsByQuery_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findBuddyContactsByQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter485 in this.success)
    {
      if (this.success.hasOwnProperty(iter485))
      {
        iter485 = this.success[iter485];
        iter485.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getPaidCallMetadata_args = function(args) {
  this.language = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
TalkService_getPaidCallMetadata_args.prototype = {};
TalkService_getPaidCallMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPaidCallMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPaidCallMetadata_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getPaidCallMetadata_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaidCallMetadataResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getPaidCallMetadata_result.prototype = {};
TalkService_getPaidCallMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaidCallMetadataResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getPaidCallMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getPaidCallMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_blockRecommendation_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_blockRecommendation_args.prototype = {};
TalkService_blockRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockRecommendation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_blockRecommendation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_blockRecommendation_result.prototype = {};
TalkService_blockRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_blockRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_blockRecommendation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactsByUserid_args = function(args) {
  this.reqSeq = null;
  this.searchId = null;
  this.reference = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findAndAddContactsByUserid_args.prototype = {};
TalkService_findAndAddContactsByUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByUserid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByUserid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 2);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 3);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactsByUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactsByUserid_result.prototype = {};
TalkService_findAndAddContactsByUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size486 = 0;
        var _rtmp3490;
        this.success = {};
        var _ktype487 = 0;
        var _vtype488 = 0;
        _rtmp3490 = input.readMapBegin();
        _ktype487 = _rtmp3490.ktype;
        _vtype488 = _rtmp3490.vtype;
        _size486 = _rtmp3490.size;
        for (var _i491 = 0; _i491 < _size486; ++_i491)
        {
          var key492 = null;
          var val493 = null;
          key492 = input.readString();
          val493 = new ttypes.Contact();
          val493.read(input);
          this.success[key492] = val493;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactsByUserid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactsByUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter494 in this.success)
    {
      if (this.success.hasOwnProperty(kiter494))
      {
        var viter495 = this.success[kiter494];
        output.writeString(kiter494);
        viter495.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getAllChatMids_args = function(args) {
  this.request = null;
  this.syncReason = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetAllChatMidsRequest(args.request);
    }
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getAllChatMids_args.prototype = {};
TalkService_getAllChatMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetAllChatMidsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAllChatMids_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAllChatMids_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 2);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getAllChatMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetAllChatMidsResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getAllChatMids_result.prototype = {};
TalkService_getAllChatMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetAllChatMidsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAllChatMids_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAllChatMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChatRoomAnnouncements_args = function(args) {
  this.chatRoomMids = null;
  if (args) {
    if (args.chatRoomMids !== undefined && args.chatRoomMids !== null) {
      this.chatRoomMids = args.chatRoomMids;
    }
  }
};
TalkService_getChatRoomAnnouncements_args.prototype = {};
TalkService_getChatRoomAnnouncements_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomMids = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncements_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncements_args');
  if (this.chatRoomMids !== null && this.chatRoomMids !== undefined) {
    output.writeFieldBegin('chatRoomMids', Thrift.Type.STRING, 2);
    output.writeString(this.chatRoomMids);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChatRoomAnnouncements_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ChatRoomAnnouncement]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getChatRoomAnnouncements_result.prototype = {};
TalkService_getChatRoomAnnouncements_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size496 = 0;
        var _rtmp3500;
        this.success = [];
        var _etype499 = 0;
        _rtmp3500 = input.readListBegin();
        _etype499 = _rtmp3500.etype;
        _size496 = _rtmp3500.size;
        for (var _i501 = 0; _i501 < _size496; ++_i501)
        {
          var elem502 = null;
          elem502 = new ttypes.ChatRoomAnnouncement();
          elem502.read(input);
          this.success.push(elem502);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomAnnouncements_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomAnnouncements_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter503 in this.success)
    {
      if (this.success.hasOwnProperty(iter503))
      {
        iter503 = this.success[iter503];
        iter503.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getCountryWithRequestIp_args = function(args) {
};
TalkService_getCountryWithRequestIp_args.prototype = {};
TalkService_getCountryWithRequestIp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCountryWithRequestIp_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCountryWithRequestIp_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getCountryWithRequestIp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getCountryWithRequestIp_result.prototype = {};
TalkService_getCountryWithRequestIp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCountryWithRequestIp_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCountryWithRequestIp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getFriendRequests_args = function(args) {
  this.direction = null;
  this.lastSeenSeqId = null;
  if (args) {
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.lastSeenSeqId !== undefined && args.lastSeenSeqId !== null) {
      this.lastSeenSeqId = args.lastSeenSeqId;
    }
  }
};
TalkService_getFriendRequests_args.prototype = {};
TalkService_getFriendRequests_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSeenSeqId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFriendRequests_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFriendRequests_args');
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 1);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.lastSeenSeqId !== null && this.lastSeenSeqId !== undefined) {
    output.writeFieldBegin('lastSeenSeqId', Thrift.Type.I64, 2);
    output.writeI64(this.lastSeenSeqId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getFriendRequests_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FriendRequest]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getFriendRequests_result.prototype = {};
TalkService_getFriendRequests_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size504 = 0;
        var _rtmp3508;
        this.success = [];
        var _etype507 = 0;
        _rtmp3508 = input.readListBegin();
        _etype507 = _rtmp3508.etype;
        _size504 = _rtmp3508.size;
        for (var _i509 = 0; _i509 < _size504; ++_i509)
        {
          var elem510 = null;
          elem510 = new ttypes.FriendRequest();
          elem510.read(input);
          this.success.push(elem510);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getFriendRequests_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getFriendRequests_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter511 in this.success)
    {
      if (this.success.hasOwnProperty(iter511))
      {
        iter511 = this.success[iter511];
        iter511.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRingtone_args = function(args) {
};
TalkService_getRingtone_args.prototype = {};
TalkService_getRingtone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRingtone_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRingtone_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRingtone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Ringtone(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRingtone_result.prototype = {};
TalkService_getRingtone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Ringtone();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRingtone_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRingtone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_notifySleep_args = function(args) {
  this.lastRev = null;
  this.badge = null;
  if (args) {
    if (args.lastRev !== undefined && args.lastRev !== null) {
      this.lastRev = args.lastRev;
    }
    if (args.badge !== undefined && args.badge !== null) {
      this.badge = args.badge;
    }
  }
};
TalkService_notifySleep_args.prototype = {};
TalkService_notifySleep_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.badge = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifySleep_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifySleep_args');
  if (this.lastRev !== null && this.lastRev !== undefined) {
    output.writeFieldBegin('lastRev', Thrift.Type.I64, 2);
    output.writeI64(this.lastRev);
    output.writeFieldEnd();
  }
  if (this.badge !== null && this.badge !== undefined) {
    output.writeFieldBegin('badge', Thrift.Type.I32, 3);
    output.writeI32(this.badge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_notifySleep_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifySleep_result.prototype = {};
TalkService_notifySleep_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifySleep_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifySleep_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerWithSnsIdAndIdentityCredential_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.identityCredential = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.migrationPincodeSessionId = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new ttypes.IdentityCredential(args.identityCredential);
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
  }
};
TalkService_registerWithSnsIdAndIdentityCredential_args.prototype = {};
TalkService_registerWithSnsIdAndIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new ttypes.IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsIdAndIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsIdAndIdentityCredential_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 4);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 5);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 6);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 7);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 8);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerWithSnsIdAndIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithSnsIdAndIdentityCredential_result.prototype = {};
TalkService_registerWithSnsIdAndIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsIdAndIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsIdAndIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeFollower_args = function(args) {
  this.removeFollowerRequest = null;
  if (args) {
    if (args.removeFollowerRequest !== undefined && args.removeFollowerRequest !== null) {
      this.removeFollowerRequest = new ttypes.RemoveFollowerRequest(args.removeFollowerRequest);
    }
  }
};
TalkService_removeFollower_args.prototype = {};
TalkService_removeFollower_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeFollowerRequest = new ttypes.RemoveFollowerRequest();
        this.removeFollowerRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeFollower_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeFollower_args');
  if (this.removeFollowerRequest !== null && this.removeFollowerRequest !== undefined) {
    output.writeFieldBegin('removeFollowerRequest', Thrift.Type.STRUCT, 2);
    this.removeFollowerRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeFollower_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeFollower_result.prototype = {};
TalkService_removeFollower_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeFollower_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeFollower_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_requestAccountPasswordReset_args = function(args) {
  this.provider = null;
  this.identifier = null;
  this.locale = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
TalkService_requestAccountPasswordReset_args.prototype = {};
TalkService_requestAccountPasswordReset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestAccountPasswordReset_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestAccountPasswordReset_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 4);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 5);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_requestAccountPasswordReset_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_requestAccountPasswordReset_result.prototype = {};
TalkService_requestAccountPasswordReset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_requestAccountPasswordReset_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_requestAccountPasswordReset_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendEchoPush_args = function(args) {
  this.text = null;
  if (args) {
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
TalkService_sendEchoPush_args.prototype = {};
TalkService_sendEchoPush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendEchoPush_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendEchoPush_args');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendEchoPush_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendEchoPush_result.prototype = {};
TalkService_sendEchoPush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendEchoPush_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendEchoPush_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unfollow_args = function(args) {
  this.unfollowRequest = null;
  if (args) {
    if (args.unfollowRequest !== undefined && args.unfollowRequest !== null) {
      this.unfollowRequest = new ttypes.UnfollowRequest(args.unfollowRequest);
    }
  }
};
TalkService_unfollow_args.prototype = {};
TalkService_unfollow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unfollowRequest = new ttypes.UnfollowRequest();
        this.unfollowRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unfollow_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unfollow_args');
  if (this.unfollowRequest !== null && this.unfollowRequest !== undefined) {
    output.writeFieldBegin('unfollowRequest', Thrift.Type.STRUCT, 2);
    this.unfollowRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unfollow_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unfollow_result.prototype = {};
TalkService_unfollow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unfollow_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unfollow_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoGroupCall_args = function(args) {
  this.chatMid = null;
  this.memberMids = null;
  this.mediaType = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.mediaType !== undefined && args.mediaType !== null) {
      this.mediaType = args.mediaType;
    }
  }
};
TalkService_inviteIntoGroupCall_args.prototype = {};
TalkService_inviteIntoGroupCall_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size512 = 0;
        var _rtmp3516;
        this.memberMids = [];
        var _etype515 = 0;
        _rtmp3516 = input.readListBegin();
        _etype515 = _rtmp3516.etype;
        _size512 = _rtmp3516.size;
        for (var _i517 = 0; _i517 < _size512; ++_i517)
        {
          var elem518 = null;
          elem518 = input.readString();
          this.memberMids.push(elem518);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.mediaType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoGroupCall_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoGroupCall_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter519 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter519))
      {
        iter519 = this.memberMids[iter519];
        output.writeString(iter519);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mediaType !== null && this.mediaType !== undefined) {
    output.writeFieldBegin('mediaType', Thrift.Type.I32, 4);
    output.writeI32(this.mediaType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoGroupCall_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteIntoGroupCall_result.prototype = {};
TalkService_inviteIntoGroupCall_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoGroupCall_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoGroupCall_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_cancelChatInvitation_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CancelChatInvitationRequest(args.request);
    }
  }
};
TalkService_cancelChatInvitation_args.prototype = {};
TalkService_cancelChatInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CancelChatInvitationRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelChatInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelChatInvitation_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_cancelChatInvitation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CancelChatInvitationResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_cancelChatInvitation_result.prototype = {};
TalkService_cancelChatInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CancelChatInvitationResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelChatInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelChatInvitation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findChatByTicket_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.FindChatByTicketRequest(args.request);
    }
  }
};
TalkService_findChatByTicket_args.prototype = {};
TalkService_findChatByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.FindChatByTicketRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findChatByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findChatByTicket_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findChatByTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FindChatByTicketResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findChatByTicket_result.prototype = {};
TalkService_findChatByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FindChatByTicketResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findChatByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findChatByTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getAllContactIds_args = function(args) {
  this.syncReason = null;
  if (args) {
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getAllContactIds_args.prototype = {};
TalkService_getAllContactIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAllContactIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAllContactIds_args');
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 1);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getAllContactIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getAllContactIds_result.prototype = {};
TalkService_getAllContactIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size520 = 0;
        var _rtmp3524;
        this.success = [];
        var _etype523 = 0;
        _rtmp3524 = input.readListBegin();
        _etype523 = _rtmp3524.etype;
        _size520 = _rtmp3524.size;
        for (var _i525 = 0; _i525 < _size520; ++_i525)
        {
          var elem526 = null;
          elem526 = input.readString();
          this.success.push(elem526);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getAllContactIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getAllContactIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter527 in this.success)
    {
      if (this.success.hasOwnProperty(iter527))
      {
        iter527 = this.success[iter527];
        output.writeString(iter527);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChatRoomBGMs_args = function(args) {
  this.chatRoomMids = null;
  this.syncReason = null;
  if (args) {
    if (args.chatRoomMids !== undefined && args.chatRoomMids !== null) {
      this.chatRoomMids = Thrift.copyList(args.chatRoomMids, [null]);
    }
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getChatRoomBGMs_args.prototype = {};
TalkService_getChatRoomBGMs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size528 = 0;
        var _rtmp3532;
        this.chatRoomMids = [];
        var _etype531 = 0;
        _rtmp3532 = input.readSetBegin();
        _etype531 = _rtmp3532.etype;
        _size528 = _rtmp3532.size;
        for (var _i533 = 0; _i533 < _size528; ++_i533)
        {
          var elem534 = null;
          elem534 = input.readString();
          this.chatRoomMids.push(elem534);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomBGMs_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomBGMs_args');
  if (this.chatRoomMids !== null && this.chatRoomMids !== undefined) {
    output.writeFieldBegin('chatRoomMids', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.chatRoomMids.length);
    for (var iter535 in this.chatRoomMids)
    {
      if (this.chatRoomMids.hasOwnProperty(iter535))
      {
        iter535 = this.chatRoomMids[iter535];
        output.writeString(iter535);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 3);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChatRoomBGMs_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.ChatRoomBGM]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getChatRoomBGMs_result.prototype = {};
TalkService_getChatRoomBGMs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size536 = 0;
        var _rtmp3540;
        this.success = {};
        var _ktype537 = 0;
        var _vtype538 = 0;
        _rtmp3540 = input.readMapBegin();
        _ktype537 = _rtmp3540.ktype;
        _vtype538 = _rtmp3540.vtype;
        _size536 = _rtmp3540.size;
        for (var _i541 = 0; _i541 < _size536; ++_i541)
        {
          var key542 = null;
          var val543 = null;
          key542 = input.readString();
          val543 = new ttypes.ChatRoomBGM();
          val543.read(input);
          this.success[key542] = val543;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChatRoomBGMs_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChatRoomBGMs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter544 in this.success)
    {
      if (this.success.hasOwnProperty(kiter544))
      {
        var viter545 = this.success[kiter544];
        output.writeString(kiter544);
        viter545.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getE2EEGroupSharedKey_args = function(args) {
  this.keyVersion = null;
  this.chatMid = null;
  this.groupKeyId = null;
  if (args) {
    if (args.keyVersion !== undefined && args.keyVersion !== null) {
      this.keyVersion = args.keyVersion;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.groupKeyId !== undefined && args.groupKeyId !== null) {
      this.groupKeyId = args.groupKeyId;
    }
  }
};
TalkService_getE2EEGroupSharedKey_args.prototype = {};
TalkService_getE2EEGroupSharedKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keyVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.groupKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEGroupSharedKey_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEGroupSharedKey_args');
  if (this.keyVersion !== null && this.keyVersion !== undefined) {
    output.writeFieldBegin('keyVersion', Thrift.Type.I32, 2);
    output.writeI32(this.keyVersion);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 3);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.groupKeyId !== null && this.groupKeyId !== undefined) {
    output.writeFieldBegin('groupKeyId', Thrift.Type.I32, 4);
    output.writeI32(this.groupKeyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getE2EEGroupSharedKey_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.E2EEGroupSharedKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getE2EEGroupSharedKey_result.prototype = {};
TalkService_getE2EEGroupSharedKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.E2EEGroupSharedKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEGroupSharedKey_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEGroupSharedKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRSAKeyInfo_args = function(args) {
  this.provider = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
  }
};
TalkService_getRSAKeyInfo_args.prototype = {};
TalkService_getRSAKeyInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRSAKeyInfo_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRSAKeyInfo_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 2);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRSAKeyInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RSAKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRSAKeyInfo_result.prototype = {};
TalkService_getRSAKeyInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RSAKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRSAKeyInfo_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRSAKeyInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_fetchOperations_args = function(args) {
  this.localRev = null;
  this.count = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
TalkService_fetchOperations_args.prototype = {};
TalkService_fetchOperations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOperations_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOperations_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_fetchOperations_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Operation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_fetchOperations_result.prototype = {};
TalkService_fetchOperations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size546 = 0;
        var _rtmp3550;
        this.success = [];
        var _etype549 = 0;
        _rtmp3550 = input.readListBegin();
        _etype549 = _rtmp3550.etype;
        _size546 = _rtmp3550.size;
        for (var _i551 = 0; _i551 < _size546; ++_i551)
        {
          var elem552 = null;
          elem552 = new ttypes.Operation();
          elem552.read(input);
          this.success.push(elem552);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOperations_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOperations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter553 in this.success)
    {
      if (this.success.hasOwnProperty(iter553))
      {
        iter553 = this.success[iter553];
        iter553.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupIdsInvited_args = function(args) {
  this.syncReason = null;
  if (args) {
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getGroupIdsInvited_args.prototype = {};
TalkService_getGroupIdsInvited_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsInvited_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsInvited_args');
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 1);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupIdsInvited_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupIdsInvited_result.prototype = {};
TalkService_getGroupIdsInvited_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size554 = 0;
        var _rtmp3558;
        this.success = [];
        var _etype557 = 0;
        _rtmp3558 = input.readListBegin();
        _etype557 = _rtmp3558.etype;
        _size554 = _rtmp3558.size;
        for (var _i559 = 0; _i559 < _size554; ++_i559)
        {
          var elem560 = null;
          elem560 = input.readString();
          this.success.push(elem560);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsInvited_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsInvited_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter561 in this.success)
    {
      if (this.success.hasOwnProperty(iter561))
      {
        iter561 = this.success[iter561];
        output.writeString(iter561);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getProfile_args = function(args) {
  this.syncReason = null;
  if (args) {
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getProfile_args.prototype = {};
TalkService_getProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProfile_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProfile_args');
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 1);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Profile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getProfile_result.prototype = {};
TalkService_getProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getProfile_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_notifyUpdated_args = function(args) {
  this.lastRev = null;
  this.deviceInfo = null;
  this.udidHash = null;
  this.oldUdidHash = null;
  if (args) {
    if (args.lastRev !== undefined && args.lastRev !== null) {
      this.lastRev = args.lastRev;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.oldUdidHash !== undefined && args.oldUdidHash !== null) {
      this.oldUdidHash = args.oldUdidHash;
    }
  }
};
TalkService_notifyUpdated_args.prototype = {};
TalkService_notifyUpdated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.oldUdidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyUpdated_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyUpdated_args');
  if (this.lastRev !== null && this.lastRev !== undefined) {
    output.writeFieldBegin('lastRev', Thrift.Type.I64, 2);
    output.writeI64(this.lastRev);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 3);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.oldUdidHash !== null && this.oldUdidHash !== undefined) {
    output.writeFieldBegin('oldUdidHash', Thrift.Type.STRING, 5);
    output.writeString(this.oldUdidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_notifyUpdated_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_notifyUpdated_result.prototype = {};
TalkService_notifyUpdated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_notifyUpdated_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_notifyUpdated_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerWithSnsId_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.mid = null;
  this.migrationPincodeSessionId = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
  }
};
TalkService_registerWithSnsId_args.prototype = {};
TalkService_registerWithSnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsId_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsId_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 4);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 5);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 6);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 7);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 8);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerWithSnsId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RegisterWithSnsIdResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerWithSnsId_result.prototype = {};
TalkService_registerWithSnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RegisterWithSnsIdResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerWithSnsId_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerWithSnsId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeFriendRequest_args = function(args) {
  this.direction = null;
  this.midOrEMid = null;
  if (args) {
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.midOrEMid !== undefined && args.midOrEMid !== null) {
      this.midOrEMid = args.midOrEMid;
    }
  }
};
TalkService_removeFriendRequest_args.prototype = {};
TalkService_removeFriendRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.midOrEMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeFriendRequest_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeFriendRequest_args');
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 1);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.midOrEMid !== null && this.midOrEMid !== undefined) {
    output.writeFieldBegin('midOrEMid', Thrift.Type.STRING, 2);
    output.writeString(this.midOrEMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeFriendRequest_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeFriendRequest_result.prototype = {};
TalkService_removeFriendRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeFriendRequest_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeFriendRequest_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_openAuthSession_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AuthSessionRequest(args.request);
    }
  }
};
TalkService_openAuthSession_args.prototype = {};
TalkService_openAuthSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AuthSessionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_openAuthSession_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_openAuthSession_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_openAuthSession_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_openAuthSession_result.prototype = {};
TalkService_openAuthSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_openAuthSession_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_openAuthSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyQrcodeWithE2EE_args = function(args) {
  this.verifier = null;
  this.pinCode = null;
  this.errorCode = null;
  this.publicKey = null;
  this.encryptedKeyChain = null;
  this.hashKeyChain = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new ttypes.E2EEPublicKey(args.publicKey);
    }
    if (args.encryptedKeyChain !== undefined && args.encryptedKeyChain !== null) {
      this.encryptedKeyChain = args.encryptedKeyChain;
    }
    if (args.hashKeyChain !== undefined && args.hashKeyChain !== null) {
      this.hashKeyChain = args.hashKeyChain;
    }
  }
};
TalkService_verifyQrcodeWithE2EE_args.prototype = {};
TalkService_verifyQrcodeWithE2EE_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new ttypes.E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedKeyChain = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.hashKeyChain = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyQrcodeWithE2EE_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyQrcodeWithE2EE_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 5);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  if (this.encryptedKeyChain !== null && this.encryptedKeyChain !== undefined) {
    output.writeFieldBegin('encryptedKeyChain', Thrift.Type.STRING, 6);
    output.writeBinary(this.encryptedKeyChain);
    output.writeFieldEnd();
  }
  if (this.hashKeyChain !== null && this.hashKeyChain !== undefined) {
    output.writeFieldBegin('hashKeyChain', Thrift.Type.STRING, 7);
    output.writeBinary(this.hashKeyChain);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyQrcodeWithE2EE_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyQrcodeWithE2EE_result.prototype = {};
TalkService_verifyQrcodeWithE2EE_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyQrcodeWithE2EE_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyQrcodeWithE2EE_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getBalance_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetBalanceRequest(args.request);
    }
  }
};
TalkService_getBalance_args.prototype = {};
TalkService_getBalance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetBalanceRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBalance_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBalance_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getBalance_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetBalanceResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBalance_result.prototype = {};
TalkService_getBalance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetBalanceResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBalance_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBalance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroup_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_getGroup_args.prototype = {};
TalkService_getGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroup_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroup_result.prototype = {};
TalkService_getGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupWithoutMembers_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_getGroupWithoutMembers_args.prototype = {};
TalkService_getGroupWithoutMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupWithoutMembers_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupWithoutMembers_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupWithoutMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupWithoutMembers_result.prototype = {};
TalkService_getGroupWithoutMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupWithoutMembers_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupWithoutMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getCompactGroup_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_getCompactGroup_args.prototype = {};
TalkService_getCompactGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactGroup_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getCompactGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getCompactGroup_result.prototype = {};
TalkService_getCompactGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getCompactGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getCompactGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unregisterUserAndDevice_args = function(args) {
};
TalkService_unregisterUserAndDevice_args.prototype = {};
TalkService_unregisterUserAndDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unregisterUserAndDevice_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unregisterUserAndDevice_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unregisterUserAndDevice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unregisterUserAndDevice_result.prototype = {};
TalkService_unregisterUserAndDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unregisterUserAndDevice_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unregisterUserAndDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateNotificationToken_args = function(args) {
  this.type = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
TalkService_updateNotificationToken_args.prototype = {};
TalkService_updateNotificationToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateNotificationToken_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateNotificationToken_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateNotificationToken_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateNotificationToken_result.prototype = {};
TalkService_updateNotificationToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateNotificationToken_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateNotificationToken_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyPhoneNumber_args = function(args) {
  this.sessionId = null;
  this.pinCode = null;
  this.udidHash = null;
  this.migrationPincodeSessionId = null;
  this.oldUdidHash = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
    if (args.oldUdidHash !== undefined && args.oldUdidHash !== null) {
      this.oldUdidHash = args.oldUdidHash;
    }
  }
};
TalkService_verifyPhoneNumber_args.prototype = {};
TalkService_verifyPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.oldUdidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhoneNumber_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 5);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  if (this.oldUdidHash !== null && this.oldUdidHash !== undefined) {
    output.writeFieldBegin('oldUdidHash', Thrift.Type.STRING, 6);
    output.writeString(this.oldUdidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PhoneVerificationResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyPhoneNumber_result.prototype = {};
TalkService_verifyPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PhoneVerificationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_cancelGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_cancelGroupInvitation_args.prototype = {};
TalkService_cancelGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size562 = 0;
        var _rtmp3566;
        this.contactIds = [];
        var _etype565 = 0;
        _rtmp3566 = input.readListBegin();
        _etype565 = _rtmp3566.etype;
        _size562 = _rtmp3566.size;
        for (var _i567 = 0; _i567 < _size562; ++_i567)
        {
          var elem568 = null;
          elem568 = input.readString();
          this.contactIds.push(elem568);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter569 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter569))
      {
        iter569 = this.contactIds[iter569];
        output.writeString(iter569);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_cancelGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_cancelGroupInvitation_result.prototype = {};
TalkService_cancelGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_cancelGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_cancelGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createRoomV2_args = function(args) {
  this.reqSeq = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_createRoomV2_args.prototype = {};
TalkService_createRoomV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size570 = 0;
        var _rtmp3574;
        this.contactIds = [];
        var _etype573 = 0;
        _rtmp3574 = input.readListBegin();
        _etype573 = _rtmp3574.etype;
        _size570 = _rtmp3574.size;
        for (var _i575 = 0; _i575 < _size570; ++_i575)
        {
          var elem576 = null;
          elem576 = input.readString();
          this.contactIds.push(elem576);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createRoomV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createRoomV2_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter577 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter577))
      {
        iter577 = this.contactIds[iter577];
        output.writeString(iter577);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createRoomV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createRoomV2_result.prototype = {};
TalkService_createRoomV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createRoomV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createRoomV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactByMetaTag_args = function(args) {
  this.searchId = null;
  this.reference = null;
  if (args) {
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findContactByMetaTag_args.prototype = {};
TalkService_findContactByMetaTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByMetaTag_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByMetaTag_args');
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 2);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 3);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactByMetaTag_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactByMetaTag_result.prototype = {};
TalkService_findContactByMetaTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByMetaTag_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByMetaTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChats_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetChatsRequest(args.request);
    }
  }
};
TalkService_getChats_args.prototype = {};
TalkService_getChats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetChatsRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChats_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChats_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getChats_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetChatsResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getChats_result.prototype = {};
TalkService_getChats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetChatsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getChats_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getChats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupIdsJoined_args = function(args) {
  this.syncReason = null;
  if (args) {
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getGroupIdsJoined_args.prototype = {};
TalkService_getGroupIdsJoined_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsJoined_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsJoined_args');
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 1);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupIdsJoined_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupIdsJoined_result.prototype = {};
TalkService_getGroupIdsJoined_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size578 = 0;
        var _rtmp3582;
        this.success = [];
        var _etype581 = 0;
        _rtmp3582 = input.readListBegin();
        _etype581 = _rtmp3582.etype;
        _size578 = _rtmp3582.size;
        for (var _i583 = 0; _i583 < _size578; ++_i583)
        {
          var elem584 = null;
          elem584 = input.readString();
          this.success.push(elem584);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupIdsJoined_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupIdsJoined_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter585 in this.success)
    {
      if (this.success.hasOwnProperty(iter585))
      {
        iter585 = this.success[iter585];
        output.writeString(iter585);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRoomsV2_args = function(args) {
  this.roomIds = null;
  if (args) {
    if (args.roomIds !== undefined && args.roomIds !== null) {
      this.roomIds = Thrift.copyList(args.roomIds, [null]);
    }
  }
};
TalkService_getRoomsV2_args.prototype = {};
TalkService_getRoomsV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size586 = 0;
        var _rtmp3590;
        this.roomIds = [];
        var _etype589 = 0;
        _rtmp3590 = input.readListBegin();
        _etype589 = _rtmp3590.etype;
        _size586 = _rtmp3590.size;
        for (var _i591 = 0; _i591 < _size586; ++_i591)
        {
          var elem592 = null;
          elem592 = input.readString();
          this.roomIds.push(elem592);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRoomsV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRoomsV2_args');
  if (this.roomIds !== null && this.roomIds !== undefined) {
    output.writeFieldBegin('roomIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.roomIds.length);
    for (var iter593 in this.roomIds)
    {
      if (this.roomIds.hasOwnProperty(iter593))
      {
        iter593 = this.roomIds[iter593];
        output.writeString(iter593);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRoomsV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Room]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRoomsV2_result.prototype = {};
TalkService_getRoomsV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size594 = 0;
        var _rtmp3598;
        this.success = [];
        var _etype597 = 0;
        _rtmp3598 = input.readListBegin();
        _etype597 = _rtmp3598.etype;
        _size594 = _rtmp3598.size;
        for (var _i599 = 0; _i599 < _size594; ++_i599)
        {
          var elem600 = null;
          elem600 = new ttypes.Room();
          elem600.read(input);
          this.success.push(elem600);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRoomsV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRoomsV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter601 in this.success)
    {
      if (this.success.hasOwnProperty(iter601))
      {
        iter601 = this.success[iter601];
        iter601.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_reissueChatTicket_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.ReissueChatTicketRequest(args.request);
    }
  }
};
TalkService_reissueChatTicket_args.prototype = {};
TalkService_reissueChatTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.ReissueChatTicketRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueChatTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueChatTicket_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_reissueChatTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ReissueChatTicketResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reissueChatTicket_result.prototype = {};
TalkService_reissueChatTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ReissueChatTicketResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueChatTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueChatTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendMessage_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
TalkService_sendMessage_args.prototype = {};
TalkService_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendMessage_result.prototype = {};
TalkService_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unsendMessage_args = function(args) {
  this.seq = null;
  this.messageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
TalkService_unsendMessage_args.prototype = {};
TalkService_unsendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unsendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unsendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_unsendMessage_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_unsendMessage_result.prototype = {};
TalkService_unsendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_unsendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_unsendMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acquireGroupCallRoute_args = function(args) {
  this.chatMid = null;
  this.mediaType = null;
  this.isInitialHost = null;
  this.capabilities = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.mediaType !== undefined && args.mediaType !== null) {
      this.mediaType = args.mediaType;
    }
    if (args.isInitialHost !== undefined && args.isInitialHost !== null) {
      this.isInitialHost = args.isInitialHost;
    }
    if (args.capabilities !== undefined && args.capabilities !== null) {
      this.capabilities = Thrift.copyList(args.capabilities, [null]);
    }
  }
};
TalkService_acquireGroupCallRoute_args.prototype = {};
TalkService_acquireGroupCallRoute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mediaType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isInitialHost = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size602 = 0;
        var _rtmp3606;
        this.capabilities = [];
        var _etype605 = 0;
        _rtmp3606 = input.readListBegin();
        _etype605 = _rtmp3606.etype;
        _size602 = _rtmp3606.size;
        for (var _i607 = 0; _i607 < _size602; ++_i607)
        {
          var elem608 = null;
          elem608 = input.readString();
          this.capabilities.push(elem608);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireGroupCallRoute_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireGroupCallRoute_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.mediaType !== null && this.mediaType !== undefined) {
    output.writeFieldBegin('mediaType', Thrift.Type.I32, 3);
    output.writeI32(this.mediaType);
    output.writeFieldEnd();
  }
  if (this.isInitialHost !== null && this.isInitialHost !== undefined) {
    output.writeFieldBegin('isInitialHost', Thrift.Type.BOOL, 4);
    output.writeBool(this.isInitialHost);
    output.writeFieldEnd();
  }
  if (this.capabilities !== null && this.capabilities !== undefined) {
    output.writeFieldBegin('capabilities', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.capabilities.length);
    for (var iter609 in this.capabilities)
    {
      if (this.capabilities.hasOwnProperty(iter609))
      {
        iter609 = this.capabilities[iter609];
        output.writeString(iter609);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acquireGroupCallRoute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GroupCallRoute(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acquireGroupCallRoute_result.prototype = {};
TalkService_acquireGroupCallRoute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GroupCallRoute();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireGroupCallRoute_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireGroupCallRoute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptChatInvitationByTicket_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AcceptChatInvitationByTicketRequest(args.request);
    }
  }
};
TalkService_acceptChatInvitationByTicket_args.prototype = {};
TalkService_acceptChatInvitationByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AcceptChatInvitationByTicketRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptChatInvitationByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptChatInvitationByTicket_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptChatInvitationByTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AcceptChatInvitationByTicketResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acceptChatInvitationByTicket_result.prototype = {};
TalkService_acceptChatInvitationByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AcceptChatInvitationByTicketResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptChatInvitationByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptChatInvitationByTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactByUserTicket_args = function(args) {
  this.ticketIdWithTag = null;
  if (args) {
    if (args.ticketIdWithTag !== undefined && args.ticketIdWithTag !== null) {
      this.ticketIdWithTag = args.ticketIdWithTag;
    }
  }
};
TalkService_findContactByUserTicket_args.prototype = {};
TalkService_findContactByUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ticketIdWithTag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserTicket_args');
  if (this.ticketIdWithTag !== null && this.ticketIdWithTag !== undefined) {
    output.writeFieldBegin('ticketIdWithTag', Thrift.Type.STRING, 2);
    output.writeString(this.ticketIdWithTag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactByUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactByUserTicket_result.prototype = {};
TalkService_findContactByUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getE2EEPublicKey_args = function(args) {
  this.mid = null;
  this.keyVersion = null;
  this.keyId = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.keyVersion !== undefined && args.keyVersion !== null) {
      this.keyVersion = args.keyVersion;
    }
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
  }
};
TalkService_getE2EEPublicKey_args.prototype = {};
TalkService_getE2EEPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.keyVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.keyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKey_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.keyVersion !== null && this.keyVersion !== undefined) {
    output.writeFieldBegin('keyVersion', Thrift.Type.I32, 3);
    output.writeI32(this.keyVersion);
    output.writeFieldEnd();
  }
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I32, 4);
    output.writeI32(this.keyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getE2EEPublicKey_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.E2EEPublicKey]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getE2EEPublicKey_result.prototype = {};
TalkService_getE2EEPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size610 = 0;
        var _rtmp3614;
        this.success = [];
        var _etype613 = 0;
        _rtmp3614 = input.readListBegin();
        _etype613 = _rtmp3614.etype;
        _size610 = _rtmp3614.size;
        for (var _i615 = 0; _i615 < _size610; ++_i615)
        {
          var elem616 = null;
          elem616 = new ttypes.E2EEPublicKey();
          elem616.read(input);
          this.success.push(elem616);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getE2EEPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getE2EEPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter617 in this.success)
    {
      if (this.success.hasOwnProperty(iter617))
      {
        iter617 = this.success[iter617];
        iter617.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerDeviceWithIdentityCredential_args = function(args) {
  this.sessionId = null;
  this.provider = null;
  this.identifier = null;
  this.verifier = null;
  this.migrationPincodeSessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.migrationPincodeSessionId !== undefined && args.migrationPincodeSessionId !== null) {
      this.migrationPincodeSessionId = args.migrationPincodeSessionId;
    }
  }
};
TalkService_registerDeviceWithIdentityCredential_args.prototype = {};
TalkService_registerDeviceWithIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.migrationPincodeSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithIdentityCredential_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 5);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.migrationPincodeSessionId !== null && this.migrationPincodeSessionId !== undefined) {
    output.writeFieldBegin('migrationPincodeSessionId', Thrift.Type.STRING, 6);
    output.writeString(this.migrationPincodeSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_registerDeviceWithIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_registerDeviceWithIdentityCredential_result.prototype = {};
TalkService_registerDeviceWithIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_registerDeviceWithIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_registerDeviceWithIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_reissueGroupTicket_args = function(args) {
  this.groupMid = null;
  if (args) {
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
  }
};
TalkService_reissueGroupTicket_args.prototype = {};
TalkService_reissueGroupTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueGroupTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueGroupTicket_args');
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 1);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_reissueGroupTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_reissueGroupTicket_result.prototype = {};
TalkService_reissueGroupTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_reissueGroupTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_reissueGroupTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateProfileAttributes_args = function(args) {
  this.reqSeq = null;
  this.request = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.UpdateProfileAttributesRequest(args.request);
    }
  }
};
TalkService_updateProfileAttributes_args.prototype = {};
TalkService_updateProfileAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.UpdateProfileAttributesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfileAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfileAttributes_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateProfileAttributes_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateProfileAttributes_result.prototype = {};
TalkService_updateProfileAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateProfileAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateProfileAttributes_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyQrcode_args = function(args) {
  this.verifier = null;
  this.pinCode = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
  }
};
TalkService_verifyQrcode_args.prototype = {};
TalkService_verifyQrcode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyQrcode_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyQrcode_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_verifyQrcode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_verifyQrcode_result.prototype = {};
TalkService_verifyQrcode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_verifyQrcode_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_verifyQrcode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptChatInvitation_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AcceptChatInvitationRequest(args.request);
    }
  }
};
TalkService_acceptChatInvitation_args.prototype = {};
TalkService_acceptChatInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AcceptChatInvitationRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptChatInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptChatInvitation_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptChatInvitation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AcceptChatInvitationResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acceptChatInvitation_result.prototype = {};
TalkService_acceptChatInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AcceptChatInvitationResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptChatInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptChatInvitation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_decryptFollowEMid_args = function(args) {
  this.eMid = null;
  if (args) {
    if (args.eMid !== undefined && args.eMid !== null) {
      this.eMid = args.eMid;
    }
  }
};
TalkService_decryptFollowEMid_args.prototype = {};
TalkService_decryptFollowEMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_decryptFollowEMid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_decryptFollowEMid_args');
  if (this.eMid !== null && this.eMid !== undefined) {
    output.writeFieldBegin('eMid', Thrift.Type.STRING, 2);
    output.writeString(this.eMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_decryptFollowEMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_decryptFollowEMid_result.prototype = {};
TalkService_decryptFollowEMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_decryptFollowEMid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_decryptFollowEMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactByUserid_args = function(args) {
  this.searchId = null;
  if (args) {
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
  }
};
TalkService_findContactByUserid_args.prototype = {};
TalkService_findContactByUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserid_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserid_args');
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 2);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactByUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactByUserid_result.prototype = {};
TalkService_findContactByUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactByUserid_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactByUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getServerTime_args = function(args) {
};
TalkService_getServerTime_args.prototype = {};
TalkService_getServerTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getServerTime_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getServerTime_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getServerTime_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getServerTime_result.prototype = {};
TalkService_getServerTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getServerTime_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getServerTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoChat_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.InviteIntoChatRequest(args.request);
    }
  }
};
TalkService_inviteIntoChat_args.prototype = {};
TalkService_inviteIntoChat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.InviteIntoChatRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoChat_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoChat_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoChat_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.InviteIntoChatResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteIntoChat_result.prototype = {};
TalkService_inviteIntoChat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.InviteIntoChatResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoChat_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoChat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptGroupInvitationByTicket_args = function(args) {
  this.reqSeq = null;
  this.groupMid = null;
  this.ticketId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupMid !== undefined && args.groupMid !== null) {
      this.groupMid = args.groupMid;
    }
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
TalkService_acceptGroupInvitationByTicket_args.prototype = {};
TalkService_acceptGroupInvitationByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitationByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitationByTicket_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupMid !== null && this.groupMid !== undefined) {
    output.writeFieldBegin('groupMid', Thrift.Type.STRING, 2);
    output.writeString(this.groupMid);
    output.writeFieldEnd();
  }
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 3);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptGroupInvitationByTicket_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acceptGroupInvitationByTicket_result.prototype = {};
TalkService_acceptGroupInvitationByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitationByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitationByTicket_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_deleteOtherFromChat_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.DeleteOtherFromChatRequest(args.request);
    }
  }
};
TalkService_deleteOtherFromChat_args.prototype = {};
TalkService_deleteOtherFromChat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeleteOtherFromChatRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_deleteOtherFromChat_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_deleteOtherFromChat_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_deleteOtherFromChat_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeleteOtherFromChatResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_deleteOtherFromChat_result.prototype = {};
TalkService_deleteOtherFromChat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeleteOtherFromChatResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_deleteOtherFromChat_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_deleteOtherFromChat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactsByPhone_args = function(args) {
  this.phones = null;
  if (args) {
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
  }
};
TalkService_findContactsByPhone_args.prototype = {};
TalkService_findContactsByPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size618 = 0;
        var _rtmp3622;
        this.phones = [];
        var _etype621 = 0;
        _rtmp3622 = input.readSetBegin();
        _etype621 = _rtmp3622.etype;
        _size618 = _rtmp3622.size;
        for (var _i623 = 0; _i623 < _size618; ++_i623)
        {
          var elem624 = null;
          elem624 = input.readString();
          this.phones.push(elem624);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactsByPhone_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactsByPhone_args');
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter625 in this.phones)
    {
      if (this.phones.hasOwnProperty(iter625))
      {
        iter625 = this.phones[iter625];
        output.writeString(iter625);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findContactsByPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findContactsByPhone_result.prototype = {};
TalkService_findContactsByPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size626 = 0;
        var _rtmp3630;
        this.success = {};
        var _ktype627 = 0;
        var _vtype628 = 0;
        _rtmp3630 = input.readMapBegin();
        _ktype627 = _rtmp3630.ktype;
        _vtype628 = _rtmp3630.vtype;
        _size626 = _rtmp3630.size;
        for (var _i631 = 0; _i631 < _size626; ++_i631)
        {
          var key632 = null;
          var val633 = null;
          key632 = input.readString();
          val633 = new ttypes.Contact();
          val633.read(input);
          this.success[key632] = val633;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findContactsByPhone_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findContactsByPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter634 in this.success)
    {
      if (this.success.hasOwnProperty(kiter634))
      {
        var viter635 = this.success[kiter634];
        output.writeString(kiter634);
        viter635.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupsV2_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = Thrift.copyList(args.groupId, [null]);
    }
  }
};
TalkService_getGroupsV2_args.prototype = {};
TalkService_getGroupsV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size636 = 0;
        var _rtmp3640;
        this.groupId = [];
        var _etype639 = 0;
        _rtmp3640 = input.readListBegin();
        _etype639 = _rtmp3640.etype;
        _size636 = _rtmp3640.size;
        for (var _i641 = 0; _i641 < _size636; ++_i641)
        {
          var elem642 = null;
          elem642 = input.readString();
          this.groupId.push(elem642);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupsV2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupsV2_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groupId.length);
    for (var iter643 in this.groupId)
    {
      if (this.groupId.hasOwnProperty(iter643))
      {
        iter643 = this.groupId[iter643];
        output.writeString(iter643);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupsV2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Group]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupsV2_result.prototype = {};
TalkService_getGroupsV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size644 = 0;
        var _rtmp3648;
        this.success = [];
        var _etype647 = 0;
        _rtmp3648 = input.readListBegin();
        _etype647 = _rtmp3648.etype;
        _size644 = _rtmp3648.size;
        for (var _i649 = 0; _i649 < _size644; ++_i649)
        {
          var elem650 = null;
          elem650 = new ttypes.Group();
          elem650.read(input);
          this.success.push(elem650);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupsV2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupsV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter651 in this.success)
    {
      if (this.success.hasOwnProperty(iter651))
      {
        iter651 = this.success[iter651];
        iter651.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_inviteIntoGroup_args.prototype = {};
TalkService_inviteIntoGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size652 = 0;
        var _rtmp3656;
        this.contactIds = [];
        var _etype655 = 0;
        _rtmp3656 = input.readListBegin();
        _etype655 = _rtmp3656.etype;
        _size652 = _rtmp3656.size;
        for (var _i657 = 0; _i657 < _size652; ++_i657)
        {
          var elem658 = null;
          elem658 = input.readString();
          this.contactIds.push(elem658);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter659 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter659))
      {
        iter659 = this.contactIds[iter659];
        output.writeString(iter659);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteIntoGroup_result.prototype = {};
TalkService_inviteIntoGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_acceptGroupInvitation_args.prototype = {};
TalkService_acceptGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acceptGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acceptGroupInvitation_result.prototype = {};
TalkService_acceptGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acceptGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acceptGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_deleteSelfFromChat_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.DeleteSelfFromChatRequest(args.request);
    }
  }
};
TalkService_deleteSelfFromChat_args.prototype = {};
TalkService_deleteSelfFromChat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeleteSelfFromChatRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_deleteSelfFromChat_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_deleteSelfFromChat_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_deleteSelfFromChat_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeleteSelfFromChatResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_deleteSelfFromChat_result.prototype = {};
TalkService_deleteSelfFromChat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeleteSelfFromChatResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_deleteSelfFromChat_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_deleteSelfFromChat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getBlockedContactIds_args = function(args) {
  this.syncReason = null;
  if (args) {
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getBlockedContactIds_args.prototype = {};
TalkService_getBlockedContactIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedContactIds_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedContactIds_args');
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 1);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getBlockedContactIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getBlockedContactIds_result.prototype = {};
TalkService_getBlockedContactIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size660 = 0;
        var _rtmp3664;
        this.success = [];
        var _etype663 = 0;
        _rtmp3664 = input.readListBegin();
        _etype663 = _rtmp3664.etype;
        _size660 = _rtmp3664.size;
        for (var _i665 = 0; _i665 < _size660; ++_i665)
        {
          var elem666 = null;
          elem666 = input.readString();
          this.success.push(elem666);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getBlockedContactIds_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getBlockedContactIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter667 in this.success)
    {
      if (this.success.hasOwnProperty(iter667))
      {
        iter667 = this.success[iter667];
        output.writeString(iter667);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getSettingsAttributes2_args = function(args) {
  this.attributesToRetrieve = null;
  if (args) {
    if (args.attributesToRetrieve !== undefined && args.attributesToRetrieve !== null) {
      this.attributesToRetrieve = Thrift.copyList(args.attributesToRetrieve, [null]);
    }
  }
};
TalkService_getSettingsAttributes2_args.prototype = {};
TalkService_getSettingsAttributes2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size668 = 0;
        var _rtmp3672;
        this.attributesToRetrieve = [];
        var _etype671 = 0;
        _rtmp3672 = input.readSetBegin();
        _etype671 = _rtmp3672.etype;
        _size668 = _rtmp3672.size;
        for (var _i673 = 0; _i673 < _size668; ++_i673)
        {
          var elem674 = null;
          elem674 = input.readI32();
          this.attributesToRetrieve.push(elem674);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettingsAttributes2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettingsAttributes2_args');
  if (this.attributesToRetrieve !== null && this.attributesToRetrieve !== undefined) {
    output.writeFieldBegin('attributesToRetrieve', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.attributesToRetrieve.length);
    for (var iter675 in this.attributesToRetrieve)
    {
      if (this.attributesToRetrieve.hasOwnProperty(iter675))
      {
        iter675 = this.attributesToRetrieve[iter675];
        output.writeI32(iter675);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getSettingsAttributes2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Settings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSettingsAttributes2_result.prototype = {};
TalkService_getSettingsAttributes2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Settings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettingsAttributes2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettingsAttributes2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoRoom_args = function(args) {
  this.reqSeq = null;
  this.roomId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_inviteIntoRoom_args.prototype = {};
TalkService_inviteIntoRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size676 = 0;
        var _rtmp3680;
        this.contactIds = [];
        var _etype679 = 0;
        _rtmp3680 = input.readListBegin();
        _etype679 = _rtmp3680.etype;
        _size676 = _rtmp3680.size;
        for (var _i681 = 0; _i681 < _size676; ++_i681)
        {
          var elem682 = null;
          elem682 = input.readString();
          this.contactIds.push(elem682);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoRoom_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter683 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter683))
      {
        iter683 = this.contactIds[iter683];
        output.writeString(iter683);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_inviteIntoRoom_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_inviteIntoRoom_result.prototype = {};
TalkService_inviteIntoRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_inviteIntoRoom_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_inviteIntoRoom_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_rejectChatInvitation_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.RejectChatInvitationRequest(args.request);
    }
  }
};
TalkService_rejectChatInvitation_args.prototype = {};
TalkService_rejectChatInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.RejectChatInvitationRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_rejectChatInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_rejectChatInvitation_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_rejectChatInvitation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RejectChatInvitationResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_rejectChatInvitation_result.prototype = {};
TalkService_rejectChatInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RejectChatInvitationResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_rejectChatInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_rejectChatInvitation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateChatRoomBGM_args = function(args) {
  this.reqSeq = null;
  this.chatRoomMid = null;
  this.chatRoomBGMInfo = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatRoomMid !== undefined && args.chatRoomMid !== null) {
      this.chatRoomMid = args.chatRoomMid;
    }
    if (args.chatRoomBGMInfo !== undefined && args.chatRoomBGMInfo !== null) {
      this.chatRoomBGMInfo = args.chatRoomBGMInfo;
    }
  }
};
TalkService_updateChatRoomBGM_args.prototype = {};
TalkService_updateChatRoomBGM_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomBGMInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateChatRoomBGM_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateChatRoomBGM_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatRoomMid !== null && this.chatRoomMid !== undefined) {
    output.writeFieldBegin('chatRoomMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatRoomMid);
    output.writeFieldEnd();
  }
  if (this.chatRoomBGMInfo !== null && this.chatRoomBGMInfo !== undefined) {
    output.writeFieldBegin('chatRoomBGMInfo', Thrift.Type.STRING, 3);
    output.writeString(this.chatRoomBGMInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateChatRoomBGM_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChatRoomBGM(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateChatRoomBGM_result.prototype = {};
TalkService_updateChatRoomBGM_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatRoomBGM();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateChatRoomBGM_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateChatRoomBGM_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findGroupByTicket_args = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
TalkService_findGroupByTicket_args.prototype = {};
TalkService_findGroupByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findGroupByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findGroupByTicket_args');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findGroupByTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findGroupByTicket_result.prototype = {};
TalkService_findGroupByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findGroupByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findGroupByTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRecentFriendRequests_args = function(args) {
  this.syncReason = null;
  if (args) {
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getRecentFriendRequests_args.prototype = {};
TalkService_getRecentFriendRequests_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecentFriendRequests_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecentFriendRequests_args');
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 1);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getRecentFriendRequests_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FriendRequestsInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getRecentFriendRequests_result.prototype = {};
TalkService_getRecentFriendRequests_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FriendRequestsInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getRecentFriendRequests_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getRecentFriendRequests_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getSettingsAttributes_args = function(args) {
  this.attrBitset = null;
  if (args) {
    if (args.attrBitset !== undefined && args.attrBitset !== null) {
      this.attrBitset = args.attrBitset;
    }
  }
};
TalkService_getSettingsAttributes_args.prototype = {};
TalkService_getSettingsAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attrBitset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettingsAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettingsAttributes_args');
  if (this.attrBitset !== null && this.attrBitset !== undefined) {
    output.writeFieldBegin('attrBitset', Thrift.Type.I32, 2);
    output.writeI32(this.attrBitset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getSettingsAttributes_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Settings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSettingsAttributes_result.prototype = {};
TalkService_getSettingsAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Settings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettingsAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettingsAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_rejectGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_rejectGroupInvitation_args.prototype = {};
TalkService_rejectGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_rejectGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_rejectGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_rejectGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_rejectGroupInvitation_result.prototype = {};
TalkService_rejectGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_rejectGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_rejectGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateChat_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.UpdateChatRequest(args.request);
    }
  }
};
TalkService_updateChat_args.prototype = {};
TalkService_updateChat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.UpdateChatRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateChat_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateChat_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateChat_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UpdateChatResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateChat_result.prototype = {};
TalkService_updateChat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UpdateChatResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateChat_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateChat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateSettingsAttributes2_args = function(args) {
  this.reqSeq = null;
  this.attributesToUpdate = null;
  this.settings = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attributesToUpdate !== undefined && args.attributesToUpdate !== null) {
      this.attributesToUpdate = Thrift.copyList(args.attributesToUpdate, [null]);
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.Settings(args.settings);
    }
  }
};
TalkService_updateSettingsAttributes2_args.prototype = {};
TalkService_updateSettingsAttributes2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size684 = 0;
        var _rtmp3688;
        this.attributesToUpdate = [];
        var _etype687 = 0;
        _rtmp3688 = input.readSetBegin();
        _etype687 = _rtmp3688.etype;
        _size684 = _rtmp3688.size;
        for (var _i689 = 0; _i689 < _size684; ++_i689)
        {
          var elem690 = null;
          elem690 = input.readI32();
          this.attributesToUpdate.push(elem690);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettingsAttributes2_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettingsAttributes2_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attributesToUpdate !== null && this.attributesToUpdate !== undefined) {
    output.writeFieldBegin('attributesToUpdate', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.attributesToUpdate.length);
    for (var iter691 in this.attributesToUpdate)
    {
      if (this.attributesToUpdate.hasOwnProperty(iter691))
      {
        iter691 = this.attributesToUpdate[iter691];
        output.writeI32(iter691);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 3);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateSettingsAttributes2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateSettingsAttributes2_result.prototype = {};
TalkService_updateSettingsAttributes2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size692 = 0;
        var _rtmp3696;
        this.success = [];
        var _etype695 = 0;
        _rtmp3696 = input.readSetBegin();
        _etype695 = _rtmp3696.etype;
        _size692 = _rtmp3696.size;
        for (var _i697 = 0; _i697 < _size692; ++_i697)
        {
          var elem698 = null;
          elem698 = input.readI32();
          this.success.push(elem698);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateSettingsAttributes2_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateSettingsAttributes2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.I32, this.success.length);
    for (var iter699 in this.success)
    {
      if (this.success.hasOwnProperty(iter699))
      {
        iter699 = this.success[iter699];
        output.writeI32(iter699);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getSettings_args = function(args) {
  this.syncReason = null;
  if (args) {
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
  }
};
TalkService_getSettings_args.prototype = {};
TalkService_getSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettings_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettings_args');
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 1);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Settings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getSettings_result.prototype = {};
TalkService_getSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Settings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getSettings_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_noop_args = function(args) {
};
TalkService_noop_args.prototype = {};
TalkService_noop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_noop_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_noop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_noop_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_noop_result.prototype = {};
TalkService_noop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_noop_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_noop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeAllMessages_args = function(args) {
  this.seq = null;
  this.lastMessageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
TalkService_removeAllMessages_args.prototype = {};
TalkService_removeAllMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeAllMessages_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeAllMessages_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 2);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_removeAllMessages_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_removeAllMessages_result.prototype = {};
TalkService_removeAllMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_removeAllMessages_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_removeAllMessages_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateContactSetting_args = function(args) {
  this.reqSeq = null;
  this.mid = null;
  this.flag = null;
  this.value = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.flag !== undefined && args.flag !== null) {
      this.flag = args.flag;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TalkService_updateContactSetting_args.prototype = {};
TalkService_updateContactSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateContactSetting_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateContactSetting_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I32, 3);
    output.writeI32(this.flag);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateContactSetting_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateContactSetting_result.prototype = {};
TalkService_updateContactSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateContactSetting_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateContactSetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupCall_args = function(args) {
  this.chatMid = null;
  if (args) {
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
  }
};
TalkService_getGroupCall_args.prototype = {};
TalkService_getGroupCall_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupCall_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupCall_args');
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getGroupCall_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GroupCall(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getGroupCall_result.prototype = {};
TalkService_getGroupCall_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GroupCall();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getGroupCall_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getGroupCall_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_fetchOps_args = function(args) {
  this.localRev = null;
  this.count = null;
  this.globalRev = null;
  this.individualRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.globalRev !== undefined && args.globalRev !== null) {
      this.globalRev = args.globalRev;
    }
    if (args.individualRev !== undefined && args.individualRev !== null) {
      this.individualRev = args.individualRev;
    }
  }
};
TalkService_fetchOps_args.prototype = {};
TalkService_fetchOps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.globalRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.individualRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOps_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOps_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.globalRev !== null && this.globalRev !== undefined) {
    output.writeFieldBegin('globalRev', Thrift.Type.I64, 4);
    output.writeI64(this.globalRev);
    output.writeFieldEnd();
  }
  if (this.individualRev !== null && this.individualRev !== undefined) {
    output.writeFieldBegin('individualRev', Thrift.Type.I64, 5);
    output.writeI64(this.individualRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_fetchOps_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Operation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_fetchOps_result.prototype = {};
TalkService_fetchOps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size700 = 0;
        var _rtmp3704;
        this.success = [];
        var _etype703 = 0;
        _rtmp3704 = input.readListBegin();
        _etype703 = _rtmp3704.etype;
        _size700 = _rtmp3704.size;
        for (var _i705 = 0; _i705 < _size700; ++_i705)
        {
          var elem706 = null;
          elem706 = new ttypes.Operation();
          elem706.read(input);
          this.success.push(elem706);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_fetchOps_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_fetchOps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter707 in this.success)
    {
      if (this.success.hasOwnProperty(iter707))
      {
        iter707 = this.success[iter707];
        iter707.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_kickoutFromGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
TalkService_kickoutFromGroup_args.prototype = {};
TalkService_kickoutFromGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size708 = 0;
        var _rtmp3712;
        this.contactIds = [];
        var _etype711 = 0;
        _rtmp3712 = input.readListBegin();
        _etype711 = _rtmp3712.etype;
        _size708 = _rtmp3712.size;
        for (var _i713 = 0; _i713 < _size708; ++_i713)
        {
          var elem714 = null;
          elem714 = input.readString();
          this.contactIds.push(elem714);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_kickoutFromGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_kickoutFromGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter715 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter715))
      {
        iter715 = this.contactIds[iter715];
        output.writeString(iter715);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_kickoutFromGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_kickoutFromGroup_result.prototype = {};
TalkService_kickoutFromGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_kickoutFromGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_kickoutFromGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acquireEncryptedAccessToken_args = function(args) {
  this.featureType = null;
  if (args) {
    if (args.featureType !== undefined && args.featureType !== null) {
      this.featureType = args.featureType;
    }
  }
};
TalkService_acquireEncryptedAccessToken_args.prototype = {};
TalkService_acquireEncryptedAccessToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.featureType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireEncryptedAccessToken_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireEncryptedAccessToken_args');
  if (this.featureType !== null && this.featureType !== undefined) {
    output.writeFieldBegin('featureType', Thrift.Type.I32, 2);
    output.writeI32(this.featureType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_acquireEncryptedAccessToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_acquireEncryptedAccessToken_result.prototype = {};
TalkService_acquireEncryptedAccessToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_acquireEncryptedAccessToken_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_acquireEncryptedAccessToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createChatRoomAnnouncement_args = function(args) {
  this.reqSeq = null;
  this.chatRoomMid = null;
  this.type = null;
  this.contents = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.chatRoomMid !== undefined && args.chatRoomMid !== null) {
      this.chatRoomMid = args.chatRoomMid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.contents !== undefined && args.contents !== null) {
      this.contents = new ttypes.ChatRoomAnnouncementContents(args.contents);
    }
  }
};
TalkService_createChatRoomAnnouncement_args.prototype = {};
TalkService_createChatRoomAnnouncement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatRoomMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.contents = new ttypes.ChatRoomAnnouncementContents();
        this.contents.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createChatRoomAnnouncement_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createChatRoomAnnouncement_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.chatRoomMid !== null && this.chatRoomMid !== undefined) {
    output.writeFieldBegin('chatRoomMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatRoomMid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.contents !== null && this.contents !== undefined) {
    output.writeFieldBegin('contents', Thrift.Type.STRUCT, 4);
    this.contents.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_createChatRoomAnnouncement_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChatRoomAnnouncement(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_createChatRoomAnnouncement_result.prototype = {};
TalkService_createChatRoomAnnouncement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatRoomAnnouncement();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_createChatRoomAnnouncement_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_createChatRoomAnnouncement_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactByMetaTag_args = function(args) {
  this.reqSeq = null;
  this.searchId = null;
  this.reference = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = args.reference;
    }
  }
};
TalkService_findAndAddContactByMetaTag_args.prototype = {};
TalkService_findAndAddContactByMetaTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactByMetaTag_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactByMetaTag_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 2);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRING, 3);
    output.writeString(this.reference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_findAndAddContactByMetaTag_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_findAndAddContactByMetaTag_result.prototype = {};
TalkService_findAndAddContactByMetaTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_findAndAddContactByMetaTag_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_findAndAddContactByMetaTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_follow_args = function(args) {
  this.followRequest = null;
  if (args) {
    if (args.followRequest !== undefined && args.followRequest !== null) {
      this.followRequest = new ttypes.FollowRequest(args.followRequest);
    }
  }
};
TalkService_follow_args.prototype = {};
TalkService_follow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.followRequest = new ttypes.FollowRequest();
        this.followRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_follow_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_follow_args');
  if (this.followRequest !== null && this.followRequest !== undefined) {
    output.writeFieldBegin('followRequest', Thrift.Type.STRUCT, 2);
    this.followRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_follow_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_follow_result.prototype = {};
TalkService_follow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_follow_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_follow_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getContact_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
TalkService_getContact_args.prototype = {};
TalkService_getContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContact_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContact_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_getContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_getContact_result.prototype = {};
TalkService_getContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_getContact_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_getContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_leaveGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
TalkService_leaveGroup_args.prototype = {};
TalkService_leaveGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveGroup_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_leaveGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_leaveGroup_result.prototype = {};
TalkService_leaveGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_leaveGroup_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_leaveGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendChatChecked_args = function(args) {
  this.seq = null;
  this.chatMid = null;
  this.lastMessageId = null;
  this.sessionId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
TalkService_sendChatChecked_args.prototype = {};
TalkService_sendChatChecked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.sessionId = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatChecked_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatChecked_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 4);
    output.writeByte(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_sendChatChecked_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_sendChatChecked_result.prototype = {};
TalkService_sendChatChecked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_sendChatChecked_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_sendChatChecked_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateIdentifier_args = function(args) {
  this.authSessionId = null;
  this.request = null;
  if (args) {
    if (args.authSessionId !== undefined && args.authSessionId !== null) {
      this.authSessionId = args.authSessionId;
    }
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.IdentityCredentialRequest(args.request);
    }
  }
};
TalkService_updateIdentifier_args.prototype = {};
TalkService_updateIdentifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.IdentityCredentialRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateIdentifier_args.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateIdentifier_args');
  if (this.authSessionId !== null && this.authSessionId !== undefined) {
    output.writeFieldBegin('authSessionId', Thrift.Type.STRING, 2);
    output.writeString(this.authSessionId);
    output.writeFieldEnd();
  }
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 3);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkService_updateIdentifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredentialResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
TalkService_updateIdentifier_result.prototype = {};
TalkService_updateIdentifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredentialResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkService_updateIdentifier_result.prototype.write = function(output) {
  output.writeStructBegin('TalkService_updateIdentifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TalkServiceClient.prototype = {};
TalkServiceClient.prototype.seqid = function() { return this._seqid; };
TalkServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
TalkServiceClient.prototype.tryFriendRequest = function(midOrEMid, method, friendRequestParams, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_tryFriendRequest(midOrEMid, method, friendRequestParams);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_tryFriendRequest(midOrEMid, method, friendRequestParams);
  }
};

TalkServiceClient.prototype.send_tryFriendRequest = function(midOrEMid, method, friendRequestParams) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('tryFriendRequest', Thrift.MessageType.CALL, this.seqid());
  var params = {
    midOrEMid: midOrEMid,
    method: method,
    friendRequestParams: friendRequestParams
  };
  var args = new TalkService_tryFriendRequest_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_tryFriendRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_tryFriendRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.updateExtendedProfileAttribute = function(reqSeq, attr, extendedProfile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateExtendedProfileAttribute(reqSeq, attr, extendedProfile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateExtendedProfileAttribute(reqSeq, attr, extendedProfile);
  }
};

TalkServiceClient.prototype.send_updateExtendedProfileAttribute = function(reqSeq, attr, extendedProfile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateExtendedProfileAttribute', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    attr: attr,
    extendedProfile: extendedProfile
  };
  var args = new TalkService_updateExtendedProfileAttribute_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateExtendedProfileAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateExtendedProfileAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.verifyAccountMigration = function(migrationSessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyAccountMigration(migrationSessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyAccountMigration(migrationSessionId);
  }
};

TalkServiceClient.prototype.send_verifyAccountMigration = function(migrationSessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyAccountMigration', Thrift.MessageType.CALL, this.seqid());
  var params = {
    migrationSessionId: migrationSessionId
  };
  var args = new TalkService_verifyAccountMigration_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_verifyAccountMigration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_verifyAccountMigration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.reportLocation = function(location, trigger, networkStatus, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportLocation(location, trigger, networkStatus);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportLocation(location, trigger, networkStatus);
  }
};

TalkServiceClient.prototype.send_reportLocation = function(location, trigger, networkStatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportLocation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    location: location,
    trigger: trigger,
    networkStatus: networkStatus
  };
  var args = new TalkService_reportLocation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_reportLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_reportLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.getPaidCallBalanceList = function(language, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPaidCallBalanceList(language);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPaidCallBalanceList(language);
  }
};

TalkServiceClient.prototype.send_getPaidCallBalanceList = function(language) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPaidCallBalanceList', Thrift.MessageType.CALL, this.seqid());
  var params = {
    language: language
  };
  var args = new TalkService_getPaidCallBalanceList_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getPaidCallBalanceList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getPaidCallBalanceList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPaidCallBalanceList failed: unknown result');
};
TalkServiceClient.prototype.createChat = function(requests, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createChat(requests);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createChat(requests);
  }
};

TalkServiceClient.prototype.send_createChat = function(requests) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createChat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    requests: requests
  };
  var args = new TalkService_createChat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_createChat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_createChat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createChat failed: unknown result');
};
TalkServiceClient.prototype.findAndAddContactsByMid = function(reqSeq, mid, type, reference, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactsByMid(reqSeq, mid, type, reference);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactsByMid(reqSeq, mid, type, reference);
  }
};

TalkServiceClient.prototype.send_findAndAddContactsByMid = function(reqSeq, mid, type, reference) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactsByMid', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    mid: mid,
    type: type,
    reference: reference
  };
  var args = new TalkService_findAndAddContactsByMid_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findAndAddContactsByMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findAndAddContactsByMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactsByMid failed: unknown result');
};
TalkServiceClient.prototype.generateUserTicket = function(expirationTime, maxUseCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generateUserTicket(expirationTime, maxUseCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generateUserTicket(expirationTime, maxUseCount);
  }
};

TalkServiceClient.prototype.send_generateUserTicket = function(expirationTime, maxUseCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('generateUserTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    expirationTime: expirationTime,
    maxUseCount: maxUseCount
  };
  var args = new TalkService_generateUserTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_generateUserTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_generateUserTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generateUserTicket failed: unknown result');
};
TalkServiceClient.prototype.getContacts = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContacts(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContacts(ids);
  }
};

TalkServiceClient.prototype.send_getContacts = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContacts', Thrift.MessageType.CALL, this.seqid());
  var params = {
    ids: ids
  };
  var args = new TalkService_getContacts_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContacts failed: unknown result');
};
TalkServiceClient.prototype.getFollowers = function(getFollowersRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFollowers(getFollowersRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFollowers(getFollowersRequest);
  }
};

TalkServiceClient.prototype.send_getFollowers = function(getFollowersRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFollowers', Thrift.MessageType.CALL, this.seqid());
  var params = {
    getFollowersRequest: getFollowersRequest
  };
  var args = new TalkService_getFollowers_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getFollowers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getFollowers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFollowers failed: unknown result');
};
TalkServiceClient.prototype.getLastE2EEPublicKeys = function(chatMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLastE2EEPublicKeys(chatMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLastE2EEPublicKeys(chatMid);
  }
};

TalkServiceClient.prototype.send_getLastE2EEPublicKeys = function(chatMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLastE2EEPublicKeys', Thrift.MessageType.CALL, this.seqid());
  var params = {
    chatMid: chatMid
  };
  var args = new TalkService_getLastE2EEPublicKeys_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getLastE2EEPublicKeys = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getLastE2EEPublicKeys_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLastE2EEPublicKeys failed: unknown result');
};
TalkServiceClient.prototype.leaveRoom = function(reqSeq, roomId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_leaveRoom(reqSeq, roomId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_leaveRoom(reqSeq, roomId);
  }
};

TalkServiceClient.prototype.send_leaveRoom = function(reqSeq, roomId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('leaveRoom', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    roomId: roomId
  };
  var args = new TalkService_leaveRoom_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_leaveRoom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_leaveRoom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.notifyRegistrationComplete = function(udidHash, applicationTypeWithExtensions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
  }
};

TalkServiceClient.prototype.send_notifyRegistrationComplete = function(udidHash, applicationTypeWithExtensions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyRegistrationComplete', Thrift.MessageType.CALL, this.seqid());
  var params = {
    udidHash: udidHash,
    applicationTypeWithExtensions: applicationTypeWithExtensions
  };
  var args = new TalkService_notifyRegistrationComplete_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_notifyRegistrationComplete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_notifyRegistrationComplete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.removeChatRoomAnnouncement = function(reqSeq, chatRoomMid, announcementSeq, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq);
  }
};

TalkServiceClient.prototype.send_removeChatRoomAnnouncement = function(reqSeq, chatRoomMid, announcementSeq) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeChatRoomAnnouncement', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    chatRoomMid: chatRoomMid,
    announcementSeq: announcementSeq
  };
  var args = new TalkService_removeChatRoomAnnouncement_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_removeChatRoomAnnouncement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_removeChatRoomAnnouncement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.sendChatRemoved = function(seq, chatMid, lastMessageId, sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendChatRemoved(seq, chatMid, lastMessageId, sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendChatRemoved(seq, chatMid, lastMessageId, sessionId);
  }
};

TalkServiceClient.prototype.send_sendChatRemoved = function(seq, chatMid, lastMessageId, sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendChatRemoved', Thrift.MessageType.CALL, this.seqid());
  var params = {
    seq: seq,
    chatMid: chatMid,
    lastMessageId: lastMessageId,
    sessionId: sessionId
  };
  var args = new TalkService_sendChatRemoved_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_sendChatRemoved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_sendChatRemoved_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.updatePassword = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updatePassword(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updatePassword(authSessionId, request);
  }
};

TalkServiceClient.prototype.send_updatePassword = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updatePassword', Thrift.MessageType.CALL, this.seqid());
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new TalkService_updatePassword_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updatePassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updatePassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updatePassword failed: unknown result');
};
TalkServiceClient.prototype.unblockContact = function(reqSeq, id, reference, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unblockContact(reqSeq, id, reference);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unblockContact(reqSeq, id, reference);
  }
};

TalkServiceClient.prototype.send_unblockContact = function(reqSeq, id, reference) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unblockContact', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    id: id,
    reference: reference
  };
  var args = new TalkService_unblockContact_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_unblockContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_unblockContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.updateGroupPreferenceAttribute = function(reqSeq, groupMid, updatedAttrs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs);
  }
};

TalkServiceClient.prototype.send_updateGroupPreferenceAttribute = function(reqSeq, groupMid, updatedAttrs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateGroupPreferenceAttribute', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupMid: groupMid,
    updatedAttrs: updatedAttrs
  };
  var args = new TalkService_updateGroupPreferenceAttribute_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateGroupPreferenceAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateGroupPreferenceAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.verifyIdentityCredentialWithResult = function(identityCredential, migrationPincodeSessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyIdentityCredentialWithResult(identityCredential, migrationPincodeSessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyIdentityCredentialWithResult(identityCredential, migrationPincodeSessionId);
  }
};

TalkServiceClient.prototype.send_verifyIdentityCredentialWithResult = function(identityCredential, migrationPincodeSessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyIdentityCredentialWithResult', Thrift.MessageType.CALL, this.seqid());
  var params = {
    identityCredential: identityCredential,
    migrationPincodeSessionId: migrationPincodeSessionId
  };
  var args = new TalkService_verifyIdentityCredentialWithResult_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_verifyIdentityCredentialWithResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_verifyIdentityCredentialWithResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyIdentityCredentialWithResult failed: unknown result');
};
TalkServiceClient.prototype.requestCleanupUserProvidedData = function(dataTypes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestCleanupUserProvidedData(dataTypes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestCleanupUserProvidedData(dataTypes);
  }
};

TalkServiceClient.prototype.send_requestCleanupUserProvidedData = function(dataTypes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestCleanupUserProvidedData', Thrift.MessageType.CALL, this.seqid());
  var params = {
    dataTypes: dataTypes
  };
  var args = new TalkService_requestCleanupUserProvidedData_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_requestCleanupUserProvidedData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_requestCleanupUserProvidedData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.getBuddyStatusBarV2 = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyStatusBarV2(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyStatusBarV2(request);
  }
};

TalkServiceClient.prototype.send_getBuddyStatusBarV2 = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyStatusBarV2', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_getBuddyStatusBarV2_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getBuddyStatusBarV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getBuddyStatusBarV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyStatusBarV2 failed: unknown result');
};
TalkServiceClient.prototype.getPaidCallHistory = function(start, size, language, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPaidCallHistory(start, size, language);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPaidCallHistory(start, size, language);
  }
};

TalkServiceClient.prototype.send_getPaidCallHistory = function(start, size, language) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPaidCallHistory', Thrift.MessageType.CALL, this.seqid());
  var params = {
    start: start,
    size: size,
    language: language
  };
  var args = new TalkService_getPaidCallHistory_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getPaidCallHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getPaidCallHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPaidCallHistory failed: unknown result');
};
TalkServiceClient.prototype.blockContact = function(reqSeq, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_blockContact(reqSeq, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_blockContact(reqSeq, id);
  }
};

TalkServiceClient.prototype.send_blockContact = function(reqSeq, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('blockContact', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    id: id
  };
  var args = new TalkService_blockContact_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_blockContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_blockContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.createGroupV2 = function(seq, name, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createGroupV2(seq, name, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createGroupV2(seq, name, contactIds);
  }
};

TalkServiceClient.prototype.send_createGroupV2 = function(seq, name, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createGroupV2', Thrift.MessageType.CALL, this.seqid());
  var params = {
    seq: seq,
    name: name,
    contactIds: contactIds
  };
  var args = new TalkService_createGroupV2_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_createGroupV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_createGroupV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createGroupV2 failed: unknown result');
};
TalkServiceClient.prototype.findAndAddContactsByPhone = function(reqSeq, phones, reference, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactsByPhone(reqSeq, phones, reference);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactsByPhone(reqSeq, phones, reference);
  }
};

TalkServiceClient.prototype.send_findAndAddContactsByPhone = function(reqSeq, phones, reference) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactsByPhone', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    phones: phones,
    reference: reference
  };
  var args = new TalkService_findAndAddContactsByPhone_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findAndAddContactsByPhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findAndAddContactsByPhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactsByPhone failed: unknown result');
};
TalkServiceClient.prototype.getAcceptedProximityMatches = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAcceptedProximityMatches(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAcceptedProximityMatches(sessionId);
  }
};

TalkServiceClient.prototype.send_getAcceptedProximityMatches = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAcceptedProximityMatches', Thrift.MessageType.CALL, this.seqid());
  var params = {
    sessionId: sessionId
  };
  var args = new TalkService_getAcceptedProximityMatches_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getAcceptedProximityMatches = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getAcceptedProximityMatches_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAcceptedProximityMatches failed: unknown result');
};
TalkServiceClient.prototype.getChatRoomAnnouncementsBulk = function(chatRoomMids, syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatRoomAnnouncementsBulk(chatRoomMids, syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatRoomAnnouncementsBulk(chatRoomMids, syncReason);
  }
};

TalkServiceClient.prototype.send_getChatRoomAnnouncementsBulk = function(chatRoomMids, syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatRoomAnnouncementsBulk', Thrift.MessageType.CALL, this.seqid());
  var params = {
    chatRoomMids: chatRoomMids,
    syncReason: syncReason
  };
  var args = new TalkService_getChatRoomAnnouncementsBulk_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getChatRoomAnnouncementsBulk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getChatRoomAnnouncementsBulk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatRoomAnnouncementsBulk failed: unknown result');
};
TalkServiceClient.prototype.getCountries = function(countryGroup, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCountries(countryGroup);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCountries(countryGroup);
  }
};

TalkServiceClient.prototype.send_getCountries = function(countryGroup) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCountries', Thrift.MessageType.CALL, this.seqid());
  var params = {
    countryGroup: countryGroup
  };
  var args = new TalkService_getCountries_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getCountries = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getCountries_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCountries failed: unknown result');
};
TalkServiceClient.prototype.getFollowings = function(getFollowingsRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFollowings(getFollowingsRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFollowings(getFollowingsRequest);
  }
};

TalkServiceClient.prototype.send_getFollowings = function(getFollowingsRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFollowings', Thrift.MessageType.CALL, this.seqid());
  var params = {
    getFollowingsRequest: getFollowingsRequest
  };
  var args = new TalkService_getFollowings_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getFollowings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getFollowings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFollowings failed: unknown result');
};
TalkServiceClient.prototype.getLastOpRevision = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLastOpRevision();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLastOpRevision();
  }
};

TalkServiceClient.prototype.send_getLastOpRevision = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLastOpRevision', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_getLastOpRevision_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getLastOpRevision = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getLastOpRevision_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLastOpRevision failed: unknown result');
};
TalkServiceClient.prototype.getRingbackTone = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRingbackTone();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRingbackTone();
  }
};

TalkServiceClient.prototype.send_getRingbackTone = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRingbackTone', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_getRingbackTone_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getRingbackTone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getRingbackTone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRingbackTone failed: unknown result');
};
TalkServiceClient.prototype.registerWithPhoneNumber = function(sessionId, migrationPincodeSessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerWithPhoneNumber(sessionId, migrationPincodeSessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerWithPhoneNumber(sessionId, migrationPincodeSessionId);
  }
};

TalkServiceClient.prototype.send_registerWithPhoneNumber = function(sessionId, migrationPincodeSessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerWithPhoneNumber', Thrift.MessageType.CALL, this.seqid());
  var params = {
    sessionId: sessionId,
    migrationPincodeSessionId: migrationPincodeSessionId
  };
  var args = new TalkService_registerWithPhoneNumber_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_registerWithPhoneNumber = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_registerWithPhoneNumber_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerWithPhoneNumber failed: unknown result');
};
TalkServiceClient.prototype.report = function(syncOpRevision, category, report, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_report(syncOpRevision, category, report);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_report(syncOpRevision, category, report);
  }
};

TalkServiceClient.prototype.send_report = function(syncOpRevision, category, report) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('report', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncOpRevision: syncOpRevision,
    category: category,
    report: report
  };
  var args = new TalkService_report_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_report = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_report_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.unblockRecommendation = function(reqSeq, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unblockRecommendation(reqSeq, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unblockRecommendation(reqSeq, id);
  }
};

TalkServiceClient.prototype.send_unblockRecommendation = function(reqSeq, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unblockRecommendation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    id: id
  };
  var args = new TalkService_unblockRecommendation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_unblockRecommendation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_unblockRecommendation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.updateGroup = function(reqSeq, group, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateGroup(reqSeq, group);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateGroup(reqSeq, group);
  }
};

TalkServiceClient.prototype.send_updateGroup = function(reqSeq, group) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    group: group
  };
  var args = new TalkService_updateGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.findBuddyContactsByQuery = function(language, country, query, fromIndex, count, requestSource, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource);
  }
};

TalkServiceClient.prototype.send_findBuddyContactsByQuery = function(language, country, query, fromIndex, count, requestSource) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findBuddyContactsByQuery', Thrift.MessageType.CALL, this.seqid());
  var params = {
    language: language,
    country: country,
    query: query,
    fromIndex: fromIndex,
    count: count,
    requestSource: requestSource
  };
  var args = new TalkService_findBuddyContactsByQuery_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findBuddyContactsByQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findBuddyContactsByQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findBuddyContactsByQuery failed: unknown result');
};
TalkServiceClient.prototype.getPaidCallMetadata = function(language, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPaidCallMetadata(language);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPaidCallMetadata(language);
  }
};

TalkServiceClient.prototype.send_getPaidCallMetadata = function(language) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPaidCallMetadata', Thrift.MessageType.CALL, this.seqid());
  var params = {
    language: language
  };
  var args = new TalkService_getPaidCallMetadata_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getPaidCallMetadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getPaidCallMetadata_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPaidCallMetadata failed: unknown result');
};
TalkServiceClient.prototype.blockRecommendation = function(reqSeq, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_blockRecommendation(reqSeq, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_blockRecommendation(reqSeq, id);
  }
};

TalkServiceClient.prototype.send_blockRecommendation = function(reqSeq, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('blockRecommendation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    id: id
  };
  var args = new TalkService_blockRecommendation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_blockRecommendation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_blockRecommendation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.findAndAddContactsByUserid = function(reqSeq, searchId, reference, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactsByUserid(reqSeq, searchId, reference);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactsByUserid(reqSeq, searchId, reference);
  }
};

TalkServiceClient.prototype.send_findAndAddContactsByUserid = function(reqSeq, searchId, reference) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactsByUserid', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    searchId: searchId,
    reference: reference
  };
  var args = new TalkService_findAndAddContactsByUserid_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findAndAddContactsByUserid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findAndAddContactsByUserid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactsByUserid failed: unknown result');
};
TalkServiceClient.prototype.getAllChatMids = function(request, syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllChatMids(request, syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllChatMids(request, syncReason);
  }
};

TalkServiceClient.prototype.send_getAllChatMids = function(request, syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllChatMids', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request,
    syncReason: syncReason
  };
  var args = new TalkService_getAllChatMids_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getAllChatMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getAllChatMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllChatMids failed: unknown result');
};
TalkServiceClient.prototype.getChatRoomAnnouncements = function(chatRoomMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatRoomAnnouncements(chatRoomMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatRoomAnnouncements(chatRoomMids);
  }
};

TalkServiceClient.prototype.send_getChatRoomAnnouncements = function(chatRoomMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatRoomAnnouncements', Thrift.MessageType.CALL, this.seqid());
  var params = {
    chatRoomMids: chatRoomMids
  };
  var args = new TalkService_getChatRoomAnnouncements_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getChatRoomAnnouncements = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getChatRoomAnnouncements_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatRoomAnnouncements failed: unknown result');
};
TalkServiceClient.prototype.getCountryWithRequestIp = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCountryWithRequestIp();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCountryWithRequestIp();
  }
};

TalkServiceClient.prototype.send_getCountryWithRequestIp = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCountryWithRequestIp', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_getCountryWithRequestIp_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getCountryWithRequestIp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getCountryWithRequestIp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCountryWithRequestIp failed: unknown result');
};
TalkServiceClient.prototype.getFriendRequests = function(direction, lastSeenSeqId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFriendRequests(direction, lastSeenSeqId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFriendRequests(direction, lastSeenSeqId);
  }
};

TalkServiceClient.prototype.send_getFriendRequests = function(direction, lastSeenSeqId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFriendRequests', Thrift.MessageType.CALL, this.seqid());
  var params = {
    direction: direction,
    lastSeenSeqId: lastSeenSeqId
  };
  var args = new TalkService_getFriendRequests_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getFriendRequests = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getFriendRequests_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFriendRequests failed: unknown result');
};
TalkServiceClient.prototype.getRingtone = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRingtone();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRingtone();
  }
};

TalkServiceClient.prototype.send_getRingtone = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRingtone', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_getRingtone_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getRingtone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getRingtone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRingtone failed: unknown result');
};
TalkServiceClient.prototype.notifySleep = function(lastRev, badge, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifySleep(lastRev, badge);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifySleep(lastRev, badge);
  }
};

TalkServiceClient.prototype.send_notifySleep = function(lastRev, badge) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifySleep', Thrift.MessageType.CALL, this.seqid());
  var params = {
    lastRev: lastRev,
    badge: badge
  };
  var args = new TalkService_notifySleep_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_notifySleep = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_notifySleep_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.registerWithSnsIdAndIdentityCredential = function(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, migrationPincodeSessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, migrationPincodeSessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, migrationPincodeSessionId);
  }
};

TalkServiceClient.prototype.send_registerWithSnsIdAndIdentityCredential = function(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, migrationPincodeSessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerWithSnsIdAndIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var params = {
    snsIdType: snsIdType,
    snsAccessToken: snsAccessToken,
    identityCredential: identityCredential,
    region: region,
    udidHash: udidHash,
    deviceInfo: deviceInfo,
    migrationPincodeSessionId: migrationPincodeSessionId
  };
  var args = new TalkService_registerWithSnsIdAndIdentityCredential_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_registerWithSnsIdAndIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_registerWithSnsIdAndIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerWithSnsIdAndIdentityCredential failed: unknown result');
};
TalkServiceClient.prototype.removeFollower = function(removeFollowerRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeFollower(removeFollowerRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeFollower(removeFollowerRequest);
  }
};

TalkServiceClient.prototype.send_removeFollower = function(removeFollowerRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeFollower', Thrift.MessageType.CALL, this.seqid());
  var params = {
    removeFollowerRequest: removeFollowerRequest
  };
  var args = new TalkService_removeFollower_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_removeFollower = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_removeFollower_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.requestAccountPasswordReset = function(provider, identifier, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestAccountPasswordReset(provider, identifier, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestAccountPasswordReset(provider, identifier, locale);
  }
};

TalkServiceClient.prototype.send_requestAccountPasswordReset = function(provider, identifier, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestAccountPasswordReset', Thrift.MessageType.CALL, this.seqid());
  var params = {
    provider: provider,
    identifier: identifier,
    locale: locale
  };
  var args = new TalkService_requestAccountPasswordReset_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_requestAccountPasswordReset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_requestAccountPasswordReset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.sendEchoPush = function(text, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendEchoPush(text);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendEchoPush(text);
  }
};

TalkServiceClient.prototype.send_sendEchoPush = function(text) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendEchoPush', Thrift.MessageType.CALL, this.seqid());
  var params = {
    text: text
  };
  var args = new TalkService_sendEchoPush_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_sendEchoPush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_sendEchoPush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.unfollow = function(unfollowRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unfollow(unfollowRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unfollow(unfollowRequest);
  }
};

TalkServiceClient.prototype.send_unfollow = function(unfollowRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unfollow', Thrift.MessageType.CALL, this.seqid());
  var params = {
    unfollowRequest: unfollowRequest
  };
  var args = new TalkService_unfollow_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_unfollow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_unfollow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.inviteIntoGroupCall = function(chatMid, memberMids, mediaType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteIntoGroupCall(chatMid, memberMids, mediaType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteIntoGroupCall(chatMid, memberMids, mediaType);
  }
};

TalkServiceClient.prototype.send_inviteIntoGroupCall = function(chatMid, memberMids, mediaType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteIntoGroupCall', Thrift.MessageType.CALL, this.seqid());
  var params = {
    chatMid: chatMid,
    memberMids: memberMids,
    mediaType: mediaType
  };
  var args = new TalkService_inviteIntoGroupCall_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_inviteIntoGroupCall = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_inviteIntoGroupCall_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.cancelChatInvitation = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelChatInvitation(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelChatInvitation(request);
  }
};

TalkServiceClient.prototype.send_cancelChatInvitation = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelChatInvitation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_cancelChatInvitation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_cancelChatInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_cancelChatInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cancelChatInvitation failed: unknown result');
};
TalkServiceClient.prototype.findChatByTicket = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findChatByTicket(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findChatByTicket(request);
  }
};

TalkServiceClient.prototype.send_findChatByTicket = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findChatByTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_findChatByTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findChatByTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findChatByTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findChatByTicket failed: unknown result');
};
TalkServiceClient.prototype.getAllContactIds = function(syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllContactIds(syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllContactIds(syncReason);
  }
};

TalkServiceClient.prototype.send_getAllContactIds = function(syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllContactIds', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncReason: syncReason
  };
  var args = new TalkService_getAllContactIds_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getAllContactIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getAllContactIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllContactIds failed: unknown result');
};
TalkServiceClient.prototype.getChatRoomBGMs = function(chatRoomMids, syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatRoomBGMs(chatRoomMids, syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatRoomBGMs(chatRoomMids, syncReason);
  }
};

TalkServiceClient.prototype.send_getChatRoomBGMs = function(chatRoomMids, syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatRoomBGMs', Thrift.MessageType.CALL, this.seqid());
  var params = {
    chatRoomMids: chatRoomMids,
    syncReason: syncReason
  };
  var args = new TalkService_getChatRoomBGMs_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getChatRoomBGMs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getChatRoomBGMs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatRoomBGMs failed: unknown result');
};
TalkServiceClient.prototype.getE2EEGroupSharedKey = function(keyVersion, chatMid, groupKeyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getE2EEGroupSharedKey(keyVersion, chatMid, groupKeyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getE2EEGroupSharedKey(keyVersion, chatMid, groupKeyId);
  }
};

TalkServiceClient.prototype.send_getE2EEGroupSharedKey = function(keyVersion, chatMid, groupKeyId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getE2EEGroupSharedKey', Thrift.MessageType.CALL, this.seqid());
  var params = {
    keyVersion: keyVersion,
    chatMid: chatMid,
    groupKeyId: groupKeyId
  };
  var args = new TalkService_getE2EEGroupSharedKey_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getE2EEGroupSharedKey = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getE2EEGroupSharedKey_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getE2EEGroupSharedKey failed: unknown result');
};
TalkServiceClient.prototype.getRSAKeyInfo = function(provider, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRSAKeyInfo(provider);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRSAKeyInfo(provider);
  }
};

TalkServiceClient.prototype.send_getRSAKeyInfo = function(provider) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRSAKeyInfo', Thrift.MessageType.CALL, this.seqid());
  var params = {
    provider: provider
  };
  var args = new TalkService_getRSAKeyInfo_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getRSAKeyInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getRSAKeyInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRSAKeyInfo failed: unknown result');
};
TalkServiceClient.prototype.fetchOperations = function(localRev, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchOperations(localRev, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchOperations(localRev, count);
  }
};

TalkServiceClient.prototype.send_fetchOperations = function(localRev, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchOperations', Thrift.MessageType.CALL, this.seqid());
  var params = {
    localRev: localRev,
    count: count
  };
  var args = new TalkService_fetchOperations_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_fetchOperations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_fetchOperations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchOperations failed: unknown result');
};
TalkServiceClient.prototype.getGroupIdsInvited = function(syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupIdsInvited(syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupIdsInvited(syncReason);
  }
};

TalkServiceClient.prototype.send_getGroupIdsInvited = function(syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupIdsInvited', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncReason: syncReason
  };
  var args = new TalkService_getGroupIdsInvited_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getGroupIdsInvited = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getGroupIdsInvited_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupIdsInvited failed: unknown result');
};
TalkServiceClient.prototype.getProfile = function(syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProfile(syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProfile(syncReason);
  }
};

TalkServiceClient.prototype.send_getProfile = function(syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProfile', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncReason: syncReason
  };
  var args = new TalkService_getProfile_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProfile failed: unknown result');
};
TalkServiceClient.prototype.notifyUpdated = function(lastRev, deviceInfo, udidHash, oldUdidHash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyUpdated(lastRev, deviceInfo, udidHash, oldUdidHash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyUpdated(lastRev, deviceInfo, udidHash, oldUdidHash);
  }
};

TalkServiceClient.prototype.send_notifyUpdated = function(lastRev, deviceInfo, udidHash, oldUdidHash) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyUpdated', Thrift.MessageType.CALL, this.seqid());
  var params = {
    lastRev: lastRev,
    deviceInfo: deviceInfo,
    udidHash: udidHash,
    oldUdidHash: oldUdidHash
  };
  var args = new TalkService_notifyUpdated_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_notifyUpdated = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_notifyUpdated_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.registerWithSnsId = function(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, migrationPincodeSessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, migrationPincodeSessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, migrationPincodeSessionId);
  }
};

TalkServiceClient.prototype.send_registerWithSnsId = function(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, migrationPincodeSessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerWithSnsId', Thrift.MessageType.CALL, this.seqid());
  var params = {
    snsIdType: snsIdType,
    snsAccessToken: snsAccessToken,
    region: region,
    udidHash: udidHash,
    deviceInfo: deviceInfo,
    mid: mid,
    migrationPincodeSessionId: migrationPincodeSessionId
  };
  var args = new TalkService_registerWithSnsId_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_registerWithSnsId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_registerWithSnsId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerWithSnsId failed: unknown result');
};
TalkServiceClient.prototype.removeFriendRequest = function(direction, midOrEMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeFriendRequest(direction, midOrEMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeFriendRequest(direction, midOrEMid);
  }
};

TalkServiceClient.prototype.send_removeFriendRequest = function(direction, midOrEMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeFriendRequest', Thrift.MessageType.CALL, this.seqid());
  var params = {
    direction: direction,
    midOrEMid: midOrEMid
  };
  var args = new TalkService_removeFriendRequest_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_removeFriendRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_removeFriendRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.openAuthSession = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_openAuthSession(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_openAuthSession(request);
  }
};

TalkServiceClient.prototype.send_openAuthSession = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('openAuthSession', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_openAuthSession_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_openAuthSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_openAuthSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('openAuthSession failed: unknown result');
};
TalkServiceClient.prototype.verifyQrcodeWithE2EE = function(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
  }
};

TalkServiceClient.prototype.send_verifyQrcodeWithE2EE = function(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyQrcodeWithE2EE', Thrift.MessageType.CALL, this.seqid());
  var params = {
    verifier: verifier,
    pinCode: pinCode,
    errorCode: errorCode,
    publicKey: publicKey,
    encryptedKeyChain: encryptedKeyChain,
    hashKeyChain: hashKeyChain
  };
  var args = new TalkService_verifyQrcodeWithE2EE_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_verifyQrcodeWithE2EE = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_verifyQrcodeWithE2EE_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyQrcodeWithE2EE failed: unknown result');
};
TalkServiceClient.prototype.getBalance = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBalance(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBalance(request);
  }
};

TalkServiceClient.prototype.send_getBalance = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBalance', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_getBalance_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getBalance = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getBalance_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBalance failed: unknown result');
};
TalkServiceClient.prototype.getGroup = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroup(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroup(groupId);
  }
};

TalkServiceClient.prototype.send_getGroup = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupId: groupId
  };
  var args = new TalkService_getGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroup failed: unknown result');
};
TalkServiceClient.prototype.getGroupWithoutMembers = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupWithoutMembers(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupWithoutMembers(groupId);
  }
};

TalkServiceClient.prototype.send_getGroupWithoutMembers = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupWithoutMembers', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupId: groupId
  };
  var args = new TalkService_getGroupWithoutMembers_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getGroupWithoutMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getGroupWithoutMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupWithoutMembers failed: unknown result');
};
TalkServiceClient.prototype.getCompactGroup = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCompactGroup(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCompactGroup(groupId);
  }
};

TalkServiceClient.prototype.send_getCompactGroup = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCompactGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupId: groupId
  };
  var args = new TalkService_getCompactGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getCompactGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getCompactGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCompactGroup failed: unknown result');
};
TalkServiceClient.prototype.unregisterUserAndDevice = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterUserAndDevice();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterUserAndDevice();
  }
};

TalkServiceClient.prototype.send_unregisterUserAndDevice = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterUserAndDevice', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_unregisterUserAndDevice_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_unregisterUserAndDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_unregisterUserAndDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unregisterUserAndDevice failed: unknown result');
};
TalkServiceClient.prototype.updateNotificationToken = function(type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateNotificationToken(type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateNotificationToken(type);
  }
};

TalkServiceClient.prototype.send_updateNotificationToken = function(type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateNotificationToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    type: type
  };
  var args = new TalkService_updateNotificationToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateNotificationToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateNotificationToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.verifyPhoneNumber = function(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
  }
};

TalkServiceClient.prototype.send_verifyPhoneNumber = function(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyPhoneNumber', Thrift.MessageType.CALL, this.seqid());
  var params = {
    sessionId: sessionId,
    pinCode: pinCode,
    udidHash: udidHash,
    migrationPincodeSessionId: migrationPincodeSessionId,
    oldUdidHash: oldUdidHash
  };
  var args = new TalkService_verifyPhoneNumber_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_verifyPhoneNumber = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_verifyPhoneNumber_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyPhoneNumber failed: unknown result');
};
TalkServiceClient.prototype.cancelGroupInvitation = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelGroupInvitation(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelGroupInvitation(reqSeq, groupId, contactIds);
  }
};

TalkServiceClient.prototype.send_cancelGroupInvitation = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelGroupInvitation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupId: groupId,
    contactIds: contactIds
  };
  var args = new TalkService_cancelGroupInvitation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_cancelGroupInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_cancelGroupInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.createRoomV2 = function(reqSeq, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createRoomV2(reqSeq, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createRoomV2(reqSeq, contactIds);
  }
};

TalkServiceClient.prototype.send_createRoomV2 = function(reqSeq, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createRoomV2', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    contactIds: contactIds
  };
  var args = new TalkService_createRoomV2_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_createRoomV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_createRoomV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createRoomV2 failed: unknown result');
};
TalkServiceClient.prototype.findContactByMetaTag = function(searchId, reference, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactByMetaTag(searchId, reference);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactByMetaTag(searchId, reference);
  }
};

TalkServiceClient.prototype.send_findContactByMetaTag = function(searchId, reference) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactByMetaTag', Thrift.MessageType.CALL, this.seqid());
  var params = {
    searchId: searchId,
    reference: reference
  };
  var args = new TalkService_findContactByMetaTag_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findContactByMetaTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findContactByMetaTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactByMetaTag failed: unknown result');
};
TalkServiceClient.prototype.getChats = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChats(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChats(request);
  }
};

TalkServiceClient.prototype.send_getChats = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChats', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_getChats_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getChats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getChats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChats failed: unknown result');
};
TalkServiceClient.prototype.getGroupIdsJoined = function(syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupIdsJoined(syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupIdsJoined(syncReason);
  }
};

TalkServiceClient.prototype.send_getGroupIdsJoined = function(syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupIdsJoined', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncReason: syncReason
  };
  var args = new TalkService_getGroupIdsJoined_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getGroupIdsJoined = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getGroupIdsJoined_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupIdsJoined failed: unknown result');
};
TalkServiceClient.prototype.getRoomsV2 = function(roomIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRoomsV2(roomIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRoomsV2(roomIds);
  }
};

TalkServiceClient.prototype.send_getRoomsV2 = function(roomIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRoomsV2', Thrift.MessageType.CALL, this.seqid());
  var params = {
    roomIds: roomIds
  };
  var args = new TalkService_getRoomsV2_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getRoomsV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getRoomsV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRoomsV2 failed: unknown result');
};
TalkServiceClient.prototype.reissueChatTicket = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reissueChatTicket(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reissueChatTicket(request);
  }
};

TalkServiceClient.prototype.send_reissueChatTicket = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reissueChatTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_reissueChatTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_reissueChatTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_reissueChatTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reissueChatTicket failed: unknown result');
};
TalkServiceClient.prototype.sendMessage = function(seq, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessage(seq, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessage(seq, message);
  }
};

TalkServiceClient.prototype.send_sendMessage = function(seq, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    seq: seq,
    message: message
  };
  var args = new TalkService_sendMessage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_sendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_sendMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMessage failed: unknown result');
};
TalkServiceClient.prototype.unsendMessage = function(seq, messageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unsendMessage(seq, messageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unsendMessage(seq, messageId);
  }
};

TalkServiceClient.prototype.send_unsendMessage = function(seq, messageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unsendMessage', Thrift.MessageType.CALL, this.seqid());
  var params = {
    seq: seq,
    messageId: messageId
  };
  var args = new TalkService_unsendMessage_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_unsendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_unsendMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.acquireGroupCallRoute = function(chatMid, mediaType, isInitialHost, capabilities, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acquireGroupCallRoute(chatMid, mediaType, isInitialHost, capabilities);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acquireGroupCallRoute(chatMid, mediaType, isInitialHost, capabilities);
  }
};

TalkServiceClient.prototype.send_acquireGroupCallRoute = function(chatMid, mediaType, isInitialHost, capabilities) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acquireGroupCallRoute', Thrift.MessageType.CALL, this.seqid());
  var params = {
    chatMid: chatMid,
    mediaType: mediaType,
    isInitialHost: isInitialHost,
    capabilities: capabilities
  };
  var args = new TalkService_acquireGroupCallRoute_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_acquireGroupCallRoute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_acquireGroupCallRoute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('acquireGroupCallRoute failed: unknown result');
};
TalkServiceClient.prototype.acceptChatInvitationByTicket = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptChatInvitationByTicket(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptChatInvitationByTicket(request);
  }
};

TalkServiceClient.prototype.send_acceptChatInvitationByTicket = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptChatInvitationByTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_acceptChatInvitationByTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_acceptChatInvitationByTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_acceptChatInvitationByTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('acceptChatInvitationByTicket failed: unknown result');
};
TalkServiceClient.prototype.findContactByUserTicket = function(ticketIdWithTag, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactByUserTicket(ticketIdWithTag);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactByUserTicket(ticketIdWithTag);
  }
};

TalkServiceClient.prototype.send_findContactByUserTicket = function(ticketIdWithTag) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactByUserTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    ticketIdWithTag: ticketIdWithTag
  };
  var args = new TalkService_findContactByUserTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findContactByUserTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findContactByUserTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactByUserTicket failed: unknown result');
};
TalkServiceClient.prototype.getE2EEPublicKey = function(mid, keyVersion, keyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getE2EEPublicKey(mid, keyVersion, keyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getE2EEPublicKey(mid, keyVersion, keyId);
  }
};

TalkServiceClient.prototype.send_getE2EEPublicKey = function(mid, keyVersion, keyId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getE2EEPublicKey', Thrift.MessageType.CALL, this.seqid());
  var params = {
    mid: mid,
    keyVersion: keyVersion,
    keyId: keyId
  };
  var args = new TalkService_getE2EEPublicKey_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getE2EEPublicKey = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getE2EEPublicKey_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getE2EEPublicKey failed: unknown result');
};
TalkServiceClient.prototype.registerDeviceWithIdentityCredential = function(sessionId, provider, identifier, verifier, migrationPincodeSessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier, migrationPincodeSessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier, migrationPincodeSessionId);
  }
};

TalkServiceClient.prototype.send_registerDeviceWithIdentityCredential = function(sessionId, provider, identifier, verifier, migrationPincodeSessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDeviceWithIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var params = {
    sessionId: sessionId,
    provider: provider,
    identifier: identifier,
    verifier: verifier,
    migrationPincodeSessionId: migrationPincodeSessionId
  };
  var args = new TalkService_registerDeviceWithIdentityCredential_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_registerDeviceWithIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_registerDeviceWithIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDeviceWithIdentityCredential failed: unknown result');
};
TalkServiceClient.prototype.reissueGroupTicket = function(groupMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reissueGroupTicket(groupMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reissueGroupTicket(groupMid);
  }
};

TalkServiceClient.prototype.send_reissueGroupTicket = function(groupMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reissueGroupTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupMid: groupMid
  };
  var args = new TalkService_reissueGroupTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_reissueGroupTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_reissueGroupTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reissueGroupTicket failed: unknown result');
};
TalkServiceClient.prototype.updateProfileAttributes = function(reqSeq, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateProfileAttributes(reqSeq, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateProfileAttributes(reqSeq, request);
  }
};

TalkServiceClient.prototype.send_updateProfileAttributes = function(reqSeq, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateProfileAttributes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    request: request
  };
  var args = new TalkService_updateProfileAttributes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateProfileAttributes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateProfileAttributes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.verifyQrcode = function(verifier, pinCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyQrcode(verifier, pinCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyQrcode(verifier, pinCode);
  }
};

TalkServiceClient.prototype.send_verifyQrcode = function(verifier, pinCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyQrcode', Thrift.MessageType.CALL, this.seqid());
  var params = {
    verifier: verifier,
    pinCode: pinCode
  };
  var args = new TalkService_verifyQrcode_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_verifyQrcode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_verifyQrcode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyQrcode failed: unknown result');
};
TalkServiceClient.prototype.acceptChatInvitation = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptChatInvitation(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptChatInvitation(request);
  }
};

TalkServiceClient.prototype.send_acceptChatInvitation = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptChatInvitation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_acceptChatInvitation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_acceptChatInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_acceptChatInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('acceptChatInvitation failed: unknown result');
};
TalkServiceClient.prototype.decryptFollowEMid = function(eMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_decryptFollowEMid(eMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_decryptFollowEMid(eMid);
  }
};

TalkServiceClient.prototype.send_decryptFollowEMid = function(eMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('decryptFollowEMid', Thrift.MessageType.CALL, this.seqid());
  var params = {
    eMid: eMid
  };
  var args = new TalkService_decryptFollowEMid_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_decryptFollowEMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_decryptFollowEMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('decryptFollowEMid failed: unknown result');
};
TalkServiceClient.prototype.findContactByUserid = function(searchId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactByUserid(searchId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactByUserid(searchId);
  }
};

TalkServiceClient.prototype.send_findContactByUserid = function(searchId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactByUserid', Thrift.MessageType.CALL, this.seqid());
  var params = {
    searchId: searchId
  };
  var args = new TalkService_findContactByUserid_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findContactByUserid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findContactByUserid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactByUserid failed: unknown result');
};
TalkServiceClient.prototype.getServerTime = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServerTime();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServerTime();
  }
};

TalkServiceClient.prototype.send_getServerTime = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServerTime', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_getServerTime_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getServerTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getServerTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServerTime failed: unknown result');
};
TalkServiceClient.prototype.inviteIntoChat = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteIntoChat(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteIntoChat(request);
  }
};

TalkServiceClient.prototype.send_inviteIntoChat = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteIntoChat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_inviteIntoChat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_inviteIntoChat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_inviteIntoChat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('inviteIntoChat failed: unknown result');
};
TalkServiceClient.prototype.acceptGroupInvitationByTicket = function(reqSeq, groupMid, ticketId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptGroupInvitationByTicket(reqSeq, groupMid, ticketId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptGroupInvitationByTicket(reqSeq, groupMid, ticketId);
  }
};

TalkServiceClient.prototype.send_acceptGroupInvitationByTicket = function(reqSeq, groupMid, ticketId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptGroupInvitationByTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupMid: groupMid,
    ticketId: ticketId
  };
  var args = new TalkService_acceptGroupInvitationByTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_acceptGroupInvitationByTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_acceptGroupInvitationByTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.deleteOtherFromChat = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteOtherFromChat(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteOtherFromChat(request);
  }
};

TalkServiceClient.prototype.send_deleteOtherFromChat = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteOtherFromChat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_deleteOtherFromChat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_deleteOtherFromChat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_deleteOtherFromChat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteOtherFromChat failed: unknown result');
};
TalkServiceClient.prototype.findContactsByPhone = function(phones, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactsByPhone(phones);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactsByPhone(phones);
  }
};

TalkServiceClient.prototype.send_findContactsByPhone = function(phones) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactsByPhone', Thrift.MessageType.CALL, this.seqid());
  var params = {
    phones: phones
  };
  var args = new TalkService_findContactsByPhone_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findContactsByPhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findContactsByPhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactsByPhone failed: unknown result');
};
TalkServiceClient.prototype.getGroupsV2 = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupsV2(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupsV2(groupId);
  }
};

TalkServiceClient.prototype.send_getGroupsV2 = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupsV2', Thrift.MessageType.CALL, this.seqid());
  var params = {
    groupId: groupId
  };
  var args = new TalkService_getGroupsV2_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getGroupsV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getGroupsV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupsV2 failed: unknown result');
};
TalkServiceClient.prototype.inviteIntoGroup = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteIntoGroup(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteIntoGroup(reqSeq, groupId, contactIds);
  }
};

TalkServiceClient.prototype.send_inviteIntoGroup = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteIntoGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupId: groupId,
    contactIds: contactIds
  };
  var args = new TalkService_inviteIntoGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_inviteIntoGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_inviteIntoGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.acceptGroupInvitation = function(reqSeq, groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptGroupInvitation(reqSeq, groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptGroupInvitation(reqSeq, groupId);
  }
};

TalkServiceClient.prototype.send_acceptGroupInvitation = function(reqSeq, groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptGroupInvitation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupId: groupId
  };
  var args = new TalkService_acceptGroupInvitation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_acceptGroupInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_acceptGroupInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.deleteSelfFromChat = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteSelfFromChat(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteSelfFromChat(request);
  }
};

TalkServiceClient.prototype.send_deleteSelfFromChat = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteSelfFromChat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_deleteSelfFromChat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_deleteSelfFromChat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_deleteSelfFromChat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteSelfFromChat failed: unknown result');
};
TalkServiceClient.prototype.getBlockedContactIds = function(syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBlockedContactIds(syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBlockedContactIds(syncReason);
  }
};

TalkServiceClient.prototype.send_getBlockedContactIds = function(syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBlockedContactIds', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncReason: syncReason
  };
  var args = new TalkService_getBlockedContactIds_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getBlockedContactIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getBlockedContactIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBlockedContactIds failed: unknown result');
};
TalkServiceClient.prototype.getSettingsAttributes2 = function(attributesToRetrieve, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSettingsAttributes2(attributesToRetrieve);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSettingsAttributes2(attributesToRetrieve);
  }
};

TalkServiceClient.prototype.send_getSettingsAttributes2 = function(attributesToRetrieve) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSettingsAttributes2', Thrift.MessageType.CALL, this.seqid());
  var params = {
    attributesToRetrieve: attributesToRetrieve
  };
  var args = new TalkService_getSettingsAttributes2_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getSettingsAttributes2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getSettingsAttributes2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSettingsAttributes2 failed: unknown result');
};
TalkServiceClient.prototype.inviteIntoRoom = function(reqSeq, roomId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteIntoRoom(reqSeq, roomId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteIntoRoom(reqSeq, roomId, contactIds);
  }
};

TalkServiceClient.prototype.send_inviteIntoRoom = function(reqSeq, roomId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteIntoRoom', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    roomId: roomId,
    contactIds: contactIds
  };
  var args = new TalkService_inviteIntoRoom_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_inviteIntoRoom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_inviteIntoRoom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.rejectChatInvitation = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rejectChatInvitation(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rejectChatInvitation(request);
  }
};

TalkServiceClient.prototype.send_rejectChatInvitation = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rejectChatInvitation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_rejectChatInvitation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_rejectChatInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_rejectChatInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rejectChatInvitation failed: unknown result');
};
TalkServiceClient.prototype.updateChatRoomBGM = function(reqSeq, chatRoomMid, chatRoomBGMInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChatRoomBGM(reqSeq, chatRoomMid, chatRoomBGMInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChatRoomBGM(reqSeq, chatRoomMid, chatRoomBGMInfo);
  }
};

TalkServiceClient.prototype.send_updateChatRoomBGM = function(reqSeq, chatRoomMid, chatRoomBGMInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChatRoomBGM', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    chatRoomMid: chatRoomMid,
    chatRoomBGMInfo: chatRoomBGMInfo
  };
  var args = new TalkService_updateChatRoomBGM_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateChatRoomBGM = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateChatRoomBGM_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateChatRoomBGM failed: unknown result');
};
TalkServiceClient.prototype.findGroupByTicket = function(ticketId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findGroupByTicket(ticketId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findGroupByTicket(ticketId);
  }
};

TalkServiceClient.prototype.send_findGroupByTicket = function(ticketId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findGroupByTicket', Thrift.MessageType.CALL, this.seqid());
  var params = {
    ticketId: ticketId
  };
  var args = new TalkService_findGroupByTicket_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findGroupByTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findGroupByTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findGroupByTicket failed: unknown result');
};
TalkServiceClient.prototype.getRecentFriendRequests = function(syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRecentFriendRequests(syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRecentFriendRequests(syncReason);
  }
};

TalkServiceClient.prototype.send_getRecentFriendRequests = function(syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRecentFriendRequests', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncReason: syncReason
  };
  var args = new TalkService_getRecentFriendRequests_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getRecentFriendRequests = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getRecentFriendRequests_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRecentFriendRequests failed: unknown result');
};
TalkServiceClient.prototype.getSettingsAttributes = function(attrBitset, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSettingsAttributes(attrBitset);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSettingsAttributes(attrBitset);
  }
};

TalkServiceClient.prototype.send_getSettingsAttributes = function(attrBitset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSettingsAttributes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    attrBitset: attrBitset
  };
  var args = new TalkService_getSettingsAttributes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getSettingsAttributes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getSettingsAttributes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSettingsAttributes failed: unknown result');
};
TalkServiceClient.prototype.rejectGroupInvitation = function(reqSeq, groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rejectGroupInvitation(reqSeq, groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rejectGroupInvitation(reqSeq, groupId);
  }
};

TalkServiceClient.prototype.send_rejectGroupInvitation = function(reqSeq, groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rejectGroupInvitation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupId: groupId
  };
  var args = new TalkService_rejectGroupInvitation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_rejectGroupInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_rejectGroupInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.updateChat = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChat(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChat(request);
  }
};

TalkServiceClient.prototype.send_updateChat = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChat', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new TalkService_updateChat_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateChat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateChat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateChat failed: unknown result');
};
TalkServiceClient.prototype.updateSettingsAttributes2 = function(reqSeq, attributesToUpdate, settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSettingsAttributes2(reqSeq, attributesToUpdate, settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSettingsAttributes2(reqSeq, attributesToUpdate, settings);
  }
};

TalkServiceClient.prototype.send_updateSettingsAttributes2 = function(reqSeq, attributesToUpdate, settings) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSettingsAttributes2', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    attributesToUpdate: attributesToUpdate,
    settings: settings
  };
  var args = new TalkService_updateSettingsAttributes2_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateSettingsAttributes2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateSettingsAttributes2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSettingsAttributes2 failed: unknown result');
};
TalkServiceClient.prototype.getSettings = function(syncReason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSettings(syncReason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSettings(syncReason);
  }
};

TalkServiceClient.prototype.send_getSettings = function(syncReason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSettings', Thrift.MessageType.CALL, this.seqid());
  var params = {
    syncReason: syncReason
  };
  var args = new TalkService_getSettings_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSettings failed: unknown result');
};
TalkServiceClient.prototype.noop = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_noop();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_noop();
  }
};

TalkServiceClient.prototype.send_noop = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('noop', Thrift.MessageType.CALL, this.seqid());
  var args = new TalkService_noop_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_noop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_noop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.removeAllMessages = function(seq, lastMessageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeAllMessages(seq, lastMessageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeAllMessages(seq, lastMessageId);
  }
};

TalkServiceClient.prototype.send_removeAllMessages = function(seq, lastMessageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeAllMessages', Thrift.MessageType.CALL, this.seqid());
  var params = {
    seq: seq,
    lastMessageId: lastMessageId
  };
  var args = new TalkService_removeAllMessages_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_removeAllMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_removeAllMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.updateContactSetting = function(reqSeq, mid, flag, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateContactSetting(reqSeq, mid, flag, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateContactSetting(reqSeq, mid, flag, value);
  }
};

TalkServiceClient.prototype.send_updateContactSetting = function(reqSeq, mid, flag, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateContactSetting', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    mid: mid,
    flag: flag,
    value: value
  };
  var args = new TalkService_updateContactSetting_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateContactSetting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateContactSetting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.getGroupCall = function(chatMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupCall(chatMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupCall(chatMid);
  }
};

TalkServiceClient.prototype.send_getGroupCall = function(chatMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupCall', Thrift.MessageType.CALL, this.seqid());
  var params = {
    chatMid: chatMid
  };
  var args = new TalkService_getGroupCall_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getGroupCall = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getGroupCall_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupCall failed: unknown result');
};
TalkServiceClient.prototype.fetchOps = function(localRev, count, globalRev, individualRev, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchOps(localRev, count, globalRev, individualRev);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchOps(localRev, count, globalRev, individualRev);
  }
};

TalkServiceClient.prototype.send_fetchOps = function(localRev, count, globalRev, individualRev) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchOps', Thrift.MessageType.CALL, this.seqid());
  var params = {
    localRev: localRev,
    count: count,
    globalRev: globalRev,
    individualRev: individualRev
  };
  var args = new TalkService_fetchOps_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_fetchOps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_fetchOps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchOps failed: unknown result');
};
TalkServiceClient.prototype.kickoutFromGroup = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_kickoutFromGroup(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_kickoutFromGroup(reqSeq, groupId, contactIds);
  }
};

TalkServiceClient.prototype.send_kickoutFromGroup = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('kickoutFromGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupId: groupId,
    contactIds: contactIds
  };
  var args = new TalkService_kickoutFromGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_kickoutFromGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_kickoutFromGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.acquireEncryptedAccessToken = function(featureType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acquireEncryptedAccessToken(featureType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acquireEncryptedAccessToken(featureType);
  }
};

TalkServiceClient.prototype.send_acquireEncryptedAccessToken = function(featureType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acquireEncryptedAccessToken', Thrift.MessageType.CALL, this.seqid());
  var params = {
    featureType: featureType
  };
  var args = new TalkService_acquireEncryptedAccessToken_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_acquireEncryptedAccessToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_acquireEncryptedAccessToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('acquireEncryptedAccessToken failed: unknown result');
};
TalkServiceClient.prototype.createChatRoomAnnouncement = function(reqSeq, chatRoomMid, type, contents, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents);
  }
};

TalkServiceClient.prototype.send_createChatRoomAnnouncement = function(reqSeq, chatRoomMid, type, contents) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createChatRoomAnnouncement', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    chatRoomMid: chatRoomMid,
    type: type,
    contents: contents
  };
  var args = new TalkService_createChatRoomAnnouncement_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_createChatRoomAnnouncement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_createChatRoomAnnouncement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createChatRoomAnnouncement failed: unknown result');
};
TalkServiceClient.prototype.findAndAddContactByMetaTag = function(reqSeq, searchId, reference, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactByMetaTag(reqSeq, searchId, reference);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactByMetaTag(reqSeq, searchId, reference);
  }
};

TalkServiceClient.prototype.send_findAndAddContactByMetaTag = function(reqSeq, searchId, reference) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactByMetaTag', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    searchId: searchId,
    reference: reference
  };
  var args = new TalkService_findAndAddContactByMetaTag_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_findAndAddContactByMetaTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_findAndAddContactByMetaTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactByMetaTag failed: unknown result');
};
TalkServiceClient.prototype.follow = function(followRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_follow(followRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_follow(followRequest);
  }
};

TalkServiceClient.prototype.send_follow = function(followRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('follow', Thrift.MessageType.CALL, this.seqid());
  var params = {
    followRequest: followRequest
  };
  var args = new TalkService_follow_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_follow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_follow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.getContact = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContact(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContact(id);
  }
};

TalkServiceClient.prototype.send_getContact = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContact', Thrift.MessageType.CALL, this.seqid());
  var params = {
    id: id
  };
  var args = new TalkService_getContact_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_getContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_getContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContact failed: unknown result');
};
TalkServiceClient.prototype.leaveGroup = function(reqSeq, groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_leaveGroup(reqSeq, groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_leaveGroup(reqSeq, groupId);
  }
};

TalkServiceClient.prototype.send_leaveGroup = function(reqSeq, groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('leaveGroup', Thrift.MessageType.CALL, this.seqid());
  var params = {
    reqSeq: reqSeq,
    groupId: groupId
  };
  var args = new TalkService_leaveGroup_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_leaveGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_leaveGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.sendChatChecked = function(seq, chatMid, lastMessageId, sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendChatChecked(seq, chatMid, lastMessageId, sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendChatChecked(seq, chatMid, lastMessageId, sessionId);
  }
};

TalkServiceClient.prototype.send_sendChatChecked = function(seq, chatMid, lastMessageId, sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendChatChecked', Thrift.MessageType.CALL, this.seqid());
  var params = {
    seq: seq,
    chatMid: chatMid,
    lastMessageId: lastMessageId,
    sessionId: sessionId
  };
  var args = new TalkService_sendChatChecked_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_sendChatChecked = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_sendChatChecked_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
TalkServiceClient.prototype.updateIdentifier = function(authSessionId, request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateIdentifier(authSessionId, request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateIdentifier(authSessionId, request);
  }
};

TalkServiceClient.prototype.send_updateIdentifier = function(authSessionId, request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateIdentifier', Thrift.MessageType.CALL, this.seqid());
  var params = {
    authSessionId: authSessionId,
    request: request
  };
  var args = new TalkService_updateIdentifier_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TalkServiceClient.prototype.recv_updateIdentifier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TalkService_updateIdentifier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateIdentifier failed: unknown result');
};
var TalkServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
TalkServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
TalkServiceProcessor.prototype.process_tryFriendRequest = function(seqid, input, output) {
  var args = new TalkService_tryFriendRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.tryFriendRequest.length === 3) {
    Q.fcall(this._handler.tryFriendRequest.bind(this._handler), args.midOrEMid, args.method, args.friendRequestParams)
      .then(function(result) {
        var result_obj = new TalkService_tryFriendRequest_result({success: result});
        output.writeMessageBegin("tryFriendRequest", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_tryFriendRequest_result(err);
          output.writeMessageBegin("tryFriendRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("tryFriendRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.tryFriendRequest(args.midOrEMid, args.method, args.friendRequestParams, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_tryFriendRequest_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("tryFriendRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tryFriendRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateExtendedProfileAttribute = function(seqid, input, output) {
  var args = new TalkService_updateExtendedProfileAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateExtendedProfileAttribute.length === 3) {
    Q.fcall(this._handler.updateExtendedProfileAttribute.bind(this._handler), args.reqSeq, args.attr, args.extendedProfile)
      .then(function(result) {
        var result_obj = new TalkService_updateExtendedProfileAttribute_result({success: result});
        output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateExtendedProfileAttribute_result(err);
          output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateExtendedProfileAttribute(args.reqSeq, args.attr, args.extendedProfile, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateExtendedProfileAttribute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateExtendedProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_verifyAccountMigration = function(seqid, input, output) {
  var args = new TalkService_verifyAccountMigration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyAccountMigration.length === 1) {
    Q.fcall(this._handler.verifyAccountMigration.bind(this._handler), args.migrationSessionId)
      .then(function(result) {
        var result_obj = new TalkService_verifyAccountMigration_result({success: result});
        output.writeMessageBegin("verifyAccountMigration", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_verifyAccountMigration_result(err);
          output.writeMessageBegin("verifyAccountMigration", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyAccountMigration", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyAccountMigration(args.migrationSessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_verifyAccountMigration_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyAccountMigration", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyAccountMigration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_reportLocation = function(seqid, input, output) {
  var args = new TalkService_reportLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportLocation.length === 3) {
    Q.fcall(this._handler.reportLocation.bind(this._handler), args.location, args.trigger, args.networkStatus)
      .then(function(result) {
        var result_obj = new TalkService_reportLocation_result({success: result});
        output.writeMessageBegin("reportLocation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_reportLocation_result(err);
          output.writeMessageBegin("reportLocation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reportLocation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reportLocation(args.location, args.trigger, args.networkStatus, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_reportLocation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reportLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getPaidCallBalanceList = function(seqid, input, output) {
  var args = new TalkService_getPaidCallBalanceList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPaidCallBalanceList.length === 1) {
    Q.fcall(this._handler.getPaidCallBalanceList.bind(this._handler), args.language)
      .then(function(result) {
        var result_obj = new TalkService_getPaidCallBalanceList_result({success: result});
        output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getPaidCallBalanceList_result(err);
          output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPaidCallBalanceList(args.language, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getPaidCallBalanceList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPaidCallBalanceList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_createChat = function(seqid, input, output) {
  var args = new TalkService_createChat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createChat.length === 1) {
    Q.fcall(this._handler.createChat.bind(this._handler), args.requests)
      .then(function(result) {
        var result_obj = new TalkService_createChat_result({success: result});
        output.writeMessageBegin("createChat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_createChat_result(err);
          output.writeMessageBegin("createChat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createChat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createChat(args.requests, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_createChat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createChat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createChat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findAndAddContactsByMid = function(seqid, input, output) {
  var args = new TalkService_findAndAddContactsByMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactsByMid.length === 4) {
    Q.fcall(this._handler.findAndAddContactsByMid.bind(this._handler), args.reqSeq, args.mid, args.type, args.reference)
      .then(function(result) {
        var result_obj = new TalkService_findAndAddContactsByMid_result({success: result});
        output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findAndAddContactsByMid_result(err);
          output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactsByMid(args.reqSeq, args.mid, args.type, args.reference, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findAndAddContactsByMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_generateUserTicket = function(seqid, input, output) {
  var args = new TalkService_generateUserTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generateUserTicket.length === 2) {
    Q.fcall(this._handler.generateUserTicket.bind(this._handler), args.expirationTime, args.maxUseCount)
      .then(function(result) {
        var result_obj = new TalkService_generateUserTicket_result({success: result});
        output.writeMessageBegin("generateUserTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_generateUserTicket_result(err);
          output.writeMessageBegin("generateUserTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("generateUserTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.generateUserTicket(args.expirationTime, args.maxUseCount, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_generateUserTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("generateUserTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generateUserTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getContacts = function(seqid, input, output) {
  var args = new TalkService_getContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContacts.length === 1) {
    Q.fcall(this._handler.getContacts.bind(this._handler), args.ids)
      .then(function(result) {
        var result_obj = new TalkService_getContacts_result({success: result});
        output.writeMessageBegin("getContacts", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getContacts_result(err);
          output.writeMessageBegin("getContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContacts(args.ids, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getContacts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getFollowers = function(seqid, input, output) {
  var args = new TalkService_getFollowers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFollowers.length === 1) {
    Q.fcall(this._handler.getFollowers.bind(this._handler), args.getFollowersRequest)
      .then(function(result) {
        var result_obj = new TalkService_getFollowers_result({success: result});
        output.writeMessageBegin("getFollowers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getFollowers_result(err);
          output.writeMessageBegin("getFollowers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFollowers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFollowers(args.getFollowersRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getFollowers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFollowers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFollowers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getLastE2EEPublicKeys = function(seqid, input, output) {
  var args = new TalkService_getLastE2EEPublicKeys_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLastE2EEPublicKeys.length === 1) {
    Q.fcall(this._handler.getLastE2EEPublicKeys.bind(this._handler), args.chatMid)
      .then(function(result) {
        var result_obj = new TalkService_getLastE2EEPublicKeys_result({success: result});
        output.writeMessageBegin("getLastE2EEPublicKeys", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getLastE2EEPublicKeys_result(err);
          output.writeMessageBegin("getLastE2EEPublicKeys", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLastE2EEPublicKeys", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLastE2EEPublicKeys(args.chatMid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getLastE2EEPublicKeys_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLastE2EEPublicKeys", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLastE2EEPublicKeys", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_leaveRoom = function(seqid, input, output) {
  var args = new TalkService_leaveRoom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.leaveRoom.length === 2) {
    Q.fcall(this._handler.leaveRoom.bind(this._handler), args.reqSeq, args.roomId)
      .then(function(result) {
        var result_obj = new TalkService_leaveRoom_result({success: result});
        output.writeMessageBegin("leaveRoom", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_leaveRoom_result(err);
          output.writeMessageBegin("leaveRoom", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("leaveRoom", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.leaveRoom(args.reqSeq, args.roomId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_leaveRoom_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("leaveRoom", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("leaveRoom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_notifyRegistrationComplete = function(seqid, input, output) {
  var args = new TalkService_notifyRegistrationComplete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyRegistrationComplete.length === 2) {
    Q.fcall(this._handler.notifyRegistrationComplete.bind(this._handler), args.udidHash, args.applicationTypeWithExtensions)
      .then(function(result) {
        var result_obj = new TalkService_notifyRegistrationComplete_result({success: result});
        output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_notifyRegistrationComplete_result(err);
          output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyRegistrationComplete(args.udidHash, args.applicationTypeWithExtensions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_notifyRegistrationComplete_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_removeChatRoomAnnouncement = function(seqid, input, output) {
  var args = new TalkService_removeChatRoomAnnouncement_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeChatRoomAnnouncement.length === 3) {
    Q.fcall(this._handler.removeChatRoomAnnouncement.bind(this._handler), args.reqSeq, args.chatRoomMid, args.announcementSeq)
      .then(function(result) {
        var result_obj = new TalkService_removeChatRoomAnnouncement_result({success: result});
        output.writeMessageBegin("removeChatRoomAnnouncement", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_removeChatRoomAnnouncement_result(err);
          output.writeMessageBegin("removeChatRoomAnnouncement", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeChatRoomAnnouncement", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.announcementSeq, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_removeChatRoomAnnouncement_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeChatRoomAnnouncement", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeChatRoomAnnouncement", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_sendChatRemoved = function(seqid, input, output) {
  var args = new TalkService_sendChatRemoved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendChatRemoved.length === 4) {
    Q.fcall(this._handler.sendChatRemoved.bind(this._handler), args.seq, args.chatMid, args.lastMessageId, args.sessionId)
      .then(function(result) {
        var result_obj = new TalkService_sendChatRemoved_result({success: result});
        output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_sendChatRemoved_result(err);
          output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendChatRemoved(args.seq, args.chatMid, args.lastMessageId, args.sessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_sendChatRemoved_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updatePassword = function(seqid, input, output) {
  var args = new TalkService_updatePassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updatePassword.length === 2) {
    Q.fcall(this._handler.updatePassword.bind(this._handler), args.authSessionId, args.request)
      .then(function(result) {
        var result_obj = new TalkService_updatePassword_result({success: result});
        output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updatePassword_result(err);
          output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updatePassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updatePassword(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updatePassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_unblockContact = function(seqid, input, output) {
  var args = new TalkService_unblockContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unblockContact.length === 3) {
    Q.fcall(this._handler.unblockContact.bind(this._handler), args.reqSeq, args.id, args.reference)
      .then(function(result) {
        var result_obj = new TalkService_unblockContact_result({success: result});
        output.writeMessageBegin("unblockContact", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_unblockContact_result(err);
          output.writeMessageBegin("unblockContact", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unblockContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unblockContact(args.reqSeq, args.id, args.reference, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_unblockContact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unblockContact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unblockContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateGroupPreferenceAttribute = function(seqid, input, output) {
  var args = new TalkService_updateGroupPreferenceAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateGroupPreferenceAttribute.length === 3) {
    Q.fcall(this._handler.updateGroupPreferenceAttribute.bind(this._handler), args.reqSeq, args.groupMid, args.updatedAttrs)
      .then(function(result) {
        var result_obj = new TalkService_updateGroupPreferenceAttribute_result({success: result});
        output.writeMessageBegin("updateGroupPreferenceAttribute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateGroupPreferenceAttribute_result(err);
          output.writeMessageBegin("updateGroupPreferenceAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateGroupPreferenceAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateGroupPreferenceAttribute(args.reqSeq, args.groupMid, args.updatedAttrs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateGroupPreferenceAttribute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateGroupPreferenceAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateGroupPreferenceAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_verifyIdentityCredentialWithResult = function(seqid, input, output) {
  var args = new TalkService_verifyIdentityCredentialWithResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyIdentityCredentialWithResult.length === 2) {
    Q.fcall(this._handler.verifyIdentityCredentialWithResult.bind(this._handler), args.identityCredential, args.migrationPincodeSessionId)
      .then(function(result) {
        var result_obj = new TalkService_verifyIdentityCredentialWithResult_result({success: result});
        output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_verifyIdentityCredentialWithResult_result(err);
          output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyIdentityCredentialWithResult(args.identityCredential, args.migrationPincodeSessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_verifyIdentityCredentialWithResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_requestCleanupUserProvidedData = function(seqid, input, output) {
  var args = new TalkService_requestCleanupUserProvidedData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestCleanupUserProvidedData.length === 1) {
    Q.fcall(this._handler.requestCleanupUserProvidedData.bind(this._handler), args.dataTypes)
      .then(function(result) {
        var result_obj = new TalkService_requestCleanupUserProvidedData_result({success: result});
        output.writeMessageBegin("requestCleanupUserProvidedData", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_requestCleanupUserProvidedData_result(err);
          output.writeMessageBegin("requestCleanupUserProvidedData", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestCleanupUserProvidedData", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestCleanupUserProvidedData(args.dataTypes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_requestCleanupUserProvidedData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("requestCleanupUserProvidedData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestCleanupUserProvidedData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getBuddyStatusBarV2 = function(seqid, input, output) {
  var args = new TalkService_getBuddyStatusBarV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyStatusBarV2.length === 1) {
    Q.fcall(this._handler.getBuddyStatusBarV2.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_getBuddyStatusBarV2_result({success: result});
        output.writeMessageBegin("getBuddyStatusBarV2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getBuddyStatusBarV2_result(err);
          output.writeMessageBegin("getBuddyStatusBarV2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyStatusBarV2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyStatusBarV2(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getBuddyStatusBarV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBuddyStatusBarV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyStatusBarV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getPaidCallHistory = function(seqid, input, output) {
  var args = new TalkService_getPaidCallHistory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPaidCallHistory.length === 3) {
    Q.fcall(this._handler.getPaidCallHistory.bind(this._handler), args.start, args.size, args.language)
      .then(function(result) {
        var result_obj = new TalkService_getPaidCallHistory_result({success: result});
        output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getPaidCallHistory_result(err);
          output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPaidCallHistory(args.start, args.size, args.language, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getPaidCallHistory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPaidCallHistory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_blockContact = function(seqid, input, output) {
  var args = new TalkService_blockContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.blockContact.length === 2) {
    Q.fcall(this._handler.blockContact.bind(this._handler), args.reqSeq, args.id)
      .then(function(result) {
        var result_obj = new TalkService_blockContact_result({success: result});
        output.writeMessageBegin("blockContact", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_blockContact_result(err);
          output.writeMessageBegin("blockContact", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("blockContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.blockContact(args.reqSeq, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_blockContact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("blockContact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("blockContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_createGroupV2 = function(seqid, input, output) {
  var args = new TalkService_createGroupV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createGroupV2.length === 3) {
    Q.fcall(this._handler.createGroupV2.bind(this._handler), args.seq, args.name, args.contactIds)
      .then(function(result) {
        var result_obj = new TalkService_createGroupV2_result({success: result});
        output.writeMessageBegin("createGroupV2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_createGroupV2_result(err);
          output.writeMessageBegin("createGroupV2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createGroupV2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createGroupV2(args.seq, args.name, args.contactIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_createGroupV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createGroupV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createGroupV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findAndAddContactsByPhone = function(seqid, input, output) {
  var args = new TalkService_findAndAddContactsByPhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactsByPhone.length === 3) {
    Q.fcall(this._handler.findAndAddContactsByPhone.bind(this._handler), args.reqSeq, args.phones, args.reference)
      .then(function(result) {
        var result_obj = new TalkService_findAndAddContactsByPhone_result({success: result});
        output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findAndAddContactsByPhone_result(err);
          output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactsByPhone(args.reqSeq, args.phones, args.reference, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findAndAddContactsByPhone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getAcceptedProximityMatches = function(seqid, input, output) {
  var args = new TalkService_getAcceptedProximityMatches_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAcceptedProximityMatches.length === 1) {
    Q.fcall(this._handler.getAcceptedProximityMatches.bind(this._handler), args.sessionId)
      .then(function(result) {
        var result_obj = new TalkService_getAcceptedProximityMatches_result({success: result});
        output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getAcceptedProximityMatches_result(err);
          output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAcceptedProximityMatches(args.sessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getAcceptedProximityMatches_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getChatRoomAnnouncementsBulk = function(seqid, input, output) {
  var args = new TalkService_getChatRoomAnnouncementsBulk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatRoomAnnouncementsBulk.length === 2) {
    Q.fcall(this._handler.getChatRoomAnnouncementsBulk.bind(this._handler), args.chatRoomMids, args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getChatRoomAnnouncementsBulk_result({success: result});
        output.writeMessageBegin("getChatRoomAnnouncementsBulk", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getChatRoomAnnouncementsBulk_result(err);
          output.writeMessageBegin("getChatRoomAnnouncementsBulk", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChatRoomAnnouncementsBulk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatRoomAnnouncementsBulk(args.chatRoomMids, args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getChatRoomAnnouncementsBulk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getChatRoomAnnouncementsBulk", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChatRoomAnnouncementsBulk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getCountries = function(seqid, input, output) {
  var args = new TalkService_getCountries_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCountries.length === 1) {
    Q.fcall(this._handler.getCountries.bind(this._handler), args.countryGroup)
      .then(function(result) {
        var result_obj = new TalkService_getCountries_result({success: result});
        output.writeMessageBegin("getCountries", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getCountries_result(err);
          output.writeMessageBegin("getCountries", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountries", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCountries(args.countryGroup, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getCountries_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCountries", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCountries", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getFollowings = function(seqid, input, output) {
  var args = new TalkService_getFollowings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFollowings.length === 1) {
    Q.fcall(this._handler.getFollowings.bind(this._handler), args.getFollowingsRequest)
      .then(function(result) {
        var result_obj = new TalkService_getFollowings_result({success: result});
        output.writeMessageBegin("getFollowings", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getFollowings_result(err);
          output.writeMessageBegin("getFollowings", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFollowings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFollowings(args.getFollowingsRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getFollowings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFollowings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFollowings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getLastOpRevision = function(seqid, input, output) {
  var args = new TalkService_getLastOpRevision_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLastOpRevision.length === 0) {
    Q.fcall(this._handler.getLastOpRevision.bind(this._handler))
      .then(function(result) {
        var result_obj = new TalkService_getLastOpRevision_result({success: result});
        output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getLastOpRevision_result(err);
          output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLastOpRevision(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getLastOpRevision_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getRingbackTone = function(seqid, input, output) {
  var args = new TalkService_getRingbackTone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRingbackTone.length === 0) {
    Q.fcall(this._handler.getRingbackTone.bind(this._handler))
      .then(function(result) {
        var result_obj = new TalkService_getRingbackTone_result({success: result});
        output.writeMessageBegin("getRingbackTone", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getRingbackTone_result(err);
          output.writeMessageBegin("getRingbackTone", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRingbackTone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRingbackTone(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getRingbackTone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRingbackTone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRingbackTone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_registerWithPhoneNumber = function(seqid, input, output) {
  var args = new TalkService_registerWithPhoneNumber_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerWithPhoneNumber.length === 2) {
    Q.fcall(this._handler.registerWithPhoneNumber.bind(this._handler), args.sessionId, args.migrationPincodeSessionId)
      .then(function(result) {
        var result_obj = new TalkService_registerWithPhoneNumber_result({success: result});
        output.writeMessageBegin("registerWithPhoneNumber", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_registerWithPhoneNumber_result(err);
          output.writeMessageBegin("registerWithPhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerWithPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerWithPhoneNumber(args.sessionId, args.migrationPincodeSessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_registerWithPhoneNumber_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerWithPhoneNumber", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerWithPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_report = function(seqid, input, output) {
  var args = new TalkService_report_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.report.length === 3) {
    Q.fcall(this._handler.report.bind(this._handler), args.syncOpRevision, args.category, args.report)
      .then(function(result) {
        var result_obj = new TalkService_report_result({success: result});
        output.writeMessageBegin("report", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_report_result(err);
          output.writeMessageBegin("report", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("report", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.report(args.syncOpRevision, args.category, args.report, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_report_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("report", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("report", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_unblockRecommendation = function(seqid, input, output) {
  var args = new TalkService_unblockRecommendation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unblockRecommendation.length === 2) {
    Q.fcall(this._handler.unblockRecommendation.bind(this._handler), args.reqSeq, args.id)
      .then(function(result) {
        var result_obj = new TalkService_unblockRecommendation_result({success: result});
        output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_unblockRecommendation_result(err);
          output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unblockRecommendation(args.reqSeq, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_unblockRecommendation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateGroup = function(seqid, input, output) {
  var args = new TalkService_updateGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateGroup.length === 2) {
    Q.fcall(this._handler.updateGroup.bind(this._handler), args.reqSeq, args.group)
      .then(function(result) {
        var result_obj = new TalkService_updateGroup_result({success: result});
        output.writeMessageBegin("updateGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateGroup_result(err);
          output.writeMessageBegin("updateGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateGroup(args.reqSeq, args.group, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findBuddyContactsByQuery = function(seqid, input, output) {
  var args = new TalkService_findBuddyContactsByQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findBuddyContactsByQuery.length === 6) {
    Q.fcall(this._handler.findBuddyContactsByQuery.bind(this._handler), args.language, args.country, args.query, args.fromIndex, args.count, args.requestSource)
      .then(function(result) {
        var result_obj = new TalkService_findBuddyContactsByQuery_result({success: result});
        output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findBuddyContactsByQuery_result(err);
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findBuddyContactsByQuery(args.language, args.country, args.query, args.fromIndex, args.count, args.requestSource, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findBuddyContactsByQuery_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getPaidCallMetadata = function(seqid, input, output) {
  var args = new TalkService_getPaidCallMetadata_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPaidCallMetadata.length === 1) {
    Q.fcall(this._handler.getPaidCallMetadata.bind(this._handler), args.language)
      .then(function(result) {
        var result_obj = new TalkService_getPaidCallMetadata_result({success: result});
        output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getPaidCallMetadata_result(err);
          output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPaidCallMetadata(args.language, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getPaidCallMetadata_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPaidCallMetadata", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_blockRecommendation = function(seqid, input, output) {
  var args = new TalkService_blockRecommendation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.blockRecommendation.length === 2) {
    Q.fcall(this._handler.blockRecommendation.bind(this._handler), args.reqSeq, args.id)
      .then(function(result) {
        var result_obj = new TalkService_blockRecommendation_result({success: result});
        output.writeMessageBegin("blockRecommendation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_blockRecommendation_result(err);
          output.writeMessageBegin("blockRecommendation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("blockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.blockRecommendation(args.reqSeq, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_blockRecommendation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("blockRecommendation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("blockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findAndAddContactsByUserid = function(seqid, input, output) {
  var args = new TalkService_findAndAddContactsByUserid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactsByUserid.length === 3) {
    Q.fcall(this._handler.findAndAddContactsByUserid.bind(this._handler), args.reqSeq, args.searchId, args.reference)
      .then(function(result) {
        var result_obj = new TalkService_findAndAddContactsByUserid_result({success: result});
        output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findAndAddContactsByUserid_result(err);
          output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactsByUserid(args.reqSeq, args.searchId, args.reference, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findAndAddContactsByUserid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getAllChatMids = function(seqid, input, output) {
  var args = new TalkService_getAllChatMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllChatMids.length === 2) {
    Q.fcall(this._handler.getAllChatMids.bind(this._handler), args.request, args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getAllChatMids_result({success: result});
        output.writeMessageBegin("getAllChatMids", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getAllChatMids_result(err);
          output.writeMessageBegin("getAllChatMids", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllChatMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllChatMids(args.request, args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getAllChatMids_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllChatMids", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllChatMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getChatRoomAnnouncements = function(seqid, input, output) {
  var args = new TalkService_getChatRoomAnnouncements_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatRoomAnnouncements.length === 1) {
    Q.fcall(this._handler.getChatRoomAnnouncements.bind(this._handler), args.chatRoomMids)
      .then(function(result) {
        var result_obj = new TalkService_getChatRoomAnnouncements_result({success: result});
        output.writeMessageBegin("getChatRoomAnnouncements", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getChatRoomAnnouncements_result(err);
          output.writeMessageBegin("getChatRoomAnnouncements", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChatRoomAnnouncements", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatRoomAnnouncements(args.chatRoomMids, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getChatRoomAnnouncements_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getChatRoomAnnouncements", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChatRoomAnnouncements", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getCountryWithRequestIp = function(seqid, input, output) {
  var args = new TalkService_getCountryWithRequestIp_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCountryWithRequestIp.length === 0) {
    Q.fcall(this._handler.getCountryWithRequestIp.bind(this._handler))
      .then(function(result) {
        var result_obj = new TalkService_getCountryWithRequestIp_result({success: result});
        output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getCountryWithRequestIp_result(err);
          output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCountryWithRequestIp(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getCountryWithRequestIp_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getFriendRequests = function(seqid, input, output) {
  var args = new TalkService_getFriendRequests_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFriendRequests.length === 2) {
    Q.fcall(this._handler.getFriendRequests.bind(this._handler), args.direction, args.lastSeenSeqId)
      .then(function(result) {
        var result_obj = new TalkService_getFriendRequests_result({success: result});
        output.writeMessageBegin("getFriendRequests", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getFriendRequests_result(err);
          output.writeMessageBegin("getFriendRequests", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFriendRequests", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFriendRequests(args.direction, args.lastSeenSeqId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getFriendRequests_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFriendRequests", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFriendRequests", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getRingtone = function(seqid, input, output) {
  var args = new TalkService_getRingtone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRingtone.length === 0) {
    Q.fcall(this._handler.getRingtone.bind(this._handler))
      .then(function(result) {
        var result_obj = new TalkService_getRingtone_result({success: result});
        output.writeMessageBegin("getRingtone", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getRingtone_result(err);
          output.writeMessageBegin("getRingtone", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRingtone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRingtone(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getRingtone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRingtone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRingtone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_notifySleep = function(seqid, input, output) {
  var args = new TalkService_notifySleep_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifySleep.length === 2) {
    Q.fcall(this._handler.notifySleep.bind(this._handler), args.lastRev, args.badge)
      .then(function(result) {
        var result_obj = new TalkService_notifySleep_result({success: result});
        output.writeMessageBegin("notifySleep", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_notifySleep_result(err);
          output.writeMessageBegin("notifySleep", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifySleep", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifySleep(args.lastRev, args.badge, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_notifySleep_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("notifySleep", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifySleep", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_registerWithSnsIdAndIdentityCredential = function(seqid, input, output) {
  var args = new TalkService_registerWithSnsIdAndIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerWithSnsIdAndIdentityCredential.length === 7) {
    Q.fcall(this._handler.registerWithSnsIdAndIdentityCredential.bind(this._handler), args.snsIdType, args.snsAccessToken, args.identityCredential, args.region, args.udidHash, args.deviceInfo, args.migrationPincodeSessionId)
      .then(function(result) {
        var result_obj = new TalkService_registerWithSnsIdAndIdentityCredential_result({success: result});
        output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_registerWithSnsIdAndIdentityCredential_result(err);
          output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerWithSnsIdAndIdentityCredential(args.snsIdType, args.snsAccessToken, args.identityCredential, args.region, args.udidHash, args.deviceInfo, args.migrationPincodeSessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_registerWithSnsIdAndIdentityCredential_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_removeFollower = function(seqid, input, output) {
  var args = new TalkService_removeFollower_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeFollower.length === 1) {
    Q.fcall(this._handler.removeFollower.bind(this._handler), args.removeFollowerRequest)
      .then(function(result) {
        var result_obj = new TalkService_removeFollower_result({success: result});
        output.writeMessageBegin("removeFollower", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_removeFollower_result(err);
          output.writeMessageBegin("removeFollower", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeFollower", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeFollower(args.removeFollowerRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_removeFollower_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeFollower", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeFollower", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_requestAccountPasswordReset = function(seqid, input, output) {
  var args = new TalkService_requestAccountPasswordReset_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestAccountPasswordReset.length === 3) {
    Q.fcall(this._handler.requestAccountPasswordReset.bind(this._handler), args.provider, args.identifier, args.locale)
      .then(function(result) {
        var result_obj = new TalkService_requestAccountPasswordReset_result({success: result});
        output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_requestAccountPasswordReset_result(err);
          output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestAccountPasswordReset(args.provider, args.identifier, args.locale, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_requestAccountPasswordReset_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_sendEchoPush = function(seqid, input, output) {
  var args = new TalkService_sendEchoPush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendEchoPush.length === 1) {
    Q.fcall(this._handler.sendEchoPush.bind(this._handler), args.text)
      .then(function(result) {
        var result_obj = new TalkService_sendEchoPush_result({success: result});
        output.writeMessageBegin("sendEchoPush", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_sendEchoPush_result(err);
          output.writeMessageBegin("sendEchoPush", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendEchoPush", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendEchoPush(args.text, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_sendEchoPush_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sendEchoPush", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendEchoPush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_unfollow = function(seqid, input, output) {
  var args = new TalkService_unfollow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unfollow.length === 1) {
    Q.fcall(this._handler.unfollow.bind(this._handler), args.unfollowRequest)
      .then(function(result) {
        var result_obj = new TalkService_unfollow_result({success: result});
        output.writeMessageBegin("unfollow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_unfollow_result(err);
          output.writeMessageBegin("unfollow", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unfollow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unfollow(args.unfollowRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_unfollow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unfollow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unfollow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_inviteIntoGroupCall = function(seqid, input, output) {
  var args = new TalkService_inviteIntoGroupCall_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteIntoGroupCall.length === 3) {
    Q.fcall(this._handler.inviteIntoGroupCall.bind(this._handler), args.chatMid, args.memberMids, args.mediaType)
      .then(function(result) {
        var result_obj = new TalkService_inviteIntoGroupCall_result({success: result});
        output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_inviteIntoGroupCall_result(err);
          output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteIntoGroupCall(args.chatMid, args.memberMids, args.mediaType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_inviteIntoGroupCall_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteIntoGroupCall", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_cancelChatInvitation = function(seqid, input, output) {
  var args = new TalkService_cancelChatInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelChatInvitation.length === 1) {
    Q.fcall(this._handler.cancelChatInvitation.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_cancelChatInvitation_result({success: result});
        output.writeMessageBegin("cancelChatInvitation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_cancelChatInvitation_result(err);
          output.writeMessageBegin("cancelChatInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancelChatInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelChatInvitation(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_cancelChatInvitation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancelChatInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancelChatInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findChatByTicket = function(seqid, input, output) {
  var args = new TalkService_findChatByTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findChatByTicket.length === 1) {
    Q.fcall(this._handler.findChatByTicket.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_findChatByTicket_result({success: result});
        output.writeMessageBegin("findChatByTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findChatByTicket_result(err);
          output.writeMessageBegin("findChatByTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findChatByTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findChatByTicket(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findChatByTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findChatByTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findChatByTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getAllContactIds = function(seqid, input, output) {
  var args = new TalkService_getAllContactIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllContactIds.length === 1) {
    Q.fcall(this._handler.getAllContactIds.bind(this._handler), args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getAllContactIds_result({success: result});
        output.writeMessageBegin("getAllContactIds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getAllContactIds_result(err);
          output.writeMessageBegin("getAllContactIds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllContactIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllContactIds(args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getAllContactIds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllContactIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllContactIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getChatRoomBGMs = function(seqid, input, output) {
  var args = new TalkService_getChatRoomBGMs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatRoomBGMs.length === 2) {
    Q.fcall(this._handler.getChatRoomBGMs.bind(this._handler), args.chatRoomMids, args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getChatRoomBGMs_result({success: result});
        output.writeMessageBegin("getChatRoomBGMs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getChatRoomBGMs_result(err);
          output.writeMessageBegin("getChatRoomBGMs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChatRoomBGMs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatRoomBGMs(args.chatRoomMids, args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getChatRoomBGMs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getChatRoomBGMs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChatRoomBGMs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getE2EEGroupSharedKey = function(seqid, input, output) {
  var args = new TalkService_getE2EEGroupSharedKey_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getE2EEGroupSharedKey.length === 3) {
    Q.fcall(this._handler.getE2EEGroupSharedKey.bind(this._handler), args.keyVersion, args.chatMid, args.groupKeyId)
      .then(function(result) {
        var result_obj = new TalkService_getE2EEGroupSharedKey_result({success: result});
        output.writeMessageBegin("getE2EEGroupSharedKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getE2EEGroupSharedKey_result(err);
          output.writeMessageBegin("getE2EEGroupSharedKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getE2EEGroupSharedKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getE2EEGroupSharedKey(args.keyVersion, args.chatMid, args.groupKeyId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getE2EEGroupSharedKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getE2EEGroupSharedKey", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getE2EEGroupSharedKey", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getRSAKeyInfo = function(seqid, input, output) {
  var args = new TalkService_getRSAKeyInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRSAKeyInfo.length === 1) {
    Q.fcall(this._handler.getRSAKeyInfo.bind(this._handler), args.provider)
      .then(function(result) {
        var result_obj = new TalkService_getRSAKeyInfo_result({success: result});
        output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getRSAKeyInfo_result(err);
          output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRSAKeyInfo(args.provider, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getRSAKeyInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_fetchOperations = function(seqid, input, output) {
  var args = new TalkService_fetchOperations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchOperations.length === 2) {
    Q.fcall(this._handler.fetchOperations.bind(this._handler), args.localRev, args.count)
      .then(function(result) {
        var result_obj = new TalkService_fetchOperations_result({success: result});
        output.writeMessageBegin("fetchOperations", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_fetchOperations_result(err);
          output.writeMessageBegin("fetchOperations", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchOperations", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchOperations(args.localRev, args.count, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_fetchOperations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fetchOperations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchOperations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getGroupIdsInvited = function(seqid, input, output) {
  var args = new TalkService_getGroupIdsInvited_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupIdsInvited.length === 1) {
    Q.fcall(this._handler.getGroupIdsInvited.bind(this._handler), args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getGroupIdsInvited_result({success: result});
        output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getGroupIdsInvited_result(err);
          output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupIdsInvited(args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getGroupIdsInvited_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getProfile = function(seqid, input, output) {
  var args = new TalkService_getProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProfile.length === 1) {
    Q.fcall(this._handler.getProfile.bind(this._handler), args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getProfile_result({success: result});
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getProfile_result(err);
          output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProfile(args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_notifyUpdated = function(seqid, input, output) {
  var args = new TalkService_notifyUpdated_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyUpdated.length === 4) {
    Q.fcall(this._handler.notifyUpdated.bind(this._handler), args.lastRev, args.deviceInfo, args.udidHash, args.oldUdidHash)
      .then(function(result) {
        var result_obj = new TalkService_notifyUpdated_result({success: result});
        output.writeMessageBegin("notifyUpdated", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_notifyUpdated_result(err);
          output.writeMessageBegin("notifyUpdated", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyUpdated", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyUpdated(args.lastRev, args.deviceInfo, args.udidHash, args.oldUdidHash, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_notifyUpdated_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("notifyUpdated", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyUpdated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_registerWithSnsId = function(seqid, input, output) {
  var args = new TalkService_registerWithSnsId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerWithSnsId.length === 7) {
    Q.fcall(this._handler.registerWithSnsId.bind(this._handler), args.snsIdType, args.snsAccessToken, args.region, args.udidHash, args.deviceInfo, args.mid, args.migrationPincodeSessionId)
      .then(function(result) {
        var result_obj = new TalkService_registerWithSnsId_result({success: result});
        output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_registerWithSnsId_result(err);
          output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerWithSnsId(args.snsIdType, args.snsAccessToken, args.region, args.udidHash, args.deviceInfo, args.mid, args.migrationPincodeSessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_registerWithSnsId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_removeFriendRequest = function(seqid, input, output) {
  var args = new TalkService_removeFriendRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeFriendRequest.length === 2) {
    Q.fcall(this._handler.removeFriendRequest.bind(this._handler), args.direction, args.midOrEMid)
      .then(function(result) {
        var result_obj = new TalkService_removeFriendRequest_result({success: result});
        output.writeMessageBegin("removeFriendRequest", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_removeFriendRequest_result(err);
          output.writeMessageBegin("removeFriendRequest", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeFriendRequest", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeFriendRequest(args.direction, args.midOrEMid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_removeFriendRequest_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeFriendRequest", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeFriendRequest", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_openAuthSession = function(seqid, input, output) {
  var args = new TalkService_openAuthSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.openAuthSession.length === 1) {
    Q.fcall(this._handler.openAuthSession.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_openAuthSession_result({success: result});
        output.writeMessageBegin("openAuthSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_openAuthSession_result(err);
          output.writeMessageBegin("openAuthSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("openAuthSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.openAuthSession(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_openAuthSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("openAuthSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("openAuthSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_verifyQrcodeWithE2EE = function(seqid, input, output) {
  var args = new TalkService_verifyQrcodeWithE2EE_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyQrcodeWithE2EE.length === 6) {
    Q.fcall(this._handler.verifyQrcodeWithE2EE.bind(this._handler), args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain)
      .then(function(result) {
        var result_obj = new TalkService_verifyQrcodeWithE2EE_result({success: result});
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_verifyQrcodeWithE2EE_result(err);
          output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_verifyQrcodeWithE2EE_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyQrcodeWithE2EE", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getBalance = function(seqid, input, output) {
  var args = new TalkService_getBalance_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBalance.length === 1) {
    Q.fcall(this._handler.getBalance.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_getBalance_result({success: result});
        output.writeMessageBegin("getBalance", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getBalance_result(err);
          output.writeMessageBegin("getBalance", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBalance", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBalance(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getBalance_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBalance", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBalance", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getGroup = function(seqid, input, output) {
  var args = new TalkService_getGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroup.length === 1) {
    Q.fcall(this._handler.getGroup.bind(this._handler), args.groupId)
      .then(function(result) {
        var result_obj = new TalkService_getGroup_result({success: result});
        output.writeMessageBegin("getGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getGroup_result(err);
          output.writeMessageBegin("getGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroup(args.groupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getGroupWithoutMembers = function(seqid, input, output) {
  var args = new TalkService_getGroupWithoutMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupWithoutMembers.length === 1) {
    Q.fcall(this._handler.getGroupWithoutMembers.bind(this._handler), args.groupId)
      .then(function(result) {
        var result_obj = new TalkService_getGroupWithoutMembers_result({success: result});
        output.writeMessageBegin("getGroupWithoutMembers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getGroupWithoutMembers_result(err);
          output.writeMessageBegin("getGroupWithoutMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupWithoutMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupWithoutMembers(args.groupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getGroupWithoutMembers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupWithoutMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupWithoutMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getCompactGroup = function(seqid, input, output) {
  var args = new TalkService_getCompactGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCompactGroup.length === 1) {
    Q.fcall(this._handler.getCompactGroup.bind(this._handler), args.groupId)
      .then(function(result) {
        var result_obj = new TalkService_getCompactGroup_result({success: result});
        output.writeMessageBegin("getCompactGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getCompactGroup_result(err);
          output.writeMessageBegin("getCompactGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCompactGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCompactGroup(args.groupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getCompactGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCompactGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompactGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_unregisterUserAndDevice = function(seqid, input, output) {
  var args = new TalkService_unregisterUserAndDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterUserAndDevice.length === 0) {
    Q.fcall(this._handler.unregisterUserAndDevice.bind(this._handler))
      .then(function(result) {
        var result_obj = new TalkService_unregisterUserAndDevice_result({success: result});
        output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_unregisterUserAndDevice_result(err);
          output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterUserAndDevice(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_unregisterUserAndDevice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateNotificationToken = function(seqid, input, output) {
  var args = new TalkService_updateNotificationToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateNotificationToken.length === 1) {
    Q.fcall(this._handler.updateNotificationToken.bind(this._handler), args.type)
      .then(function(result) {
        var result_obj = new TalkService_updateNotificationToken_result({success: result});
        output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateNotificationToken_result(err);
          output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateNotificationToken(args.type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateNotificationToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_verifyPhoneNumber = function(seqid, input, output) {
  var args = new TalkService_verifyPhoneNumber_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyPhoneNumber.length === 5) {
    Q.fcall(this._handler.verifyPhoneNumber.bind(this._handler), args.sessionId, args.pinCode, args.udidHash, args.migrationPincodeSessionId, args.oldUdidHash)
      .then(function(result) {
        var result_obj = new TalkService_verifyPhoneNumber_result({success: result});
        output.writeMessageBegin("verifyPhoneNumber", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_verifyPhoneNumber_result(err);
          output.writeMessageBegin("verifyPhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyPhoneNumber(args.sessionId, args.pinCode, args.udidHash, args.migrationPincodeSessionId, args.oldUdidHash, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_verifyPhoneNumber_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyPhoneNumber", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_cancelGroupInvitation = function(seqid, input, output) {
  var args = new TalkService_cancelGroupInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelGroupInvitation.length === 3) {
    Q.fcall(this._handler.cancelGroupInvitation.bind(this._handler), args.reqSeq, args.groupId, args.contactIds)
      .then(function(result) {
        var result_obj = new TalkService_cancelGroupInvitation_result({success: result});
        output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_cancelGroupInvitation_result(err);
          output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelGroupInvitation(args.reqSeq, args.groupId, args.contactIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_cancelGroupInvitation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_createRoomV2 = function(seqid, input, output) {
  var args = new TalkService_createRoomV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createRoomV2.length === 2) {
    Q.fcall(this._handler.createRoomV2.bind(this._handler), args.reqSeq, args.contactIds)
      .then(function(result) {
        var result_obj = new TalkService_createRoomV2_result({success: result});
        output.writeMessageBegin("createRoomV2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_createRoomV2_result(err);
          output.writeMessageBegin("createRoomV2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createRoomV2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createRoomV2(args.reqSeq, args.contactIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_createRoomV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createRoomV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createRoomV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findContactByMetaTag = function(seqid, input, output) {
  var args = new TalkService_findContactByMetaTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactByMetaTag.length === 2) {
    Q.fcall(this._handler.findContactByMetaTag.bind(this._handler), args.searchId, args.reference)
      .then(function(result) {
        var result_obj = new TalkService_findContactByMetaTag_result({success: result});
        output.writeMessageBegin("findContactByMetaTag", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findContactByMetaTag_result(err);
          output.writeMessageBegin("findContactByMetaTag", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByMetaTag", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactByMetaTag(args.searchId, args.reference, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findContactByMetaTag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findContactByMetaTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactByMetaTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getChats = function(seqid, input, output) {
  var args = new TalkService_getChats_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChats.length === 1) {
    Q.fcall(this._handler.getChats.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_getChats_result({success: result});
        output.writeMessageBegin("getChats", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getChats_result(err);
          output.writeMessageBegin("getChats", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChats", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChats(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getChats_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getChats", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChats", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getGroupIdsJoined = function(seqid, input, output) {
  var args = new TalkService_getGroupIdsJoined_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupIdsJoined.length === 1) {
    Q.fcall(this._handler.getGroupIdsJoined.bind(this._handler), args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getGroupIdsJoined_result({success: result});
        output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getGroupIdsJoined_result(err);
          output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupIdsJoined(args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getGroupIdsJoined_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getRoomsV2 = function(seqid, input, output) {
  var args = new TalkService_getRoomsV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRoomsV2.length === 1) {
    Q.fcall(this._handler.getRoomsV2.bind(this._handler), args.roomIds)
      .then(function(result) {
        var result_obj = new TalkService_getRoomsV2_result({success: result});
        output.writeMessageBegin("getRoomsV2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getRoomsV2_result(err);
          output.writeMessageBegin("getRoomsV2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRoomsV2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRoomsV2(args.roomIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getRoomsV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRoomsV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRoomsV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_reissueChatTicket = function(seqid, input, output) {
  var args = new TalkService_reissueChatTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reissueChatTicket.length === 1) {
    Q.fcall(this._handler.reissueChatTicket.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_reissueChatTicket_result({success: result});
        output.writeMessageBegin("reissueChatTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_reissueChatTicket_result(err);
          output.writeMessageBegin("reissueChatTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueChatTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reissueChatTicket(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_reissueChatTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reissueChatTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reissueChatTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_sendMessage = function(seqid, input, output) {
  var args = new TalkService_sendMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessage.length === 2) {
    Q.fcall(this._handler.sendMessage.bind(this._handler), args.seq, args.message)
      .then(function(result) {
        var result_obj = new TalkService_sendMessage_result({success: result});
        output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_sendMessage_result(err);
          output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessage(args.seq, args.message, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_sendMessage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_unsendMessage = function(seqid, input, output) {
  var args = new TalkService_unsendMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unsendMessage.length === 2) {
    Q.fcall(this._handler.unsendMessage.bind(this._handler), args.seq, args.messageId)
      .then(function(result) {
        var result_obj = new TalkService_unsendMessage_result({success: result});
        output.writeMessageBegin("unsendMessage", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_unsendMessage_result(err);
          output.writeMessageBegin("unsendMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unsendMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unsendMessage(args.seq, args.messageId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_unsendMessage_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unsendMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unsendMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_acquireGroupCallRoute = function(seqid, input, output) {
  var args = new TalkService_acquireGroupCallRoute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acquireGroupCallRoute.length === 4) {
    Q.fcall(this._handler.acquireGroupCallRoute.bind(this._handler), args.chatMid, args.mediaType, args.isInitialHost, args.capabilities)
      .then(function(result) {
        var result_obj = new TalkService_acquireGroupCallRoute_result({success: result});
        output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_acquireGroupCallRoute_result(err);
          output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acquireGroupCallRoute(args.chatMid, args.mediaType, args.isInitialHost, args.capabilities, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_acquireGroupCallRoute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acquireGroupCallRoute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_acceptChatInvitationByTicket = function(seqid, input, output) {
  var args = new TalkService_acceptChatInvitationByTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptChatInvitationByTicket.length === 1) {
    Q.fcall(this._handler.acceptChatInvitationByTicket.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_acceptChatInvitationByTicket_result({success: result});
        output.writeMessageBegin("acceptChatInvitationByTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_acceptChatInvitationByTicket_result(err);
          output.writeMessageBegin("acceptChatInvitationByTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptChatInvitationByTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptChatInvitationByTicket(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_acceptChatInvitationByTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("acceptChatInvitationByTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptChatInvitationByTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findContactByUserTicket = function(seqid, input, output) {
  var args = new TalkService_findContactByUserTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactByUserTicket.length === 1) {
    Q.fcall(this._handler.findContactByUserTicket.bind(this._handler), args.ticketIdWithTag)
      .then(function(result) {
        var result_obj = new TalkService_findContactByUserTicket_result({success: result});
        output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findContactByUserTicket_result(err);
          output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactByUserTicket(args.ticketIdWithTag, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findContactByUserTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getE2EEPublicKey = function(seqid, input, output) {
  var args = new TalkService_getE2EEPublicKey_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getE2EEPublicKey.length === 3) {
    Q.fcall(this._handler.getE2EEPublicKey.bind(this._handler), args.mid, args.keyVersion, args.keyId)
      .then(function(result) {
        var result_obj = new TalkService_getE2EEPublicKey_result({success: result});
        output.writeMessageBegin("getE2EEPublicKey", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getE2EEPublicKey_result(err);
          output.writeMessageBegin("getE2EEPublicKey", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getE2EEPublicKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getE2EEPublicKey(args.mid, args.keyVersion, args.keyId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getE2EEPublicKey_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getE2EEPublicKey", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getE2EEPublicKey", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_registerDeviceWithIdentityCredential = function(seqid, input, output) {
  var args = new TalkService_registerDeviceWithIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDeviceWithIdentityCredential.length === 5) {
    Q.fcall(this._handler.registerDeviceWithIdentityCredential.bind(this._handler), args.sessionId, args.provider, args.identifier, args.verifier, args.migrationPincodeSessionId)
      .then(function(result) {
        var result_obj = new TalkService_registerDeviceWithIdentityCredential_result({success: result});
        output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_registerDeviceWithIdentityCredential_result(err);
          output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDeviceWithIdentityCredential(args.sessionId, args.provider, args.identifier, args.verifier, args.migrationPincodeSessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_registerDeviceWithIdentityCredential_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_reissueGroupTicket = function(seqid, input, output) {
  var args = new TalkService_reissueGroupTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reissueGroupTicket.length === 1) {
    Q.fcall(this._handler.reissueGroupTicket.bind(this._handler), args.groupMid)
      .then(function(result) {
        var result_obj = new TalkService_reissueGroupTicket_result({success: result});
        output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_reissueGroupTicket_result(err);
          output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reissueGroupTicket(args.groupMid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_reissueGroupTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateProfileAttributes = function(seqid, input, output) {
  var args = new TalkService_updateProfileAttributes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateProfileAttributes.length === 2) {
    Q.fcall(this._handler.updateProfileAttributes.bind(this._handler), args.reqSeq, args.request)
      .then(function(result) {
        var result_obj = new TalkService_updateProfileAttributes_result({success: result});
        output.writeMessageBegin("updateProfileAttributes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateProfileAttributes_result(err);
          output.writeMessageBegin("updateProfileAttributes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateProfileAttributes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateProfileAttributes(args.reqSeq, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateProfileAttributes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateProfileAttributes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateProfileAttributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_verifyQrcode = function(seqid, input, output) {
  var args = new TalkService_verifyQrcode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyQrcode.length === 2) {
    Q.fcall(this._handler.verifyQrcode.bind(this._handler), args.verifier, args.pinCode)
      .then(function(result) {
        var result_obj = new TalkService_verifyQrcode_result({success: result});
        output.writeMessageBegin("verifyQrcode", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_verifyQrcode_result(err);
          output.writeMessageBegin("verifyQrcode", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyQrcode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyQrcode(args.verifier, args.pinCode, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_verifyQrcode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verifyQrcode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyQrcode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_acceptChatInvitation = function(seqid, input, output) {
  var args = new TalkService_acceptChatInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptChatInvitation.length === 1) {
    Q.fcall(this._handler.acceptChatInvitation.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_acceptChatInvitation_result({success: result});
        output.writeMessageBegin("acceptChatInvitation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_acceptChatInvitation_result(err);
          output.writeMessageBegin("acceptChatInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptChatInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptChatInvitation(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_acceptChatInvitation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("acceptChatInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptChatInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_decryptFollowEMid = function(seqid, input, output) {
  var args = new TalkService_decryptFollowEMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.decryptFollowEMid.length === 1) {
    Q.fcall(this._handler.decryptFollowEMid.bind(this._handler), args.eMid)
      .then(function(result) {
        var result_obj = new TalkService_decryptFollowEMid_result({success: result});
        output.writeMessageBegin("decryptFollowEMid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_decryptFollowEMid_result(err);
          output.writeMessageBegin("decryptFollowEMid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("decryptFollowEMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.decryptFollowEMid(args.eMid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_decryptFollowEMid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("decryptFollowEMid", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("decryptFollowEMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findContactByUserid = function(seqid, input, output) {
  var args = new TalkService_findContactByUserid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactByUserid.length === 1) {
    Q.fcall(this._handler.findContactByUserid.bind(this._handler), args.searchId)
      .then(function(result) {
        var result_obj = new TalkService_findContactByUserid_result({success: result});
        output.writeMessageBegin("findContactByUserid", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findContactByUserid_result(err);
          output.writeMessageBegin("findContactByUserid", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByUserid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactByUserid(args.searchId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findContactByUserid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findContactByUserid", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactByUserid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getServerTime = function(seqid, input, output) {
  var args = new TalkService_getServerTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServerTime.length === 0) {
    Q.fcall(this._handler.getServerTime.bind(this._handler))
      .then(function(result) {
        var result_obj = new TalkService_getServerTime_result({success: result});
        output.writeMessageBegin("getServerTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getServerTime_result(err);
          output.writeMessageBegin("getServerTime", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getServerTime(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getServerTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getServerTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServerTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_inviteIntoChat = function(seqid, input, output) {
  var args = new TalkService_inviteIntoChat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteIntoChat.length === 1) {
    Q.fcall(this._handler.inviteIntoChat.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_inviteIntoChat_result({success: result});
        output.writeMessageBegin("inviteIntoChat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_inviteIntoChat_result(err);
          output.writeMessageBegin("inviteIntoChat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoChat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteIntoChat(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_inviteIntoChat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("inviteIntoChat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteIntoChat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_acceptGroupInvitationByTicket = function(seqid, input, output) {
  var args = new TalkService_acceptGroupInvitationByTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptGroupInvitationByTicket.length === 3) {
    Q.fcall(this._handler.acceptGroupInvitationByTicket.bind(this._handler), args.reqSeq, args.groupMid, args.ticketId)
      .then(function(result) {
        var result_obj = new TalkService_acceptGroupInvitationByTicket_result({success: result});
        output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_acceptGroupInvitationByTicket_result(err);
          output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptGroupInvitationByTicket(args.reqSeq, args.groupMid, args.ticketId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_acceptGroupInvitationByTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_deleteOtherFromChat = function(seqid, input, output) {
  var args = new TalkService_deleteOtherFromChat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteOtherFromChat.length === 1) {
    Q.fcall(this._handler.deleteOtherFromChat.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_deleteOtherFromChat_result({success: result});
        output.writeMessageBegin("deleteOtherFromChat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_deleteOtherFromChat_result(err);
          output.writeMessageBegin("deleteOtherFromChat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteOtherFromChat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteOtherFromChat(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_deleteOtherFromChat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteOtherFromChat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteOtherFromChat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findContactsByPhone = function(seqid, input, output) {
  var args = new TalkService_findContactsByPhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactsByPhone.length === 1) {
    Q.fcall(this._handler.findContactsByPhone.bind(this._handler), args.phones)
      .then(function(result) {
        var result_obj = new TalkService_findContactsByPhone_result({success: result});
        output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findContactsByPhone_result(err);
          output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactsByPhone(args.phones, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findContactsByPhone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getGroupsV2 = function(seqid, input, output) {
  var args = new TalkService_getGroupsV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupsV2.length === 1) {
    Q.fcall(this._handler.getGroupsV2.bind(this._handler), args.groupId)
      .then(function(result) {
        var result_obj = new TalkService_getGroupsV2_result({success: result});
        output.writeMessageBegin("getGroupsV2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getGroupsV2_result(err);
          output.writeMessageBegin("getGroupsV2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupsV2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupsV2(args.groupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getGroupsV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupsV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupsV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_inviteIntoGroup = function(seqid, input, output) {
  var args = new TalkService_inviteIntoGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteIntoGroup.length === 3) {
    Q.fcall(this._handler.inviteIntoGroup.bind(this._handler), args.reqSeq, args.groupId, args.contactIds)
      .then(function(result) {
        var result_obj = new TalkService_inviteIntoGroup_result({success: result});
        output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_inviteIntoGroup_result(err);
          output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteIntoGroup(args.reqSeq, args.groupId, args.contactIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_inviteIntoGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_acceptGroupInvitation = function(seqid, input, output) {
  var args = new TalkService_acceptGroupInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptGroupInvitation.length === 2) {
    Q.fcall(this._handler.acceptGroupInvitation.bind(this._handler), args.reqSeq, args.groupId)
      .then(function(result) {
        var result_obj = new TalkService_acceptGroupInvitation_result({success: result});
        output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_acceptGroupInvitation_result(err);
          output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptGroupInvitation(args.reqSeq, args.groupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_acceptGroupInvitation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_deleteSelfFromChat = function(seqid, input, output) {
  var args = new TalkService_deleteSelfFromChat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteSelfFromChat.length === 1) {
    Q.fcall(this._handler.deleteSelfFromChat.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_deleteSelfFromChat_result({success: result});
        output.writeMessageBegin("deleteSelfFromChat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_deleteSelfFromChat_result(err);
          output.writeMessageBegin("deleteSelfFromChat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteSelfFromChat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteSelfFromChat(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_deleteSelfFromChat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteSelfFromChat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteSelfFromChat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getBlockedContactIds = function(seqid, input, output) {
  var args = new TalkService_getBlockedContactIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBlockedContactIds.length === 1) {
    Q.fcall(this._handler.getBlockedContactIds.bind(this._handler), args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getBlockedContactIds_result({success: result});
        output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getBlockedContactIds_result(err);
          output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBlockedContactIds(args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getBlockedContactIds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getSettingsAttributes2 = function(seqid, input, output) {
  var args = new TalkService_getSettingsAttributes2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSettingsAttributes2.length === 1) {
    Q.fcall(this._handler.getSettingsAttributes2.bind(this._handler), args.attributesToRetrieve)
      .then(function(result) {
        var result_obj = new TalkService_getSettingsAttributes2_result({success: result});
        output.writeMessageBegin("getSettingsAttributes2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getSettingsAttributes2_result(err);
          output.writeMessageBegin("getSettingsAttributes2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSettingsAttributes2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSettingsAttributes2(args.attributesToRetrieve, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getSettingsAttributes2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSettingsAttributes2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSettingsAttributes2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_inviteIntoRoom = function(seqid, input, output) {
  var args = new TalkService_inviteIntoRoom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteIntoRoom.length === 3) {
    Q.fcall(this._handler.inviteIntoRoom.bind(this._handler), args.reqSeq, args.roomId, args.contactIds)
      .then(function(result) {
        var result_obj = new TalkService_inviteIntoRoom_result({success: result});
        output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_inviteIntoRoom_result(err);
          output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteIntoRoom(args.reqSeq, args.roomId, args.contactIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_inviteIntoRoom_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_rejectChatInvitation = function(seqid, input, output) {
  var args = new TalkService_rejectChatInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rejectChatInvitation.length === 1) {
    Q.fcall(this._handler.rejectChatInvitation.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_rejectChatInvitation_result({success: result});
        output.writeMessageBegin("rejectChatInvitation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_rejectChatInvitation_result(err);
          output.writeMessageBegin("rejectChatInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rejectChatInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rejectChatInvitation(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_rejectChatInvitation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rejectChatInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rejectChatInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateChatRoomBGM = function(seqid, input, output) {
  var args = new TalkService_updateChatRoomBGM_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChatRoomBGM.length === 3) {
    Q.fcall(this._handler.updateChatRoomBGM.bind(this._handler), args.reqSeq, args.chatRoomMid, args.chatRoomBGMInfo)
      .then(function(result) {
        var result_obj = new TalkService_updateChatRoomBGM_result({success: result});
        output.writeMessageBegin("updateChatRoomBGM", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateChatRoomBGM_result(err);
          output.writeMessageBegin("updateChatRoomBGM", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateChatRoomBGM", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChatRoomBGM(args.reqSeq, args.chatRoomMid, args.chatRoomBGMInfo, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateChatRoomBGM_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateChatRoomBGM", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateChatRoomBGM", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findGroupByTicket = function(seqid, input, output) {
  var args = new TalkService_findGroupByTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findGroupByTicket.length === 1) {
    Q.fcall(this._handler.findGroupByTicket.bind(this._handler), args.ticketId)
      .then(function(result) {
        var result_obj = new TalkService_findGroupByTicket_result({success: result});
        output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findGroupByTicket_result(err);
          output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findGroupByTicket(args.ticketId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findGroupByTicket_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getRecentFriendRequests = function(seqid, input, output) {
  var args = new TalkService_getRecentFriendRequests_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRecentFriendRequests.length === 1) {
    Q.fcall(this._handler.getRecentFriendRequests.bind(this._handler), args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getRecentFriendRequests_result({success: result});
        output.writeMessageBegin("getRecentFriendRequests", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getRecentFriendRequests_result(err);
          output.writeMessageBegin("getRecentFriendRequests", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRecentFriendRequests", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRecentFriendRequests(args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getRecentFriendRequests_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRecentFriendRequests", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRecentFriendRequests", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getSettingsAttributes = function(seqid, input, output) {
  var args = new TalkService_getSettingsAttributes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSettingsAttributes.length === 1) {
    Q.fcall(this._handler.getSettingsAttributes.bind(this._handler), args.attrBitset)
      .then(function(result) {
        var result_obj = new TalkService_getSettingsAttributes_result({success: result});
        output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getSettingsAttributes_result(err);
          output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSettingsAttributes(args.attrBitset, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getSettingsAttributes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_rejectGroupInvitation = function(seqid, input, output) {
  var args = new TalkService_rejectGroupInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rejectGroupInvitation.length === 2) {
    Q.fcall(this._handler.rejectGroupInvitation.bind(this._handler), args.reqSeq, args.groupId)
      .then(function(result) {
        var result_obj = new TalkService_rejectGroupInvitation_result({success: result});
        output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_rejectGroupInvitation_result(err);
          output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rejectGroupInvitation(args.reqSeq, args.groupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_rejectGroupInvitation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateChat = function(seqid, input, output) {
  var args = new TalkService_updateChat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChat.length === 1) {
    Q.fcall(this._handler.updateChat.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new TalkService_updateChat_result({success: result});
        output.writeMessageBegin("updateChat", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateChat_result(err);
          output.writeMessageBegin("updateChat", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateChat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChat(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateChat_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateChat", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateChat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateSettingsAttributes2 = function(seqid, input, output) {
  var args = new TalkService_updateSettingsAttributes2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSettingsAttributes2.length === 3) {
    Q.fcall(this._handler.updateSettingsAttributes2.bind(this._handler), args.reqSeq, args.attributesToUpdate, args.settings)
      .then(function(result) {
        var result_obj = new TalkService_updateSettingsAttributes2_result({success: result});
        output.writeMessageBegin("updateSettingsAttributes2", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateSettingsAttributes2_result(err);
          output.writeMessageBegin("updateSettingsAttributes2", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSettingsAttributes2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSettingsAttributes2(args.reqSeq, args.attributesToUpdate, args.settings, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateSettingsAttributes2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateSettingsAttributes2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSettingsAttributes2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getSettings = function(seqid, input, output) {
  var args = new TalkService_getSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSettings.length === 1) {
    Q.fcall(this._handler.getSettings.bind(this._handler), args.syncReason)
      .then(function(result) {
        var result_obj = new TalkService_getSettings_result({success: result});
        output.writeMessageBegin("getSettings", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getSettings_result(err);
          output.writeMessageBegin("getSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSettings(args.syncReason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_noop = function(seqid, input, output) {
  var args = new TalkService_noop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.noop.length === 0) {
    Q.fcall(this._handler.noop.bind(this._handler))
      .then(function(result) {
        var result_obj = new TalkService_noop_result({success: result});
        output.writeMessageBegin("noop", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_noop_result(err);
          output.writeMessageBegin("noop", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("noop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.noop(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_noop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("noop", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("noop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_removeAllMessages = function(seqid, input, output) {
  var args = new TalkService_removeAllMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeAllMessages.length === 2) {
    Q.fcall(this._handler.removeAllMessages.bind(this._handler), args.seq, args.lastMessageId)
      .then(function(result) {
        var result_obj = new TalkService_removeAllMessages_result({success: result});
        output.writeMessageBegin("removeAllMessages", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_removeAllMessages_result(err);
          output.writeMessageBegin("removeAllMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeAllMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeAllMessages(args.seq, args.lastMessageId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_removeAllMessages_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeAllMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeAllMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateContactSetting = function(seqid, input, output) {
  var args = new TalkService_updateContactSetting_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateContactSetting.length === 4) {
    Q.fcall(this._handler.updateContactSetting.bind(this._handler), args.reqSeq, args.mid, args.flag, args.value)
      .then(function(result) {
        var result_obj = new TalkService_updateContactSetting_result({success: result});
        output.writeMessageBegin("updateContactSetting", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateContactSetting_result(err);
          output.writeMessageBegin("updateContactSetting", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateContactSetting", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateContactSetting(args.reqSeq, args.mid, args.flag, args.value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateContactSetting_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateContactSetting", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateContactSetting", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getGroupCall = function(seqid, input, output) {
  var args = new TalkService_getGroupCall_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupCall.length === 1) {
    Q.fcall(this._handler.getGroupCall.bind(this._handler), args.chatMid)
      .then(function(result) {
        var result_obj = new TalkService_getGroupCall_result({success: result});
        output.writeMessageBegin("getGroupCall", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getGroupCall_result(err);
          output.writeMessageBegin("getGroupCall", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupCall", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupCall(args.chatMid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getGroupCall_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGroupCall", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupCall", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_fetchOps = function(seqid, input, output) {
  var args = new TalkService_fetchOps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchOps.length === 4) {
    Q.fcall(this._handler.fetchOps.bind(this._handler), args.localRev, args.count, args.globalRev, args.individualRev)
      .then(function(result) {
        var result_obj = new TalkService_fetchOps_result({success: result});
        output.writeMessageBegin("fetchOps", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_fetchOps_result(err);
          output.writeMessageBegin("fetchOps", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchOps", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchOps(args.localRev, args.count, args.globalRev, args.individualRev, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_fetchOps_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fetchOps", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchOps", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_kickoutFromGroup = function(seqid, input, output) {
  var args = new TalkService_kickoutFromGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.kickoutFromGroup.length === 3) {
    Q.fcall(this._handler.kickoutFromGroup.bind(this._handler), args.reqSeq, args.groupId, args.contactIds)
      .then(function(result) {
        var result_obj = new TalkService_kickoutFromGroup_result({success: result});
        output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_kickoutFromGroup_result(err);
          output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.kickoutFromGroup(args.reqSeq, args.groupId, args.contactIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_kickoutFromGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_acquireEncryptedAccessToken = function(seqid, input, output) {
  var args = new TalkService_acquireEncryptedAccessToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acquireEncryptedAccessToken.length === 1) {
    Q.fcall(this._handler.acquireEncryptedAccessToken.bind(this._handler), args.featureType)
      .then(function(result) {
        var result_obj = new TalkService_acquireEncryptedAccessToken_result({success: result});
        output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_acquireEncryptedAccessToken_result(err);
          output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acquireEncryptedAccessToken(args.featureType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_acquireEncryptedAccessToken_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_createChatRoomAnnouncement = function(seqid, input, output) {
  var args = new TalkService_createChatRoomAnnouncement_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createChatRoomAnnouncement.length === 4) {
    Q.fcall(this._handler.createChatRoomAnnouncement.bind(this._handler), args.reqSeq, args.chatRoomMid, args.type, args.contents)
      .then(function(result) {
        var result_obj = new TalkService_createChatRoomAnnouncement_result({success: result});
        output.writeMessageBegin("createChatRoomAnnouncement", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_createChatRoomAnnouncement_result(err);
          output.writeMessageBegin("createChatRoomAnnouncement", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createChatRoomAnnouncement", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.type, args.contents, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_createChatRoomAnnouncement_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createChatRoomAnnouncement", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createChatRoomAnnouncement", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_findAndAddContactByMetaTag = function(seqid, input, output) {
  var args = new TalkService_findAndAddContactByMetaTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactByMetaTag.length === 3) {
    Q.fcall(this._handler.findAndAddContactByMetaTag.bind(this._handler), args.reqSeq, args.searchId, args.reference)
      .then(function(result) {
        var result_obj = new TalkService_findAndAddContactByMetaTag_result({success: result});
        output.writeMessageBegin("findAndAddContactByMetaTag", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_findAndAddContactByMetaTag_result(err);
          output.writeMessageBegin("findAndAddContactByMetaTag", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactByMetaTag", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactByMetaTag(args.reqSeq, args.searchId, args.reference, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_findAndAddContactByMetaTag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findAndAddContactByMetaTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactByMetaTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_follow = function(seqid, input, output) {
  var args = new TalkService_follow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.follow.length === 1) {
    Q.fcall(this._handler.follow.bind(this._handler), args.followRequest)
      .then(function(result) {
        var result_obj = new TalkService_follow_result({success: result});
        output.writeMessageBegin("follow", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_follow_result(err);
          output.writeMessageBegin("follow", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("follow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.follow(args.followRequest, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_follow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("follow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("follow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_getContact = function(seqid, input, output) {
  var args = new TalkService_getContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContact.length === 1) {
    Q.fcall(this._handler.getContact.bind(this._handler), args.id)
      .then(function(result) {
        var result_obj = new TalkService_getContact_result({success: result});
        output.writeMessageBegin("getContact", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_getContact_result(err);
          output.writeMessageBegin("getContact", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContact(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_getContact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getContact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_leaveGroup = function(seqid, input, output) {
  var args = new TalkService_leaveGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.leaveGroup.length === 2) {
    Q.fcall(this._handler.leaveGroup.bind(this._handler), args.reqSeq, args.groupId)
      .then(function(result) {
        var result_obj = new TalkService_leaveGroup_result({success: result});
        output.writeMessageBegin("leaveGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_leaveGroup_result(err);
          output.writeMessageBegin("leaveGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("leaveGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.leaveGroup(args.reqSeq, args.groupId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_leaveGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("leaveGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("leaveGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_sendChatChecked = function(seqid, input, output) {
  var args = new TalkService_sendChatChecked_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendChatChecked.length === 4) {
    Q.fcall(this._handler.sendChatChecked.bind(this._handler), args.seq, args.chatMid, args.lastMessageId, args.sessionId)
      .then(function(result) {
        var result_obj = new TalkService_sendChatChecked_result({success: result});
        output.writeMessageBegin("sendChatChecked", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_sendChatChecked_result(err);
          output.writeMessageBegin("sendChatChecked", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendChatChecked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendChatChecked(args.seq, args.chatMid, args.lastMessageId, args.sessionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_sendChatChecked_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sendChatChecked", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendChatChecked", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TalkServiceProcessor.prototype.process_updateIdentifier = function(seqid, input, output) {
  var args = new TalkService_updateIdentifier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateIdentifier.length === 2) {
    Q.fcall(this._handler.updateIdentifier.bind(this._handler), args.authSessionId, args.request)
      .then(function(result) {
        var result_obj = new TalkService_updateIdentifier_result({success: result});
        output.writeMessageBegin("updateIdentifier", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.TalkException) {
          result = new TalkService_updateIdentifier_result(err);
          output.writeMessageBegin("updateIdentifier", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateIdentifier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateIdentifier(args.authSessionId, args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TalkException) {
        result_obj = new TalkService_updateIdentifier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
